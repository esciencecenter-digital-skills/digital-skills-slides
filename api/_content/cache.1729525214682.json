{"generatedAt":1729525224824,"generateTime":292,"contents":[{"_path":"/config","_dir":"","_draft":false,"_partial":false,"_locale":"","publicProps":{"title":"Digital Skills Slides","baseURL":"digital-skills-slides","repoName":"digital-skills-slides","repoOwner":"esciencecenter-digital-skills","organization":"Netherlands eScience Center","categoryOrder":["Good Practices"]},"_id":"local_fs:config.json","_type":"json","title":"Config","_source":"local_fs","_file":"config.json","_extension":"json"},{"_path":"/","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Hello world","description":"Here is some markdown content.","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"hello-world"},"children":[{"type":"text","value":"Hello world"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here is some markdown content."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/lessons/demo"},"children":[{"type":"text","value":"Demo lesson link"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"local_fs:index.md","_source":"local_fs","_file":"index.md","_extension":"md","plainText":"# Hello world\n\nHere is some markdown content.\n\n[Demo lesson link](/lessons/demo)"},{"_path":"/license","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"LICENSE","description":"The content of the modules/ folder of this project is licensed under a Creative Commons Attribution 4.0 International License.","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"rel":["license"],"href":"http://creativecommons.org/licenses/by/4.0/"},"children":[{"type":"element","tag":"img","props":{"alt":"Creative Commons License","style":"border-width:0","src":"https://i.creativecommons.org/l/by/4.0/88x31.png"},"children":[]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"The content of the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"modules/"}]},{"type":"text","value":" folder of this project is licensed under a "},{"type":"element","tag":"a","props":{"rel":["license"],"href":"http://creativecommons.org/licenses/by/4.0/"},"children":[{"type":"text","value":"Creative Commons Attribution 4.0 International License"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This license does not apply to any image files in the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"modules"}]},{"type":"text","value":" folder or its subfolders.\nImage files are files with "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".png"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".jpg"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".svg"}]},{"type":"text","value":", or "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".gif"}]},{"type":"text","value":" extensions."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"local_fs:LICENSE.md","_source":"local_fs","_file":"LICENSE.md","_extension":"md","plainText":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/88x31.png\" /></a><br />The content of the `modules/` folder of this project is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.\n\nThis license does not apply to any image files in the `modules` folder or its subfolders.\nImage files are files with `.png`, `.jpg`, `.svg`, or `.gif` extensions.\n"},{"_path":"/main/about","_dir":"main","_draft":false,"_partial":false,"_locale":"","title":"About","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"about-this-lessonproject"},"children":[{"type":"text","value":"About this lesson/project"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Provide details about the project and lesson."}]},{"type":"element","tag":"h2","props":{"id":"target-audience"},"children":[{"type":"text","value":"Target audience"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Define target audience for this material."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"about-this-lessonproject","depth":2,"text":"About this lesson/project"},{"id":"target-audience","depth":2,"text":"Target audience"}]}},"_type":"markdown","_id":"local_fs:main:about.md","_source":"local_fs","_file":"main/about.md","_extension":"md","plainText":"---\ntitle: About\n---\n\n## About this lesson/project\n\nProvide details about the project and lesson.\n\n## Target audience\n\nDefine target audience for this material."},{"_path":"/main/contribute","_dir":"main","_draft":false,"_partial":false,"_locale":"","title":"Contribute","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"contributing-to-this-lesson"},"children":[{"type":"text","value":"Contributing to this lesson"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add contributing guidelines for you project."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"contributing-to-this-lesson","depth":2,"text":"Contributing to this lesson"}]}},"_type":"markdown","_id":"local_fs:main:contribute.md","_source":"local_fs","_file":"main/contribute.md","_extension":"md","plainText":"---\ntitle: Contribute\n---\n\n## Contributing to this lesson\n\nAdd contributing guidelines for you project."},{"_path":"/modules/git-lesson/git-slides","_dir":"git-lesson","_draft":false,"_partial":false,"_locale":"","title":"Git and GitHub","description":"What is version control and why should I use it?","type":"slides","order":1,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"automated-version-control"},"children":[{"type":"text","value":"Automated Version Control"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"What is version control and why should I use it?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Git all set up?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"SSH working?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Otherwise: breakout room"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"img","props":{"style":"height: 70vh;","src":"https://swcarpentry.github.io/git-novice/fig/phd101212s.png"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"span","props":{"style":"font-size: small;"},"children":[{"type":"text","value":"“Piled Higher and Deeper” by Jorge Cham, "},{"type":"element","tag":"a","props":{"href":"http://www.phdcomics.com","rel":["nofollow"]},"children":[{"type":"text","value":"http://www.phdcomics.com"}]},{"type":"text","value":" "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"documents-are"},"children":[{"type":"text","value":"Documents are..."}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\n  a series of changes\n  "},{"type":"element","tag":"img","props":{"style":"height: 30vh; margin: 0; padding: 0;","src":"https://swcarpentry.github.io/git-novice/fig/play-changes.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"collaboration"},"children":[{"type":"text","value":"Collaboration"}]},{"type":"element","tag":"div","props":{"style":"float: left; width: 49%;"},"children":[{"type":"text","value":"\n  independent changes\n  "},{"type":"element","tag":"img","props":{"style":"height: 350px; aspect-ratio: 327/308;","src":"/modules/git-lesson/media/versions.svg"},"children":[]}]},{"type":"element","tag":"div","props":{"className":["fragment"],"style":"float: right; width: 49%;"},"children":[{"type":"text","value":"\n  can be merged\n  "},{"type":"element","tag":"img","props":{"style":"height: 350px; aspect-ratio: 335/307;","src":"/modules/git-lesson/media/merge.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"version-control-key-points"},"children":[{"type":"text","value":"Version Control: Key Points"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version control is track changes on steroids."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version control is like an unlimited "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"undo"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version control also allows many people to work in parallel."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"the-holy-realms-of-git"},"children":[{"type":"text","value":"The Holy Realms of Git"}]},{"type":"element","tag":"img","props":{"src":"https://swcarpentry.github.io/git-novice/fig/git-staging-area.svg"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"text","value":"workspace"}]},{"type":"text","value":"  📂"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Your filesystem"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"text","value":"index"}]},{"type":"text","value":"  🕒\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Staging area"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Files wait patiently to be committed"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"text","value":"local repository"}]},{"type":"text","value":"  🗂️\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Contains branches, commits, history, etc."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"crowded-staging-area-index"},"children":[{"type":"text","value":"Crowded Staging Area / Index"}]},{"type":"element","tag":"img","props":{"src":"https://swcarpentry.github.io/git-novice/fig/git-committing.svg"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Staging Area / Index can hold many files and folders."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"quiz-12"},"children":[{"type":"text","value":"Quiz 1/2"}]},{"type":"element","tag":"blockquote","props":{"style":"text-align: left;"},"children":[{"type":"text","value":"\nWhich commit message should I choose?\n"},{"type":"element","tag":"ol","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"“Changes”"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"“Added line ‘This project started as a joke’ to myfile.txt”"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"“Discuss origin of the project”"}]}]},{"type":"text","value":"\n\n"}]},{"type":"element","tag":"blockquote","props":{"className":["fragment"],"style":"text-align: right;"},"children":[{"type":"text","value":"\nMake it short, descriptive, and imperative "},{"type":"element","tag":"span","props":{"style":"font-style: normal;"},"children":[{"type":"text","value":"🐺"}]}]},{"type":"element","tag":"blockquote","props":{"className":["fragment"],"style":"text-align: right;"},"children":[{"type":"text","value":"\nSo yeah, the last one is good! "},{"type":"element","tag":"span","props":{"style":"font-style: normal;"},"children":[{"type":"text","value":"🐺"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"quiz-22"},"children":[{"type":"text","value":"Quiz 2/2"}]},{"type":"element","tag":"blockquote","props":{"style":"text-align: left;"},"children":[{"type":"text","value":"\nWhich command saves "},{"type":"element","tag":"b","props":{},"children":[{"type":"text","value":"myfile.txt"}]},{"type":"text","value":" to my Git repo?"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"pre","props":{"style":"width: 100%; font-style: normal;","dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"dataTrim":"","className":["bash"]},"children":[{"type":"text","value":"\n    $ git commit -m \"my recent changes\"\n    "}]}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"pre","props":{"style":"width: 100%; font-style: normal;","dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"dataTrim":"","className":["bash"]},"children":[{"type":"text","value":"\n    $ git init myfile.txt\n    $ git commit -m \"my recent changes\"\n    "}]}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"pre","props":{"style":"width: 100%; font-style: normal;","dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"dataTrim":"","className":["bash"]},"children":[{"type":"text","value":"\n    $ git add myfile.txt\n    $ git commit -m \"my recent changes\"\n    "}]}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"pre","props":{"style":"width: 100%; font-style: normal;","dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"dataTrim":"","className":["bash"]},"children":[{"type":"text","value":"\n    $ git commit -m myfile.txt \"my recent changes\"\n    "}]}]},{"type":"text","value":"\n  "}]}]},{"type":"text","value":"\n\n"}]},{"type":"element","tag":"blockquote","props":{"className":["fragment"],"style":"text-align: right;"},"children":[{"type":"text","value":"\n3. adds your file to the index, and then commits it. That's the one.\n"},{"type":"element","tag":"span","props":{"style":"font-style: normal;"},"children":[{"type":"text","value":"🐺"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"tracking-changes-key-points"},"children":[{"type":"text","value":"Tracking Changes: Key Points"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Files can be stored in\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"working directory"}]},{"type":"text","value":": the files you can see"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"staging area / index"}]},{"type":"text","value":": files about to be committed"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"local repository"}]},{"type":"text","value":": the permanent record"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"git status"}]},{"type":"text","value":"  shows the status of a repository"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"git add"}]},{"type":"text","value":"  puts files in the staging area"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"git commit"}]},{"type":"text","value":"  saves the staged content as a new commit in the local repository"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Write short, descriptive, and imperative commit messages"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"exploring-history"},"children":[{"type":"text","value":"Exploring history"}]},{"type":"element","tag":"img","props":{"src":"https://esciencecenter-digital-skills.github.io/git-lesson/fig/git-restore.svg"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"git restore"}]},{"type":"text","value":" with the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"-s"}]},{"type":"text","value":" option to retrieve a specific state."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:\nIn this example we restore to the state before the most recent commit,\nwhich is "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"HEAD~1"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"f22b25e"}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"documents-are","depth":2,"text":"Documents are..."},{"id":"collaboration","depth":2,"text":"Collaboration"},{"id":"version-control-key-points","depth":2,"text":"Version Control: Key Points"},{"id":"the-holy-realms-of-git","depth":2,"text":"The Holy Realms of Git"}]}},"_type":"markdown","_id":"local_fs:modules:git-lesson:git-slides.md","_source":"local_fs","_file":"modules/git-lesson/git-slides.md","_extension":"md","plainText":"---\ntitle: Git and GitHub\ntype: slides\norder: 1\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Automated Version Control\n\nWhat is version control and why should I use it?\n\nNote:\n- Git all set up?\n- SSH working?\n- Otherwise: breakout room\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n<img style=\"height: 70vh;\" src=\"https://swcarpentry.github.io/git-novice/fig/phd101212s.png\"/>\n\n<span style=\"font-size: small;\">“Piled Higher and Deeper” by Jorge Cham, http://www.phdcomics.com </span>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Documents are...\n<div class=\"fragment\">\n  a series of changes\n  <img style=\"height: 30vh; margin: 0; padding: 0;\" src=\"https://swcarpentry.github.io/git-novice/fig/play-changes.svg\"/>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Collaboration\n<div style=\"float: left; width: 49%;\">\n  independent changes\n  <img style=\"height: 350px;\" src=\"./media/versions.svg\"/>\n</div>\n<div class=\"fragment\" style=\"float: right; width: 49%;\">\n  can be merged\n  <img style=\"height: 350px;\" src=\"./media/merge.svg\"/>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Version Control: Key Points\n\n- Version control is track changes on steroids.\n- Version control is like an unlimited **undo**.\n- Version control also allows many people to work in parallel.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## The Holy Realms of Git\n\n<img src=\"https://swcarpentry.github.io/git-novice/fig/git-staging-area.svg\">\n\n<ul>\n  <li><b>workspace</b>&nbsp;&nbsp;📂</li>\n  <ul>\n    <li>Your filesystem</li>\n  </ul>\n  <li class=\"fragment\"><b>index</b>&nbsp;&nbsp;🕒\n    <ul>\n      <li>Staging area</li>\n      <li>Files wait patiently to be committed</li>\n    </ul>\n  </li>\n  <li class=\"fragment\"><b>local repository</b>&nbsp;&nbsp;🗂️\n    <ul>\n      <li>Contains branches, commits, history, etc.</li>\n    </ul>\n  </li>\n<ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Crowded Staging Area / Index\n\n<img src=\"https://swcarpentry.github.io/git-novice/fig/git-committing.svg\">\n\nThe Staging Area / Index can hold many files and folders.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Quiz 1/2\n\n<blockquote style=\"text-align: left;\">\nWhich commit message should I choose?\n<ol>\n  <li>“Changes”</li>\n  <li>“Added line ‘This project started as a joke’ to myfile.txt”</li>\n  <li>“Discuss origin of the project”</li>\n</ol>\n</code></pre>\n</blockquote>\n<blockquote class=\"fragment\" style=\"text-align: right;\">\nMake it short, descriptive, and imperative <span style=\"font-style: normal;\">🐺</span>\n</blockquote>\n<blockquote class=\"fragment\" style=\"text-align: right;\">\nSo yeah, the last one is good! <span style=\"font-style: normal;\">🐺</span>\n</blockquote>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Quiz 2/2\n\n<blockquote style=\"text-align: left;\">\nWhich command saves <b>myfile.txt</b> to my Git repo?<br>\n<ol>\n  <li>\n    <pre style=\"width: 100%; font-style: normal;\" data-id=\"code-animation\"><code data-trim class=\"bash\">\n    $ git commit -m \"my recent changes\"\n    </code></pre>\n  </li>\n  <li>\n    <pre style=\"width: 100%; font-style: normal;\" data-id=\"code-animation\"><code data-trim class=\"bash\">\n    $ git init myfile.txt\n    $ git commit -m \"my recent changes\"\n    </code></pre>\n  </li>\n  <li>\n    <pre style=\"width: 100%; font-style: normal;\" data-id=\"code-animation\"><code data-trim class=\"bash\">\n    $ git add myfile.txt\n    $ git commit -m \"my recent changes\"\n    </code></pre>\n  </li>\n  <li>\n    <pre style=\"width: 100%; font-style: normal;\" data-id=\"code-animation\"><code data-trim class=\"bash\">\n    $ git commit -m myfile.txt \"my recent changes\"\n    </code></pre>\n  </li>\n</ol>\n</code></pre>\n</blockquote>\n<blockquote class=\"fragment\" style=\"text-align: right;\">\n3. adds your file to the index, and then commits it. That's the one.\n<span style=\"font-style: normal;\">🐺</span>\n</blockquote>\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Tracking Changes: Key Points\n\n- Files can be stored in\n  - **working directory**: the files you can see\n  - **staging area / index**: files about to be committed\n  - **local repository**: the permanent record\n- **git status**&nbsp; shows the status of a repository\n- **git add**&nbsp; puts files in the staging area\n- **git commit**&nbsp; saves the staged content as a new commit in the local repository\n- Write short, descriptive, and imperative commit messages\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Exploring history\n<img src=\"https://esciencecenter-digital-skills.github.io/git-lesson/fig/git-restore.svg\">\n\nUse `git restore` with the `-s` option to retrieve a specific state. \n\nNote:\nIn this example we restore to the state before the most recent commit, \nwhich is `HEAD~1` or `f22b25e`\n"},{"_path":"/modules/git-lesson","_dir":"modules","_draft":false,"_partial":false,"_locale":"","title":"Version control with Git and GitHub","description":"Photo by Wesley Tingey on Unsplash","id":0,"category":"Good Practices","author":"eScience Center","thumbnail":"version-control-thumbnail.jpg","visibility":"visible","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Photo by "},{"type":"element","tag":"a","props":{"href":"https://unsplash.com/@wesleyphotography?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash"},"children":[{"type":"text","value":"Wesley Tingey"}]},{"type":"text","value":" on "},{"type":"element","tag":"a","props":{"href":"https://unsplash.com/photos/stack-of-books-on-table-snNHKZ-mGfE?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash"},"children":[{"type":"text","value":"Unsplash"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"local_fs:modules:git-lesson:index.md","_source":"local_fs","_file":"modules/git-lesson/index.md","_extension":"md","plainText":"---\nid: 0\ncategory: Good Practices\ntitle: Version control with Git and GitHub\nauthor: eScience Center\nthumbnail: \"version-control-thumbnail.jpg\"\nvisibility: visible\n---\n\nPhoto by <a href=\"https://unsplash.com/@wesleyphotography?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Wesley Tingey</a> on <a href=\"https://unsplash.com/photos/stack-of-books-on-table-snNHKZ-mGfE?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash</a>\n  "},{"_path":"/modules/git-lesson/info","_dir":"git-lesson","_draft":false,"_partial":false,"_locale":"","title":"Info","description":"","type":"info","order":0,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"collaborative-version-control-with-git-and-github"},"children":[{"type":"text","value":"Collaborative version control with Git and GitHub"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This workshop introduces version control with Git and teaches you how to collaborate using Git and GitHub."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Knowing how to use Git and GitHub will allow you to keep track of changes in your software project, publish your code online, collaborate with several people in the same project, and contribute to projects as an external collaborator."}]},{"type":"element","tag":"h2","props":{"id":"the-content"},"children":[{"type":"text","value":"The content"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This website hosts only the slides for the workshop. For the lesson content and exercises, see this "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/git-lesson/","rel":["nofollow"]},"children":[{"type":"text","value":"workbench lesson"}]},{"type":"text","value":" or associated "},{"type":"element","tag":"a","props":{"href":"https://github.com/esciencecenter-digital-skills/git-lesson","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub repository"}]},{"type":"text","value":"."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"collaborative-version-control-with-git-and-github","depth":2,"text":"Collaborative version control with Git and GitHub"},{"id":"the-content","depth":2,"text":"The content"}]}},"_type":"markdown","_id":"local_fs:modules:git-lesson:info.md","_source":"local_fs","_file":"modules/git-lesson/info.md","_extension":"md","plainText":"---\ntitle: Info\ntype: info\norder: 0\n---\n\n## Collaborative version control with Git and GitHub\nThis workshop introduces version control with Git and teaches you how to collaborate using Git and GitHub.\n\nKnowing how to use Git and GitHub will allow you to keep track of changes in your software project, publish your code online, collaborate with several people in the same project, and contribute to projects as an external collaborator.\n\n## The content\nThis website hosts only the slides for the workshop. For the lesson content and exercises, see this [workbench lesson](https://esciencecenter-digital-skills.github.io/git-lesson/) or associated [GitHub repository](https://github.com/esciencecenter-digital-skills/git-lesson)."},{"_path":"/modules/good-practices-lesson/ci-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"CI","description":"Day 3 Code Refinery","type":"slides","order":5,"author":"Ole Mussman","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"continuous-integration"},"children":[{"type":"text","value":"Continuous Integration"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"\n\n/* Blockquote main style */\n.blockquote {\n    position: relative;\n    font-weight: 800;\n    padding: 30px 0;\n    width: 100%;\n    max-width: 500px;\n    z-index: 1;\n    margin: 80px auto;\n    align-self: center;\n    border-top: solid 1px;\n    border-bottom: solid 1px;\n}\n\n/* Blockquote header */\n.blockquote h1 {\n    position: relative;\n    font-size: small;\n    font-weight: 800;\n    line-height: 1;\n    margin: 0;\n}\n\n/* Blockquote right double quotes */\n.blockquote:after {\n    position: absolute;\n    content: \"”\";\n    font-size: 10rem;\n    line-height: 0;\n    bottom: -43px;\n    right: 30px;\n}\n\n/* increase header size after 600px */\n@media all and (min-width: 600px) {\n    .blockquote h1 {\n        font-size: 60px;\n   }\n\n}\n\n/* Blockquote subheader */\n.blockquote h4 {\n    position: relative;\n    font-size: 1 rem;\n    font-weight: normal;\n    line-height: 1;\n    margin: 0;\n    padding-top: 20px;\n    z-index: 1;\n}\n\n"}]},{"type":"element","tag":"h1","props":{"id":"continuous-integration-ci"},"children":[{"type":"text","value":"Continuous Integration (CI)"}]},{"type":"element","tag":"div","props":{"className":["blockquote-wrapper","fragment"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["blockquote"]},"children":[{"type":"text","value":"\n     maintain the main version of a project via frequent or automated integration of changes.\n    "},{"type":"element","tag":"h4","props":{"id":""},"children":[{"type":"text","value":"—"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"motivation"},"children":[{"type":"text","value":"Motivation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"How can we implement "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"automatic testing"}]},{"type":"text","value":" each time we push changes to the repository?"}]},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/ci/automate.jpg","style":{"aspectRatio":"411/318"}},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"ci-includes-automatic-testing"},"children":[{"type":"text","value":"CI includes automatic testing!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Allows to identify any conflicts and bugs that are introduced by changes, so they are found and fixed early, minimising the effort required to do so."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-else"},"children":[{"type":"text","value":"What else?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Building & compiling\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code, Documentation, ..."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Deploying (PyPi, Kubernetes, GitHub Pages)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Just like these slides"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code analysis\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"linting (style conventions), formatting, quality metrics, ..."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Security analyses"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Send messages\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Slack, Discord, Matrix, Mastodon, email, ..."}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"ci-service-providers"},"children":[{"type":"text","value":"CI service providers"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"GitHub Actions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"GitLab CI"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Azure Pipelines"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Jenkins"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"etc"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Best practices are a time-investment "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"with returns"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"CI saves time and keeps your project clean"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What improvements could your project benefit from?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What's nice to know, but overkill for your current work?"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"hands-on"},"children":[{"type":"text","value":"Hands-On"}]},{"type":"element","tag":"div","props":{"style":"float: left; width: 60%; margin-bottom: 1em;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"ol","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Ensure your repository has tests"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Set up Continuous Integration (automatic testing)"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Verify that tests ran"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Add a test that fails"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Open an issue"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person B: "}]},{"type":"text","value":"Fork ⚠️ and clone person A's repo"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person B: "}]},{"type":"text","value":"Fix the broken test"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person B: "}]},{"type":"text","value":"Open a pull request linked to the issue"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person B: "}]},{"type":"text","value":"Verify that tests now run"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Accept Person B's pull request"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"img","props":{"style":"float: right; width: 39%; aspect-ratio: 674/754;","src":"/modules/good-practices-lesson/media/ci/full-cycle-ci.png"},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"ci-includes-automatic-testing","depth":2,"text":"CI includes automatic testing!"},{"id":"what-else","depth":2,"text":"What else?"},{"id":"ci-service-providers","depth":2,"text":"CI service providers"},{"id":"take-away","depth":2,"text":"Take-away"},{"id":"hands-on","depth":2,"text":"Hands-On"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:ci-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/ci-slides.md","_extension":"md","plainText":"---\ntitle: CI\ntype: slides\norder: 5\nauthor: Ole Mussman\ndescription: Day 3 Code Refinery\n---\n\n\n<!-- .slide: data-state=\"title\" -->\n\n# Continuous Integration\n\n===\n\n\n<!-- .slide: data-state=\"standard\" -->\n\n<style>\n\n/* Blockquote main style */\n.blockquote {\n    position: relative;\n    font-weight: 800;\n    padding: 30px 0;\n    width: 100%;\n    max-width: 500px;\n    z-index: 1;\n    margin: 80px auto;\n    align-self: center;\n    border-top: solid 1px;\n    border-bottom: solid 1px;\n}\n\n/* Blockquote header */\n.blockquote h1 {\n    position: relative;\n    font-size: small;\n    font-weight: 800;\n    line-height: 1;\n    margin: 0;\n}\n\n/* Blockquote right double quotes */\n.blockquote:after {\n    position: absolute;\n    content: \"”\";\n    font-size: 10rem;\n    line-height: 0;\n    bottom: -43px;\n    right: 30px;\n}\n\n/* increase header size after 600px */\n@media all and (min-width: 600px) {\n    .blockquote h1 {\n        font-size: 60px;\n   }\n\n}\n\n/* Blockquote subheader */\n.blockquote h4 {\n    position: relative;\n    font-size: 1 rem;\n    font-weight: normal;\n    line-height: 1;\n    margin: 0;\n    padding-top: 20px;\n    z-index: 1;\n}\n\n</style>\n\n# Continuous Integration (CI)\n\n<div class=\"blockquote-wrapper fragment\">\n  <div class=\"blockquote\">\n     maintain the main version of a project via frequent or automated integration of changes.\n    <h4>&mdash;</h4>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n\n# Motivation\nHow can we implement __automatic testing__ each time we push changes to the repository? \n\n<img src=\"./media/ci/automate.jpg\">\n\n\n===\n\n<!-- .slide: data-state=\"blue_overlay yellow_flag logo 9\" data-background=\"./media/ci/reload-97640.svg\" data-background-size=\"50%\" -->\n\n## CI includes automatic testing!\n\nAllows to identify any conflicts and bugs that are introduced by changes, so they are found and fixed early, minimising the effort required to do so. \n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What else?\n- Building & compiling\n  - Code, Documentation, ...\n- Deploying (PyPi, Kubernetes, GitHub Pages)\n  - Just like these slides\n- Code analysis\n    - linting (style conventions), formatting, quality metrics, ...\n- Security analyses\n- Send messages\n  - Slack, Discord, Matrix, Mastodon, email, ...\n\n\n===\n\n\n<!-- .slide: data-state=\"standard\" -->\n\n## CI service providers\n\n- GitHub Actions\n- GitLab CI\n- Azure Pipelines\n- Jenkins\n- etc\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Best practices are a time-investment _with returns_\n- CI saves time and keeps your project clean\n- What improvements could your project benefit from?\n- What's nice to know, but overkill for your current work?\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Hands-On\n\n<div style=\"float: left; width: 60%; margin-bottom: 1em;\">\n  <ol>\n    <li><strong>Person A: </strong>Ensure your repository has tests</li>\n    <li><strong>Person A: </strong>Set up Continuous Integration (automatic testing)</li>\n    <li><strong>Person A: </strong>Verify that tests ran</li>\n    <li><strong>Person A: </strong>Add a test that fails</li>\n    <li><strong>Person A: </strong>Open an issue</li>\n    <li><strong>Person B: </strong>Fork ⚠️ and clone person A's repo</li>\n    <li><strong>Person B: </strong>Fix the broken test</li>\n    <li><strong>Person B: </strong>Open a pull request linked to the issue</li>\n    <li><strong>Person B: </strong>Verify that tests now run</li>\n    <li><strong>Person A: </strong>Accept Person B's pull request</li>\n  </ol>\n</div>\n<img style=\"float: right; width: 39%;\" src=\"./media/ci/full-cycle-ci.png\">\n\n\n"},{"_path":"/modules/good-practices-lesson/documentation-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Documentation","description":"Day 3 Code Refinery","type":"slides","order":3,"author":"Luisa Orozco, Barbara Vreede","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"documentation"},"children":[{"type":"text","value":"Documentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"img","props":{"style":"height: 550px; aspect-ratio: 432/574;","src":"/modules/good-practices-lesson/media/documentation/paint.png"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"examples-of-documentation"},"children":[{"type":"text","value":"Examples of documentation"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Think of projects with good documentation.\n"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"What do you like about them?"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Think of projects with less good documentation.\n"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"What don't you like about them? Are you missing anything?"}]}]}]},{"type":"element","tag":"quotation","props":{},"children":[{"type":"text","value":"\nNB: You can choose a mature library with lots of users, but try to also think of less mature projects you had to collaborate on, or papers you had to reproduce.\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"types-of-documentation"},"children":[{"type":"text","value":"Types of documentation"}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"README files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"In-code documentation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"API documentation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Tutorials"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"..."}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-readme-file"},"children":[{"type":"text","value":"A good README file"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"README file is first thing a user/collaborator sees"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What should be included in README files?"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A descriptive project title"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Motivation (why the project exists) and basics"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Installation / How to setup"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Copy-pasteable quick start code example"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Usage reference (if not elsewhere)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Recommended citation if someone uses it"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Other related tools (\"see also\")"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Contact information for the developer(s)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"License information"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Contributing guidelines"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-in-code-documentation"},"children":[{"type":"text","value":"Why write in-code documentation?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In-code documentation:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Makes code more understandable"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Explains decisions we made"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"when-not-to-use-in-code-documentation"},"children":[{"type":"text","value":"When "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" to use in-code documentation?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When the code is self-explanatory"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"To replace good variable/function names"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"To replace version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"To keep old (zombie) code around"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"readable-code-vs-commented-code"},"children":[{"type":"text","value":"Readable code vs commented code"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"# convert from degrees celsius to fahrenheit\ndef convert(d):\n    return d * 5 / 9 + 32\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# convert from degrees celsius to fahrenheit\ndef convert(d):\n    return d * 5 / 9 + 32\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"vs"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def celsius_to_fahrenheit(degrees):\n    return degrees * 5 / 9 + 32\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def celsius_to_fahrenheit(degrees):\n    return degrees * 5 / 9 + 32\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-makes-a-good-comment"},"children":[{"type":"text","value":"What makes a good comment?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Comment A"}]}]},{"type":"element","tag":"pre","props":{"dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["python"]},"children":[{"type":"text","value":"\n# Now we check if temperature is larger than -50:\nif temperature > -50:\n    print('do something')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Comment B"}]}]},{"type":"element","tag":"pre","props":{"dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["python"]},"children":[{"type":"text","value":"\n# We regard temperatures below -50 degrees as measurement errors\nif temperature > -50:\n    print('do something')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"How are these different? Which one do you prefer?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"docstrings-a-special-kind-of-comment"},"children":[{"type":"text","value":"Docstrings: a special kind of comment"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def celsius_to_fahrenheit(degrees):\n  \"\"\"Convert degrees Celsius to degrees Fahrenheit.\"\"\"\n  return degrees * 5 / 9 + 32\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def celsius_to_fahrenheit(degrees):\n  \"\"\"Convert degrees Celsius to degrees Fahrenheit.\"\"\"\n  return degrees * 5 / 9 + 32\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Why is this OK?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:\nDocstrings can be used to generate user documentation.\nThey are accessible outside the code.\nThey follow a standardized syntax."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"in-code-commenting-key-points"},"children":[{"type":"text","value":"In-code commenting: key points"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Explicit, descriptive naming already provides important documentation."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Comments should describe the why for your code, not the what."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Writing docstrings is an easy way to write documentation while you code, as they are accessible outside the code itself."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"userapi-documentation"},"children":[{"type":"text","value":"User/API documentation"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What if a README file is not enough?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How do I easily create user documentation?"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"tools"},"children":[{"type":"text","value":"Tools"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Sphinx"}]},{"type":"text","value":" (documentation generator)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"creates nicely-formatted HTML pages out of .md or .rst files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"programming language independent"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Github pages"}]},{"type":"text","value":" (deploy your documentation)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"set up inside your GitHub repository"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"automatically deploys your Sphinx-generated documentation"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-home-message"},"children":[{"type":"text","value":"Take-home message"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Depending on the purpose and state of the project documentation needs to meet different criteria."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Documentation can take different shapes:\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Readable code"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"In-code comments"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Docstrings"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"README files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Tutorials/notebooks"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Documentation is a vital part of a project, and should be kept and created alongside the corresponding code."}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"examples-of-documentation","depth":2,"text":"Examples of documentation"},{"id":"types-of-documentation","depth":2,"text":"Types of documentation"},{"id":"a-good-readme-file","depth":2,"text":"A good README file"},{"id":"why-write-in-code-documentation","depth":2,"text":"Why write in-code documentation?"},{"id":"when-not-to-use-in-code-documentation","depth":2,"text":"When not to use in-code documentation?"},{"id":"readable-code-vs-commented-code","depth":2,"text":"Readable code vs commented code"},{"id":"what-makes-a-good-comment","depth":2,"text":"What makes a good comment?"},{"id":"docstrings-a-special-kind-of-comment","depth":2,"text":"Docstrings: a special kind of comment"},{"id":"in-code-commenting-key-points","depth":2,"text":"In-code commenting: key points"},{"id":"userapi-documentation","depth":2,"text":"User/API documentation"},{"id":"tools","depth":2,"text":"Tools"},{"id":"take-home-message","depth":2,"text":"Take-home message"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:documentation-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/documentation-slides.md","_extension":"md","plainText":"---\ntitle: Documentation\ntype: slides\norder: 3\nauthor: Luisa Orozco, Barbara Vreede\ndescription: Day 3 Code Refinery\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Documentation\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n<img style=\"height: 550px;\" src=\"./media/documentation/paint.png\"/>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Examples of documentation\n\n+ Think of projects with good documentation.\n      _What do you like about them?_\n+ Think of projects with less good documentation.\n      _What don't you like about them? Are you missing anything?_\n\n<quotation>NB: You can choose a mature library with lots of users, but try to also think of less mature projects you had to collaborate on, or papers you had to reproduce.</quotation>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Types of documentation\n\n<div class=\"fragment\">\n\n+ README files\n+ In-code documentation\n+ API documentation\n+ Tutorials\n+ ...\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good README file\n\n+ README file is first thing a user/collaborator sees\n+ What should be included in README files?\n<ul>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n</ul>\n\n\nNote:\n+ A descriptive project title\n+ Motivation (why the project exists) and basics\n+ Installation / How to setup\n+ Copy-pasteable quick start code example\n+ Usage reference (if not elsewhere)\n+ Recommended citation if someone uses it\n+ Other related tools (\"see also\")\n+ Contact information for the developer(s)\n+ License information\n+ Contributing guidelines\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write in-code documentation?\n\nIn-code documentation:\n\n+ Makes code more understandable\n+ Explains decisions we made\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## When **not** to use in-code documentation?\n\n+ When the code is self-explanatory\n+ To replace good variable/function names\n+ To replace version control\n+ To keep old (zombie) code around\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Readable code vs commented code\n\n```python=\n# convert from degrees celsius to fahrenheit\ndef convert(d):\n    return d * 5 / 9 + 32\n```\nvs\n```python=\ndef celsius_to_fahrenheit(degrees):\n    return degrees * 5 / 9 + 32\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## What makes a good comment?\n\n**Comment A**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# Now we check if temperature is larger than -50:\nif temperature > -50:\n    print('do something')\n</code></pre>\n\n**Comment B**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# We regard temperatures below -50 degrees as measurement errors\nif temperature > -50:\n    print('do something')\n</code></pre>\n\nHow are these different? Which one do you prefer?\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Docstrings: a special kind of comment\n\n```python=\ndef celsius_to_fahrenheit(degrees):\n  \"\"\"Convert degrees Celsius to degrees Fahrenheit.\"\"\"\n  return degrees * 5 / 9 + 32\n```\n\nWhy is this OK?\n\nNote:\nDocstrings can be used to generate user documentation.\nThey are accessible outside the code.\nThey follow a standardized syntax.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## In-code commenting: key points\n\n+ Explicit, descriptive naming already provides important documentation.\n+ Comments should describe the why for your code, not the what.\n+ Writing docstrings is an easy way to write documentation while you code, as they are accessible outside the code itself.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## User/API documentation\n\n+ What if a README file is not enough?\n+ How do I easily create user documentation?\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Tools\n\n+ **Sphinx** (documentation generator)\n  - creates nicely-formatted HTML pages out of .md or .rst files\n  - programming language independent\n+ **Github pages** (deploy your documentation)\n  - set up inside your GitHub repository\n  - automatically deploys your Sphinx-generated documentation\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-home message\n\n+ Depending on the purpose and state of the project documentation needs to meet different criteria.\n+ Documentation can take different shapes:\n  + Readable code\n  + In-code comments\n  + Docstrings\n  + README files\n  + Tutorials/notebooks\n+ Documentation is a vital part of a project, and should be kept and created alongside the corresponding code."},{"_path":"/modules/good-practices-lesson/good-practices-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Good Practices","description":"Getting more professional","type":"slides","order":1,"author":"Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"good-practices-for-research-software-development"},"children":[{"type":"text","value":"Good Practices for Research Software Development"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"\n\n/* Blockquote main style */\n.blockquote {\n    position: relative;\n    font-weight: 800;\n    padding: 30px 0;\n    width: 100%;\n    max-width: 500px;\n    z-index: 1;\n    margin: 80px auto;\n    align-self: center;\n    border-top: solid 1px;\n    border-bottom: solid 1px;\n}\n\n/* Blockquote header */\n.blockquote h1 {\n    position: relative;\n    font-size: small;\n    font-weight: 800;\n    line-height: 1;\n    margin: 0;\n}\n\n/* Blockquote right double quotes */\n.blockquote:after {\n    position: absolute;\n    content: \"”\";\n    font-size: 10rem;\n    line-height: 0;\n    bottom: -43px;\n    right: 30px;\n}\n\n/* increase header size after 600px */\n@media all and (min-width: 600px) {\n    .blockquote h1 {\n        font-size: 60px;\n   }\n\n}\n\n/* Blockquote subheader */\n.blockquote h4 {\n    position: relative;\n    font-size: 1.4rem;\n    font-weight: normal;\n    line-height: 1;\n    margin: 0;\n    padding-top: 20px;\n    z-index: 1;\n}\n\n"}]},{"type":"element","tag":"h2","props":{"id":"programming-vs-software-engineering"},"children":[{"type":"text","value":"Programming vs Software Engineering"}]},{"type":"element","tag":"div","props":{"className":["blockquote-wrapper","fragment"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["blockquote"]},"children":[{"type":"text","value":"\n      Software engineering is programming integrated over time.\n    "},{"type":"element","tag":"h4","props":{"id":"titus-winters-google-c-devlead"},"children":[{"type":"text","value":"—Titus Winters, Google C++ devlead"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:\nWhat's the difference between programming and software engineering?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"img","props":{"width":800,"alt":"development speed","src":"./media/good-practices/development-speed.svg"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"development-speed"},"children":[{"type":"text","value":"Development Speed ⚡"}]},{"type":"element","tag":"div","props":{"style":"float: left;"},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Red curve\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Writing code"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Blue curve\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version Control"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Collaborative development"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code review"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modular code"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Documentation"}]},{"type":"text","value":"\n  "}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"projects-are-different"},"children":[{"type":"text","value":"Projects are Different"}]},{"type":"element","tag":"img","props":{"style":"height: 70vh; aspect-ratio: 1954/1361;","src":"/modules/good-practices-lesson/media/good-practices/branching.png"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-to-use-when"},"children":[{"type":"text","value":"What to Use When?"}]},{"type":"element","tag":"div","props":{"style":"width: 49%; float: left; font-size: smaller;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"⏱️ lifetime"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"use"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"1-shot"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"🚫"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"week+"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"Git & GitHub"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"3 months+"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"Testing"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"6 months+"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"Documentation,"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"automate testing"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"div","props":{"style":"width: 49%; float: right; font-size: smaller;","className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"🧑🧑 users"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"use"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"6"},"children":[{"type":"text","value":"Push to main"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"2+"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"7"},"children":[{"type":"text","value":"Branches, merging"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"2+ (+students)"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"8"},"children":[{"type":"text","value":"Code review"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"2+ (+external)"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"9"},"children":[{"type":"text","value":"Release branch, "},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"& everything else"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Train these tools"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Experience their effect"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use own judgement, but"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"avoid \"but in my project...\""}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"good-practices-are-investments"},"children":[{"type":"text","value":"Good practices are investments"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Profits come in"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Development efficiency"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reproducibility"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reusability"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Faster debugging"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Robustness, fewer errors"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fewer headaches!"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"programming-vs-software-engineering","depth":2,"text":"Programming vs Software Engineering"},{"id":"development-speed","depth":2,"text":"Development Speed ⚡"},{"id":"projects-are-different","depth":2,"text":"Projects are Different"},{"id":"what-to-use-when","depth":2,"text":"What to Use When?"},{"id":"good-practices-are-investments","depth":2,"text":"Good practices are investments"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:good-practices-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/good-practices-slides.md","_extension":"md","plainText":"---\ntitle: Good Practices\ntype: slides\norder: 1\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Good Practices for Research Software Development\n\nnote: \n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n<style>\n\n/* Blockquote main style */\n.blockquote {\n    position: relative;\n    font-weight: 800;\n    padding: 30px 0;\n    width: 100%;\n    max-width: 500px;\n    z-index: 1;\n    margin: 80px auto;\n    align-self: center;\n    border-top: solid 1px;\n    border-bottom: solid 1px;\n}\n\n/* Blockquote header */\n.blockquote h1 {\n    position: relative;\n    font-size: small;\n    font-weight: 800;\n    line-height: 1;\n    margin: 0;\n}\n\n/* Blockquote right double quotes */\n.blockquote:after {\n    position: absolute;\n    content: \"”\";\n    font-size: 10rem;\n    line-height: 0;\n    bottom: -43px;\n    right: 30px;\n}\n\n/* increase header size after 600px */\n@media all and (min-width: 600px) {\n    .blockquote h1 {\n        font-size: 60px;\n   }\n\n}\n\n/* Blockquote subheader */\n.blockquote h4 {\n    position: relative;\n    font-size: 1.4rem;\n    font-weight: normal;\n    line-height: 1;\n    margin: 0;\n    padding-top: 20px;\n    z-index: 1;\n}\n\n</style>\n\n\n## Programming vs Software Engineering\n\n<div class=\"blockquote-wrapper fragment\">\n  <div class=\"blockquote\">\n      Software engineering is programming integrated over time.\n    <h4>&mdash;Titus Winters, Google C++ devlead</h4>\n  </div>\n</div>\n\nNote:\nWhat's the difference between programming and software engineering?\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n<img width=\"800\" alt=\"development speed\" src=\"./media/good-practices/development-speed.svg\">\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Development Speed ⚡\n\n<div style=\"float: left;\">\n<ul>\n  <li>Red curve\n  <ul>\n    <li>Writing code</li>\n  </ul>\n  <li>Blue curve\n  <ul>\n    <li>Version Control</li>\n    <li>Collaborative development</li>\n    <li>Code review</li>\n    <li>Testing</li>\n    <li>Modular code</li>\n    <li>Documentation</li>\n  </ul>\n</ul>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Projects are Different\n\n<img style=\"height: 70vh;\" src=\"./media/good-practices/branching.png\"/>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What to Use When?\n\n<div style=\"width: 49%; float: left; font-size: smaller;\">\n  <table>\n    <tr>\n      <th>⏱️&nbsp;lifetime</th>\n      <th>use</th>\n    </tr>\n    <tr>\n      <td>1-shot</td>\n      <td class=\"fragment\" data-fragment-index=\"1\">🚫</td>\n    </tr>\n    <tr>\n      <td>week+</td>\n      <td class=\"fragment\" data-fragment-index=\"2\">Git &amp; GitHub</td>\n    </tr>\n    <tr>\n      <td>3 months+</td>\n      <td class=\"fragment\" data-fragment-index=\"3\">Testing</td>\n    </tr>\n    <tr>\n      <td>6 months+</td>\n      <td class=\"fragment\" data-fragment-index=\"4\">Documentation,<br>automate testing</td>\n    </tr>\n  </table>\n</div>\n\n<div style=\"width: 49%; float: right; font-size: smaller;\" class=\"fragment\" data-fragment-index=\"5\">\n  <table>\n    <tr>\n      <th>🧑🧑&nbsp;users</th>\n      <th>use</th>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td class=\"fragment\" data-fragment-index=\"6\">Push to main</td>\n    </tr>\n    <tr>\n      <td>2+</td>\n      <td class=\"fragment\" data-fragment-index=\"7\">Branches, merging</td>\n    </tr>\n    <tr>\n      <td>2+ (+students)</td>\n      <td class=\"fragment\" data-fragment-index=\"8\">Code review</td>\n    </tr>\n    <tr>\n      <td>2+ (+external)</td>\n      <td class=\"fragment\" data-fragment-index=\"9\">Release branch, <br>&amp; everything else</td>\n    </tr>\n  </table>\n</div>\n\nNote:\n- Train these tools\n- Experience their effect\n- Use own judgement, but\n- avoid \"but in my project...\"\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Good practices are investments\n\nProfits come in\n\n- Development efficiency\n- Reproducibility\n- Reusability\n- Faster debugging\n- Robustness, fewer errors\n- Fewer headaches!"},{"_path":"/modules/good-practices-lesson","_dir":"modules","_draft":false,"_partial":false,"_locale":"","title":"Good Practices in Research Software Engineering","description":"Photo by OCG Saving The Ocean on Unsplash","id":2,"category":"Good Practices","author":"eScience Center","thumbnail":"good-practices-thumbnail.png","visibility":"visible","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Photo by "},{"type":"element","tag":"a","props":{"href":"https://unsplash.com/@oceancleanupgroup?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash"},"children":[{"type":"text","value":"OCG Saving The Ocean"}]},{"type":"text","value":" on "},{"type":"element","tag":"a","props":{"href":"https://unsplash.com/photos/man-in-blue-t-shirt-and-blue-shorts-playing-soccer-on-beach-during-daytime-psRG_u3DLps?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash"},"children":[{"type":"text","value":"Unsplash"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:index.md","_source":"local_fs","_file":"modules/good-practices-lesson/index.md","_extension":"md","plainText":"---\nid: 2\ncategory: Good Practices\ntitle: Good Practices in Research Software Engineering\nauthor: eScience Center\nthumbnail: \"good-practices-thumbnail.png\"\nvisibility: visible\n---\n\nPhoto by <a href=\"https://unsplash.com/@oceancleanupgroup?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">OCG Saving The Ocean</a> on <a href=\"https://unsplash.com/photos/man-in-blue-t-shirt-and-blue-shorts-playing-soccer-on-beach-during-daytime-psRG_u3DLps?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash</a>\n  \n"},{"_path":"/modules/good-practices-lesson/info","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Info","description":"","type":"info","order":0,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"good-practices-in-research-software-development"},"children":[{"type":"text","value":"Good Practices in Research Software development"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The key objective of this workshop is to grow researchers' software skills necessary to apply good practices that enable open and reproducible research.\nThe workshop focuses on building modular, reusable, maintainable, sustainable, reproducible, testable, and robust software.\nThis will allow you to more easily organize, maintain and share your data.\nThe participants should be familiar with programming and regularly write code for their research, but no extensive expertise or knowledge of specific tools are required.\nThe main themes that are addressed are generically applicable, but please note that a lot of the exercises and demonstrations are in Python."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This workshop is inspired by and based on "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.org/lessons/","rel":["nofollow"]},"children":[{"type":"text","value":"CodeRefinery"}]},{"type":"text","value":" training materials."}]},{"type":"element","tag":"h2","props":{"id":"the-content"},"children":[{"type":"text","value":"The content"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This website hosts only the slides for the workshop. For the lesson content and exercises, see this "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/good-practices-lesson/","rel":["nofollow"]},"children":[{"type":"text","value":"workbench lesson"}]},{"type":"text","value":" or associated "},{"type":"element","tag":"a","props":{"href":"https://github.com/esciencecenter-digital-skills/good-practices-lesson","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub repository"}]},{"type":"text","value":"."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"good-practices-in-research-software-development","depth":2,"text":"Good Practices in Research Software development"},{"id":"the-content","depth":2,"text":"The content"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:info.md","_source":"local_fs","_file":"modules/good-practices-lesson/info.md","_extension":"md","plainText":"---\ntitle: Info\ntype: info\norder: 0\n---\n\n## Good Practices in Research Software development\nThe key objective of this workshop is to grow researchers' software skills necessary to apply good practices that enable open and reproducible research. \nThe workshop focuses on building modular, reusable, maintainable, sustainable, reproducible, testable, and robust software. \nThis will allow you to more easily organize, maintain and share your data. \nThe participants should be familiar with programming and regularly write code for their research, but no extensive expertise or knowledge of specific tools are required. \nThe main themes that are addressed are generically applicable, but please note that a lot of the exercises and demonstrations are in Python.\n\nThis workshop is inspired by and based on [CodeRefinery](https://coderefinery.org/lessons/) training materials.\n\n## The content\nThis website hosts only the slides for the workshop. For the lesson content and exercises, see this [workbench lesson](https://esciencecenter-digital-skills.github.io/good-practices-lesson/) or associated [GitHub repository](https://github.com/esciencecenter-digital-skills/good-practices-lesson)."},{"_path":"/modules/good-practices-lesson/modular-code-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Modular Code","description":"Modular coding","type":"slides","order":2,"author":"Barbara Vreede, Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"developing-modular-code"},"children":[{"type":"text","value":"Developing Modular Code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-is-modularity"},"children":[{"type":"text","value":"What is modularity?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Simple components combined to produce complex behavior."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Software can be 'built up' from smaller elements."}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Elements are self-contained and independent."}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Each element handles a specific (set of) task(s)."}]}]},{"type":"element","tag":"figure","props":{"style":"text-align: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"height":300,"alt":"modularity","src":"./media/modular-code/modern_times.jpg","style":"margin-bottom: -10px;"},"children":[]},{"type":"text","value":"\n        "},{"type":"element","tag":"figcaption","props":{"style":"font-size: 0.3em; color: #666;"},"children":[{"type":"text","value":"Charlie Chaplin in "},{"type":"element","tag":"i","props":{},"children":[{"type":"text","value":"Modern Times"}]},{"type":"text","value":" (1936)."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"© Roy Export Company Establishment; photograph, the Museum of Modern Art/Film Stills Archive, New York City"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"modular-code"},"children":[{"type":"text","value":"Modular code"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"width":400,"alt":"cohesive","src":"./media/modular-code/small_cohesive_units.png","style":"margin-right: 20px;"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"width":400,"alt":"bohemoth","src":"./media/modular-code/customized_bohemoth.png","className":["fragment"],"dataFragmentIndex":"1"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-are-these-blockselements"},"children":[{"type":"text","value":"What are these blocks/elements?"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px; max-width: 100%;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/building_blocks.png","alt":"building blocks","style":"max-width: 40%; height: auto; margin-right: 20px; aspect-ratio: 927/736;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"functions"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"classes"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"modules"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"libraries/packages"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"programs"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To increase robustness"}]},{"type":"element","tag":"img","props":{"width":200,"alt":"testing a single module","src":"./media/modular-code/testing_module.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A well-designed module can be tested."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This helps keep the codebase well-functioning and bug-free."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-1"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To make maintenance easier:"}]},{"type":"element","tag":"img","props":{"width":300,"alt":"testing a module taken from a larger project","src":"./media/modular-code/testing_module_maintenance.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modular code is more readable and understandable."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules can be debugged separately."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules only need to be improved/optimized once."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-2"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To allow reusability:"}]},{"type":"element","tag":"img","props":{"width":400,"alt":"reuse a module in another project","src":"./media/modular-code/reuse_module.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A module can live independent of its original context."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"It can be reused by another project."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-3"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To facilitate scalability:"}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"alt":"scalability","src":"/modules/good-practices-lesson/media/modular-code/scalability.png","style":"max-width: 40%; height: auto; margin-right: 20px; aspect-ratio: 892/1244;"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Complexity remains low by design."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This creates space for scaling up."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-4"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create opportunities for innovation:"}]},{"type":"element","tag":"img","props":{"alt":"tetris shows innovation","src":"/modules/good-practices-lesson/media/modular-code/tetris_innovation.png","style":"max-width: 50%; height: auto; aspect-ratio: 1824/1356;"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules increase the capabilities and power of a project."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rearrange old modules for new applications."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-5"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To save time:"}]},{"type":"element","tag":"img","props":{"width":600,"alt":"development speed","src":"./media/modular-code/development-speed.svg"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/units.png","alt":"units","width":300,"style":"margin-right: 20px; aspect-ratio: 1157/1195;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"has a good name"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"naming-your-module"},"children":[{"type":"text","value":"Naming your module"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"be descriptive and clear"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"focus on human intelligibility"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"follow language specific conventions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"avoid abbreviations"}]}]},{"type":"element","tag":"div","props":{"style":"text-align: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"alt":"naming","src":"/modules/good-practices-lesson/media/modular-code/naming_stuff.jpg","style":"max-width: 100%; height: auto; max-height: 300px; aspect-ratio: 650/615;"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module-1"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/units.png","alt":"units","width":300,"style":"margin-right: 20px; aspect-ratio: 1157/1195;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"is readable"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"more-readable-shorter-code"},"children":[{"type":"text","value":"More readable != shorter code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Shorter:"}]},{"type":"element","tag":"pre","props":{"code":"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"More modular:"}]},{"type":"element","tag":"pre","props":{"code":"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module-2"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/units.png","alt":"units","width":300,"style":"margin-right: 20px; aspect-ratio: 1157/1195;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is readable"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"is pure and predictable"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"an-impure-function"},"children":[{"type":"text","value":"An impure function..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... does not always give the same result:"}]},{"type":"element","tag":"pre","props":{"code":"def fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Q: What will happen when we call the function a second time?"}]}]},{"type":"element","tag":"pre","props":{"code":">>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":">>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-pure-function"},"children":[{"type":"text","value":"A pure function..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... always gives the same result:"}]},{"type":"element","tag":"pre","props":{"code":"def fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module-3"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/units.png","alt":"units","width":300,"style":"margin-right: 20px; aspect-ratio: 1157/1195;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is readable"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is pure and predictable"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/testing_module.png","alt":"testing a single module","width":300,"style":"margin-right: 20px; aspect-ratio: 492/498;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"poor readability"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"readable-code"},"children":[{"type":"text","value":"Readable code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Modular code becomes more readable"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code is read more than it is written"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Does a reader understand what the code does?"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Bad readability can be a \"code smell\""}]}]},{"type":"element","tag":"figure","props":{"style":"text-align: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"width":400,"alt":"smelly","src":"./media/modular-code/Smelly-Code-Featured.avif","style":"margin-bottom: -10px;"},"children":[]},{"type":"text","value":"\n        "},{"type":"element","tag":"figcaption","props":{"style":"font-size: 0.3em; color: #666;"},"children":[{"type":"text","value":"SIphotography/Depositphotos"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization-1"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/testing_module.png","alt":"testing a single module","width":300,"style":"margin-right: 20px; aspect-ratio: 492/498;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"poor readability"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"repetition"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"repetitive-code"},"children":[{"type":"text","value":"Repetitive code"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Don't Repeat Yourself (DRY): place reused code into a function"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify functions units by their "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"action"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"(e.g. \"plot\", \"transform\", \"extract\", \"save\")"}]}]}]}]},{"type":"element","tag":"div","props":{"style":"text-align: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"alt":"DRY","src":"/modules/good-practices-lesson/media/modular-code/dry-vs-wet-code.jpg","style":"max-width: 100%; height: auto; max-height: 300px; aspect-ratio: 800/686;"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization-2"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/testing_module.png","alt":"testing a single module","width":300,"style":"margin-right: 20px; aspect-ratio: 492/498;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"poor readability"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"repetition"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"nested code"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"target-nested-code"},"children":[{"type":"text","value":"Target nested code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nested code is a prime target for modularization:"}]},{"type":"element","tag":"pre","props":{"code":"def sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"reduce-nestedness"},"children":[{"type":"text","value":"Reduce nestedness..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... by extracting modules:"}]},{"type":"element","tag":"pre","props":{"code":"def _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top < bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top < bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization-3"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/testing_module.png","alt":"testing a single module","width":300,"style":"margin-right: 20px; aspect-ratio: 492/498;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"poor readability"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"repetition"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"nested code"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"let-tests-help-you"},"children":[{"type":"text","value":"Let tests help you"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Write tests for each individual module"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use the test-writing procedure to look critically at the module's function:"}]}]},{"type":"element","tag":"pre","props":{"code":"- Is the input/output clear?\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- Is the input/output clear?\n"}]}]},{"type":"element","tag":"pre","props":{"code":"- What can you not yet test? Extract it into a new module.\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- What can you not yet test? Extract it into a new module.\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-modularity","depth":2,"text":"What is modularity?"},{"id":"modular-code","depth":2,"text":"Modular code"},{"id":"what-are-these-blockselements","depth":2,"text":"What are these blocks/elements?"},{"id":"why-write-modular-code","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-1","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-2","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-3","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-4","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-5","depth":2,"text":"Why write modular code?"},{"id":"a-good-module","depth":2,"text":"A good module..."},{"id":"naming-your-module","depth":2,"text":"Naming your module"},{"id":"a-good-module-1","depth":2,"text":"A good module..."},{"id":"more-readable-shorter-code","depth":2,"text":"More readable != shorter code"},{"id":"a-good-module-2","depth":2,"text":"A good module..."},{"id":"an-impure-function","depth":2,"text":"An impure function..."},{"id":"a-pure-function","depth":2,"text":"A pure function..."},{"id":"a-good-module-3","depth":2,"text":"A good module..."},{"id":"identifying-opportunities-for-modularization","depth":2,"text":"Identifying opportunities for modularization"},{"id":"readable-code","depth":2,"text":"Readable code"},{"id":"identifying-opportunities-for-modularization-1","depth":2,"text":"Identifying opportunities for modularization"},{"id":"repetitive-code","depth":2,"text":"Repetitive code"},{"id":"identifying-opportunities-for-modularization-2","depth":2,"text":"Identifying opportunities for modularization"},{"id":"target-nested-code","depth":2,"text":"Target nested code"},{"id":"reduce-nestedness","depth":2,"text":"Reduce nestedness..."},{"id":"identifying-opportunities-for-modularization-3","depth":2,"text":"Identifying opportunities for modularization"},{"id":"let-tests-help-you","depth":2,"text":"Let tests help you"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:modular-code-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/modular-code-slides.md","_extension":"md","plainText":"---\ntitle: Modular Code\ntype: slides\norder: 2\nauthor: Barbara Vreede, Ole Mussmann\ndescription: Modular coding\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Developing Modular Code\n\n<!-- .slide: data-state=\"standard\"  -->\n\n===\n\n## What is modularity?\n\nSimple components combined to produce complex behavior.\n\n- Software can be 'built up' from smaller elements.\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n- Elements are self-contained and independent.\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n- Each element handles a specific (set of) task(s).\n<!-- .element: class=\"fragment\" data-fragment-index=\"5\" -->\n\n<figure style=\"text-align: center; margin-top: 20px;\">\n    <img height=\"300\" alt=\"modularity\" src=\"./media/modular-code/modern_times.jpg\" style=\"margin-bottom: -10px;\">\n        <figcaption style=\"font-size: 0.3em; color: #666;\">Charlie Chaplin in <i>Modern Times</i> (1936).<br>© Roy Export Company Establishment; photograph, the Museum of Modern Art/Film Stills Archive, New York City</figcaption>\n</figure>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Modular code\n\n<div style=\"display: flex; justify-content: center; align-items: center; margin-top: 20px;\">\n  <img width=\"400\" alt=\"cohesive\" src=\"./media/modular-code/small_cohesive_units.png\" style=\"margin-right: 20px;\">\n  <img width=\"400\" alt=\"bohemoth\" src=\"./media/modular-code/customized_bohemoth.png\" class=\"fragment\" data-fragment-index=\"1\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What are these blocks/elements?\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px; max-width: 100%;\">\n    <img src=\"./media/modular-code/building_blocks.png\" alt=\"building blocks\" style=\"max-width: 40%; height: auto; margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"1\">functions</li>\n            <li class=\"fragment\" data-fragment-index=\"2\">classes</li>\n            <li class=\"fragment\" data-fragment-index=\"3\">modules</li>\n            <li class=\"fragment\" data-fragment-index=\"4\">libraries/packages</li>\n            <li class=\"fragment\" data-fragment-index=\"5\">programs</li>\n            <li class=\"fragment\" data-fragment-index=\"5\">...</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo increase robustness\n\n<img width=\"200\" alt=\"testing a single module\" src=\"./media/modular-code/testing_module.png\">\n\n- A well-designed module can be tested.\n- This helps keep the codebase well-functioning and bug-free.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo make maintenance easier:\n\n<img width=\"300\" alt=\"testing a module taken from a larger project\" src=\"./media/modular-code/testing_module_maintenance.png\">\n\n- Modular code is more readable and understandable.\n- Modules can be debugged separately.\n- Modules only need to be improved/optimized once.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo allow reusability:\n\n<img width=\"400\" alt=\"reuse a module in another project\" src=\"./media/modular-code/reuse_module.png\">\n\n- A module can live independent of its original context.\n- It can be reused by another project.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo facilitate scalability:\n\n<div style=\"display: flex; align-items: center;\">\n\n  <img alt=\"scalability\" src=\"./media/modular-code/scalability.png\" style=\"max-width: 40%; height: auto; margin-right: 20px;\">\n\n  <div>\n    <ul>\n      <li>Complexity remains low by design.</li>\n      <li>This creates space for scaling up.</li>\n    </ul>\n  </div>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo create opportunities for innovation:\n\n<img alt=\"tetris shows innovation\" src=\"./media/modular-code/tetris_innovation.png\" style=\"max-width: 50%; height: auto;\">\n\n- Modules increase the capabilities and power of a project.\n- Rearrange old modules for new applications.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Why write modular code?\n\nTo save time:\n\n<img width=\"600\" alt=\"development speed\" src=\"./media/modular-code/development-speed.svg\">\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"1\">performs limited and clearly defined tasks</li>\n            <li class=\"fragment\" data-fragment-index=\"2\">has a good name</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"-->\n\n## Naming your module\n\n- be descriptive and clear\n- focus on human intelligibility\n- follow language specific conventions\n- avoid abbreviations\n\n<div style=\"text-align: center; margin-top: 20px;\">\n    <img alt=\"naming\" src=\"./media/modular-code/naming_stuff.jpg\" style=\"max-width: 100%; height: auto; max-height: 300px;\">\n</div>\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">is readable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## More readable != shorter code\n\nShorter:\n```python\nindexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n```\n\nMore modular:\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n```python\ndef getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n```\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li>is readable</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">is pure and predictable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## An impure function...\n\n... does not always give the same result:\n\n```python\ndef fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n```\n\n**Q: What will happen when we call the function a second time?**\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n```python\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n```\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A pure function...\n\n... always gives the same result:\n\n```python\ndef fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li>is readable</li>\n            <li>is pure and predictable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"2\">poor readability</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Readable code\n\nModular code becomes more readable\n\n- Code is read more than it is written\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- Does a reader understand what the code does?\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n- Bad readability can be a \"code smell\"\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n\n<figure style=\"text-align: center; margin-top: 20px;\">\n    <img width=\"400\" alt=\"smelly\" src=\"./media/modular-code/Smelly-Code-Featured.avif\" style=\"margin-bottom: -10px;\">\n        <figcaption style=\"font-size: 0.3em; color: #666;\">SIphotography/Depositphotos</figcaption>\n</figure>\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">repetition</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Repetitive code\n\n- Don't Repeat Yourself (DRY): place reused code into a function\n- Identify functions units by their _action_\n  - (e.g. \"plot\", \"transform\", \"extract\", \"save\")\n\n<div style=\"text-align: center; margin-top: 20px;\">\n    <img alt=\"DRY\" src=\"./media/modular-code/dry-vs-wet-code.jpg\" style=\"max-width: 100%; height: auto; max-height: 300px;\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li>repetition</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">nested code</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Target nested code\n\nNested code is a prime target for modularization:\n\n```python\ndef sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Reduce nestedness...\n\n... by extracting modules:\n\n```python\ndef _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top < bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li>repetition</li>\n            <li>nested code</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Let tests help you\n\n- Write tests for each individual module\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- Use the test-writing procedure to look critically at the module's function:\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n    - Is the input/output clear?\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n    - What can you not yet test? Extract it into a new module.\n\n \n\n\n"},{"_path":"/modules/good-practices-lesson/testing-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Testing","description":"Getting more professional","type":"slides","order":4,"author":"Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"testing"},"children":[{"type":"text","value":"Testing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"basics-of-testing"},"children":[{"type":"text","value":"Basics of testing"}]},{"type":"element","tag":"h3","props":{"id":"mistakes-will-happen"},"children":[{"type":"text","value":"Mistakes "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"will"}]},{"type":"text","value":" happen!"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: center"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"The more complex the code, the harder to keep an eye on everything."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"However, we can build safeguards against problems:\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Throwing exceptions"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Logging (intermediate) results"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"text","value":"Writing tests"}]}]},{"type":"text","value":"\n        "}]}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/Doh.png","width":250,"style":{"aspectRatio":"1437/1117"}},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-test"},"children":[{"type":"text","value":"Why Test?"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: center"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Preserve functionality\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Detect (new) errors early"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Avoid unexpected outputs"}]},{"type":"text","value":"\n      "}]}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Help users\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Verify correct installation"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ensure reproducibility"}]},{"type":"text","value":"\n      "}]}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Enable developers\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Manage complexity"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Simplify refactoring"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Facilitate collaboration"}]},{"type":"text","value":"\n      "}]}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/experiment.webp","width":400,"style":"margin-left: 60px; aspect-ratio: 1600/1042;"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test-types"},"children":[{"type":"text","value":"Test Types"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"span","props":{"className":["fragment","fade-out"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"Exceptions in the code base\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Intended to handle \"expected\" problems"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Sound an alarm as soon as the problem arises"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Provide clear feedback to the user"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"Unit testing\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Smallest possible unit (module)"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"No dependency on outside code..."}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"(... replace them with mocks, stubs, etc.)"}]},{"type":"text","value":"\n  "}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"span","props":{"className":["fragment","fade-out"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"Integration testing\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Test interactions between units"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Can be on small scales, system wide, ..."}]},{"type":"text","value":"\n  "}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"testing-frameworks"},"children":[{"type":"text","value":"Testing frameworks"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Most modern programming languages have good options to streamline testing"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Python: "},{"type":"element","tag":"a","props":{"href":"https://docs.pytest.org/en/7.3.x/","rel":["nofollow"]},"children":[{"type":"text","value":"Pytest"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Java: "},{"type":"element","tag":"a","props":{"href":"https://junit.org/junit5/","rel":["nofollow"]},"children":[{"type":"text","value":"Junit"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"R: "},{"type":"element","tag":"a","props":{"href":"https://testthat.r-lib.org/","rel":["nofollow"]},"children":[{"type":"text","value":"testthat"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Matlab: "},{"type":"element","tag":"a","props":{"href":"https://nl.mathworks.com/help/matlab/matlab-unit-test-framework.html?s_tid=CRUX_lftnav","rel":["nofollow"]},"children":[{"type":"text","value":"Testing Frameworks"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Julia: "},{"type":"element","tag":"a","props":{"href":"https://docs.julialang.org/en/v1/stdlib/Test/","rel":["nofollow"]},"children":[{"type":"text","value":"Test"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"C++: "},{"type":"element","tag":"a","props":{"href":"https://google.github.io/googletest/","rel":["nofollow"]},"children":[{"type":"text","value":"GTest"}]},{"type":"text","value":" (developed by Google) or "},{"type":"element","tag":"a","props":{"href":"https://catch2-temp.readthedocs.io/en/latest/index.html","rel":["nofollow"]},"children":[{"type":"text","value":"Catch2"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"etc."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"testing-metrics"},"children":[{"type":"text","value":"Testing metrics"}]},{"type":"element","tag":"h4","props":{"id":"targets-are-arbitrary-and-indicative"},"children":[{"type":"text","value":"Targets are arbitrary and indicative"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: center"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"]},"children":[{"type":"text","value":"Coverage\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Proportion of code that is executed"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Target >= 80%"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"]},"children":[{"type":"text","value":"Ratio (lines of code:lines of test)\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Target: (1:3)"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"]},"children":[{"type":"text","value":"Metrics can be misleading\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"They do not measure quality"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Don't get blindsided by hitting targets over writing good tests"}]},{"type":"text","value":"\n  "}]}]}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/metrics.jpg","width":300,"style":"margin-left: 60px; aspect-ratio: 600/525;"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"write-code"},"children":[{"type":"text","value":"Write Code"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["bash"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\n$ mkdir pytest-example\n$ cd pytest-example\n"}]}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\nCreating a file "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"example.py"}]},{"type":"text","value":" containing\n"},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef add(a, b):\n    return a + b\n \n \ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\nChat with the python shell about "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"assert"}]},{"type":"text","value":" ...\n"}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAssertionError\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test"},"children":[{"type":"text","value":"Test!"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["bash"],"dataLineNumbers":"1|1-9"},"children":[{"type":"text","value":"\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"breaking-things"},"children":[{"type":"text","value":"Breaking Things"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"testing-again"},"children":[{"type":"text","value":"Testing Again"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["bash"],"dataLineNumbers":"1|2-8|9-17|18-20"},"children":[{"type":"text","value":"\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"🚀❓"},{"type":"element","tag":"span","props":{"className":["fragment"]},"children":[{"type":"text","value":"Functions fail on first error"}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"But all test functions are executed"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"pytest-wrap-up"},"children":[{"type":"text","value":"Pytest wrap up"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pytest collects all files starting "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test_"}]},{"type":"text","value":"..."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"... and runs all test functions starting with "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test_"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The tests pass when they do not throw (assertion) errors"}]}]},{"type":"element","tag":"pre","props":{"style":"width: max-content;"},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","className":["python"],"dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use pure functions when possible 👌\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Do you remember what these are? 💭"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing does not have to be hard 👏\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You often test anyway, but then throw the test away 🧐"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use pytest if programming with Python 🎭"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You don't have to strive for 💯% test coverage\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"But be smart about what you are testing 🧠"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Aim for a balance between unit- and integration tests ⚖️"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing removes the dread of refactoring 🔁"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Your future you (and others!) will thank you 🙏"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test-driven-development-fizzbuzz"},"children":[{"type":"text","value":"Test-Driven Development: FizzBuzz"}]},{"type":"element","tag":"div","props":{"className":["r-stack"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/fizz_buzz_1.svg","style":{"aspectRatio":"791/265"}},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"1","src":"./media/testing/fizz_buzz_2.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"2","src":"./media/testing/fizz_buzz_3.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"3","src":"./media/testing/fizz_buzz_4.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"4","src":"./media/testing/fizz_buzz_5.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"5","src":"./media/testing/fizz_buzz_6.svg"},"children":[]}]},{"type":"element","tag":"ul","props":{"className":["fragment"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fizz_buzz() takes an integer argument and returns it, BUT"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"fails on zero or negative numbers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"instead returns \"Fizz\" on multiples of 3"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"instead returns \"Buzz\" on multiples of 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"instead returns \"FizzBuzz\" on multiples of 3 and 5"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test-driven-development-assignment"},"children":[{"type":"text","value":"Test driven development assignment:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create a test function that checks the rules of FizzBuzz:"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fails on zero or negative numbers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"return \"Fizz\" on multiples of 3"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"return \"Buzz\" on multiples of 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"return \"FizzBuzz\" on multiples of 3 and 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"otherwise return itself"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Paste your tests in the collab document, and discuss"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Now write a function code to make your tests pass"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away-1"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What did you think of this style of development?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Was it easier or harder than just writing code?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Would your code look different without the tests? "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For what kind of projects would it be (not) useful? "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Test-Driven Development (TDD) is an optional tool in your toolbox"}]},{"type":"text","value":" 🛠️ "}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"basics-of-testing","depth":2,"text":"Basics of testing","children":[{"id":"mistakes-will-happen","depth":3,"text":"Mistakes will happen!"}]},{"id":"why-test","depth":2,"text":"Why Test?"},{"id":"test-types","depth":2,"text":"Test Types"},{"id":"testing-frameworks","depth":2,"text":"Testing frameworks"},{"id":"testing-metrics","depth":2,"text":"Testing metrics"},{"id":"write-code","depth":2,"text":"Write Code"},{"id":"test","depth":2,"text":"Test!"},{"id":"breaking-things","depth":2,"text":"Breaking Things"},{"id":"testing-again","depth":2,"text":"Testing Again"},{"id":"pytest-wrap-up","depth":2,"text":"Pytest wrap up"},{"id":"take-away","depth":2,"text":"Take-away"},{"id":"test-driven-development-fizzbuzz","depth":2,"text":"Test-Driven Development: FizzBuzz"},{"id":"test-driven-development-assignment","depth":2,"text":"Test driven development assignment:"},{"id":"take-away-1","depth":2,"text":"Take-away"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:testing-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/testing-slides.md","_extension":"md","plainText":"---\ntitle: Testing\ntype: slides\norder: 4\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n<!-- .slide: data-state=\"blue_overlay yellow_flag yellow_strip purple_half_circle_bottom purple_blob right_e_top\" data-background-video=\"./media/testing/606762245.mp4\" data-background-video-loop data-background-video-muted=\"true\" -->\n<!-- https://pixabay.com/videos/engine-motor-mechanic-technology-5497/ -->\n\n# Testing\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Basics of testing\n\n### Mistakes *will* happen!\n\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n    <div>\n      <ul>\n        <li class=\"fragment\">The more complex the code, the harder to keep an eye on everything.</li>\n        <li class=\"fragment\">However, we can build safeguards against problems:\n        <ul>\n          <li class=\"fragment\">Throwing exceptions</li>\n          <li class=\"fragment\">Logging (intermediate) results</li>\n          <li class=\"fragment\"><b>Writing tests</b></li>\n        </ul></li>\n      </ul>\n  </div>\n    <img src=\"./media/testing/Doh.png\" width=\"250\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why Test?\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n  <div>\n    <ul>\n      <li class=\"fragment\">Preserve functionality\n      <ul>\n        <li>Detect (new) errors early</li>\n        <li>Avoid unexpected outputs</li>\n      </ul></li>\n      <li class=\"fragment\">Help users\n      <ul>\n        <li>Verify correct installation</li>\n        <li>Ensure reproducibility</li>\n      </ul></li>\n      <li class=\"fragment\">Enable developers\n      <ul>\n        <li>Manage complexity</li>\n        <li>Simplify refactoring</li>\n        <li>Facilitate collaboration</li>\n      </ul></li>\n    </ul>\n  </div>\n    <img src=\"./media/testing/experiment.webp\" width=\"400\" style=\"margin-left: 60px\">\n</div>\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test Types\n\n<ul>\n  <span class=\"fragment fade-out\" data-fragment-index=\"4\">\n    <li class=\"fragment fade-up\" data-fragment-index=\"1\">Exceptions in the code base\n    <ul>\n      <li>Intended to handle \"expected\" problems</li>\n      <li>Sound an alarm as soon as the problem arises</li>\n      <li>Provide clear feedback to the user</li>\n  </ul></li></span>\n  <li class=\"fragment fade-up\" data-fragment-index=\"2\">Unit testing\n  <ul>\n    <li>Smallest possible unit (module)</li>\n    <li>No dependency on outside code...</li>\n    <li>(... replace them with mocks, stubs, etc.)</li>\n  </ul></li>\n  <span class=\"fragment fade-out\" data-fragment-index=\"4\">\n  <li class=\"fragment fade-up\" data-fragment-index=\"3\">Integration testing\n  <ul>\n    <li>Test interactions between units</li>\n    <li>Can be on small scales, system wide, ...</li>\n  </ul></li></span>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing frameworks\n\nMost modern programming languages have good options to streamline testing\n\n- Python: [Pytest](https://docs.pytest.org/en/7.3.x/)\n- Java: [Junit](https://junit.org/junit5/)\n- R: [testthat](https://testthat.r-lib.org/)\n- Matlab: [Testing Frameworks](https://nl.mathworks.com/help/matlab/matlab-unit-test-framework.html?s_tid=CRUX_lftnav)\n- Julia: [Test](https://docs.julialang.org/en/v1/stdlib/Test/)\n- C++: [GTest](https://google.github.io/googletest/) (developed by Google) or [Catch2](https://catch2-temp.readthedocs.io/en/latest/index.html)\n- etc.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n\n## Testing metrics\n\n#### Targets are arbitrary and indicative\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n  <div>\n    <ul>\n      <li class=\"fragment fade-up\">Coverage\n        <ul>\n          <li>Proportion of code that is executed</li>\n          <li>Target >= 80%</li>\n        </ul>\n      </li>\n      <li class=\"fragment fade-up\">Ratio (lines of code:lines of test)\n        <ul>\n          <li>Target: (1:3)</li>\n        </ul>\n      </li>\n      <li class=\"fragment fade-up\">Metrics can be misleading\n        <ul>\n          <li>They do not measure quality</li>\n          <li>Don't get blindsided by hitting targets over writing good tests</li>\n  </div>\n  <img src=\"./media/testing/metrics.jpg\" width=\"300\" style=\"margin-left: 60px\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Write Code\n\n<pre><code class=\"bash\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n$ mkdir pytest-example\n$ cd pytest-example\n</code></pre>\n\n<div class=\"fragment\">\nCreating a file <code>example.py</code> containing\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a + b\n&nbsp;\n&nbsp;\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n</div>\n\n<div class=\"fragment\">\nChat with the python shell about <code>assert</code> ...\n</div>\n<div class=\"fragment\">\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test!\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|1-9\">\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Breaking Things\n\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing Again\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|2-8|9-17|18-20\">\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n</code></pre>\n\n<ul>\n  <li class=\"fragment\">🚀❓<span class=\"fragment\">Functions fail on first error</span></li>\n  <li class=\"fragment\">But all test functions are executed</li>\n</ul>\n\n===\n\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Pytest wrap up\n\n- pytest collects all files starting <code>test_</code>...\n- ... and runs all test functions starting with <code>test_</code>\n- The tests pass when they do not throw (assertion) errors\n\n<pre style=\"width: max-content;\"><code style=\"overflow: hidden;\" class=\"python\" data-trim class=\"bash\" data-line-numbers>\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Use pure functions when possible 👌\n  - Do you remember what these are? 💭\n- Testing does not have to be hard 👏\n  - You often test anyway, but then throw the test away 🧐\n  - Use pytest if programming with Python 🎭\n- You don't have to strive for 💯% test coverage\n  - But be smart about what you are testing 🧠\n- Aim for a balance between unit- and integration tests ⚖️\n- Testing removes the dread of refactoring 🔁\n- Your future you (and others!) will thank you 🙏\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test-Driven Development: FizzBuzz\n\n<div class=\"r-stack\">\n  <img src=\"./media/testing/fizz_buzz_1.svg\">\n  <img class=\"fragment\" data-fragment-index=\"1\" src=\"./media/testing/fizz_buzz_2.svg\">\n  <img class=\"fragment\" data-fragment-index=\"2\" src=\"./media/testing/fizz_buzz_3.svg\">\n  <img class=\"fragment\" data-fragment-index=\"3\" src=\"./media/testing/fizz_buzz_4.svg\">\n  <img class=\"fragment\" data-fragment-index=\"4\" src=\"./media/testing/fizz_buzz_5.svg\">\n  <img class=\"fragment\" data-fragment-index=\"5\" src=\"./media/testing/fizz_buzz_6.svg\">\n</div>\n\n<ul class=\"fragment\">\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li class=\"fragment\" data-fragment-index=\"1\">fails on zero or negative numbers</li>\n    <li class=\"fragment\" data-fragment-index=\"2\">instead returns \"Fizz\" on multiples of 3</li>\n    <li class=\"fragment\" data-fragment-index=\"3\">instead returns \"Buzz\" on multiples of 5</li>\n    <li class=\"fragment\" data-fragment-index=\"5\">instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test driven development assignment:\n\n<ul>\n  <li>Create a test function that checks the rules of FizzBuzz:</li>\n  <ul>\n    <li>fails on zero or negative numbers</li>\n    <li>return \"Fizz\" on multiples of 3</li>\n    <li>return \"Buzz\" on multiples of 5</li>\n    <li>return \"FizzBuzz\" on multiples of 3 and 5</li>\n    <li>otherwise return itself</li>\n  </ul>\n  <li class=\"fragment\">Paste your tests in the collab document, and discuss</li>\n  <li class=\"fragment\">Now write a function code to make your tests pass</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- What did you think of this style of development?\n- Was it easier or harder than just writing code?\n- Would your code look different without the tests? <!-- .element class=\"fragment\" -->\n- For what kind of projects would it be (not) useful? <!-- .element class=\"fragment\" -->\n\n**Test-Driven Development (TDD) is an optional tool in your toolbox** 🛠️ <!-- .element class=\"fragment\" -->"},{"_path":"/readme","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Digital Skills Slides","description":"This repository holds the slide decks for lessons in the digital skills curriculum of the Netherlands eScience Center. It is built using the NEBULA framework.","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"digital-skills-slides"},"children":[{"type":"text","value":"Digital Skills Slides"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This repository holds the slide decks for lessons in the digital skills curriculum of the Netherlands eScience Center. It is built using the "},{"type":"element","tag":"a","props":{"href":"https://github.com/esciencecenter-digital-skills/NEBULA","rel":["nofollow"]},"children":[{"type":"text","value":"NEBULA framework"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For elaborate setup instructions and other documentation, see the "},{"type":"element","tag":"a","props":{"href":"https://github.com/esciencecenter-digital-skills/NEBULA-docs","rel":["nofollow"]},"children":[{"type":"text","value":"NEBULA documentation"}]}]},{"type":"element","tag":"h2","props":{"id":"quick-local-setup"},"children":[{"type":"text","value":"Quick local setup"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"More detailed information about local setup can be found in the "},{"type":"element","tag":"a","props":{"href":"https://github.com/esciencecenter-digital-skills/NEBULA-docs/blob/main/local-rendering.md","rel":["nofollow"]},"children":[{"type":"text","value":"NEBULA local rendering docs"}]}]},{"type":"element","tag":"h3","props":{"id":"content-directoryrepository"},"children":[{"type":"text","value":"Content directory/repository"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To use NEBULA to build the content in this repository locally, you will need to clone this repository and the NEBULA repository:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"git clone git@github.com:esciencecenter-digital-skills/digital-skills-slides.git\ngit clone git@github.com:esciencecenter-digital-skills/NEBULA.git\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"git clone git@github.com:esciencecenter-digital-skills/digital-skills-slides.git\ngit clone git@github.com:esciencecenter-digital-skills/NEBULA.git\n"}]}]},{"type":"element","tag":"h3","props":{"id":"link-to-the-content-repository"},"children":[{"type":"text","value":"Link to the content repository"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To make sure that NEBULA knows where to find the content, we create the following environment variable:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"export CONTENT_PATH=\"path/to/your/content/repository\"\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export CONTENT_PATH=\"path/to/your/content/repository\"\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"NOTE: You cannot use a ~ in your path, you have to provide the absolute path as returned with "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"pwd"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"install-dependencies"},"children":[{"type":"text","value":"Install dependencies"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First move into the NEBULA folder (so not the content folder):"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"cd NEBULA\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"cd NEBULA\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Install the dependencies using the "},{"type":"element","tag":"a","props":{"href":"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm","rel":["nofollow"]},"children":[{"type":"text","value":"node package manager"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"# node package manager\nnpm install\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# node package manager\nnpm install\n"}]}]},{"type":"element","tag":"h3","props":{"id":"local-development-build"},"children":[{"type":"text","value":"Local development build"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Start the development server on "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"http://localhost:3000"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"# node package manager\nnpm run dev\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# node package manager\nnpm run dev\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now you can open a browser and navigate to "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"http://localhost:3000/digital-skills-slides"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"quick-local-setup","depth":2,"text":"Quick local setup","children":[{"id":"content-directoryrepository","depth":3,"text":"Content directory/repository"},{"id":"link-to-the-content-repository","depth":3,"text":"Link to the content repository"},{"id":"install-dependencies","depth":3,"text":"Install dependencies"},{"id":"local-development-build","depth":3,"text":"Local development build"}]}]}},"_type":"markdown","_id":"local_fs:README.md","_source":"local_fs","_file":"README.md","_extension":"md","plainText":"# Digital Skills Slides\nThis repository holds the slide decks for lessons in the digital skills curriculum of the Netherlands eScience Center. It is built using the [NEBULA framework](https://github.com/esciencecenter-digital-skills/NEBULA).\n\nFor elaborate setup instructions and other documentation, see the [NEBULA documentation](https://github.com/esciencecenter-digital-skills/NEBULA-docs)\n\n\n## Quick local setup\n\nMore detailed information about local setup can be found in the [NEBULA local rendering docs](https://github.com/esciencecenter-digital-skills/NEBULA-docs/blob/main/local-rendering.md)\n\n### Content directory/repository\n\nTo use NEBULA to build the content in this repository locally, you will need to clone this repository and the NEBULA repository:\n\n```bash\ngit clone git@github.com:esciencecenter-digital-skills/digital-skills-slides.git\ngit clone git@github.com:esciencecenter-digital-skills/NEBULA.git\n```\n\n### Link to the content repository\n\nTo make sure that NEBULA knows where to find the content, we create the following environment variable:\n\n```bash\nexport CONTENT_PATH=\"path/to/your/content/repository\"\n```\n\nNOTE: You cannot use a ~ in your path, you have to provide the absolute path as returned with `pwd`.\n\n### Install dependencies\nFirst move into the NEBULA folder (so not the content folder):\n```bash\ncd NEBULA\n```\n\nInstall the dependencies using the [node package manager](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm):\n\n```bash\n# node package manager\nnpm install\n```\n\n### Local development build\n\nStart the development server on `http://localhost:3000`:\n\n```bash\n# node package manager\nnpm run dev\n```\n\nNow you can open a browser and navigate to `http://localhost:3000/digital-skills-slides`\n"}],"navigation":[{"title":"Config","_path":"/config"},{"title":"Hello world","_path":"/"},{"title":"LICENSE","_path":"/license"},{"title":"Main","_path":"/main","children":[{"title":"About","_path":"/main/about"},{"title":"Contribute","_path":"/main/contribute"}]},{"title":"Modules","_path":"/modules","children":[{"title":"Version control with Git and GitHub","_path":"/modules/git-lesson","children":[{"title":"Git and GitHub","_path":"/modules/git-lesson/git-slides"},{"title":"Version control with Git and GitHub","_path":"/modules/git-lesson"},{"title":"Info","_path":"/modules/git-lesson/info"}]},{"title":"Good Practices in Research Software Engineering","_path":"/modules/good-practices-lesson","children":[{"title":"CI","_path":"/modules/good-practices-lesson/ci-slides"},{"title":"Documentation","_path":"/modules/good-practices-lesson/documentation-slides"},{"title":"Good Practices","_path":"/modules/good-practices-lesson/good-practices-slides"},{"title":"Good Practices in Research Software Engineering","_path":"/modules/good-practices-lesson"},{"title":"Info","_path":"/modules/good-practices-lesson/info"},{"title":"Modular Code","_path":"/modules/good-practices-lesson/modular-code-slides"},{"title":"Testing","_path":"/modules/good-practices-lesson/testing-slides"}]}]},{"title":"Digital Skills Slides","_path":"/readme"}]}