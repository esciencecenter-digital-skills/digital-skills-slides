{"_path":"/modules/good-practices-lesson/testing-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Testing","description":"Getting more professional","type":"slides","order":4,"author":"Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"testing"},"children":[{"type":"text","value":"Testing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-test"},"children":[{"type":"text","value":"Why Test?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Preserve functionality\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Detect new errors early"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Facilitate reproducibility for research software"}]},{"type":"text","value":"\n  "}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Help users\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Verify correct installation"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Improve correctness for research output"}]},{"type":"text","value":"\n  "}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Enable developers\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Make refactoring easier"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Simplify external contributions"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"h3","props":{"style":"margin-top: 1em;","className":["fragment"],"id":"manage-complexity"},"children":[{"type":"text","value":"🧮 Manage Complexity 🧩"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test-types"},"children":[{"type":"text","value":"Test Types"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Unit test\n  "},{"type":"element","tag":"ul","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Smallest possible unit"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"No dependency on outside code..."}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"(... replace them with mocks, stubs, etc.)"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"ul","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Integration test\n  "},{"type":"element","tag":"ul","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Test unit interaction"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Can be on small scales, or system wide"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"div","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"4","style":"position:relative; padding: 0 0 calc(55.00% + 44px) 0; margin: -9em auto 0 auto;"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"how-much-testing-is-enough"},"children":[{"type":"text","value":"How much testing is enough?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Test metrics:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"lines of code : lines of tests (target: 1:3)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"test coverage "},{"type":"element","tag":"a","props":{"href":"https://sonarcloud.io/component_measures?id=eWaterCycle_ewatercycle&metric=coverage&view=treemap&selected=eWaterCycle_ewatercycle%3Aewatercycle","rel":["nofollow"]},"children":[{"type":"text","value":"example"}]},{"type":"text","value":" (target: >= 80%)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Targets are defined as "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"necessary"}]},{"type":"text","value":", but "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"not sufficient"}]},{"type":"text","value":" goals."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"pytest"},"children":[{"type":"text","value":"PyTest"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"recommended python testing framework"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.pytest.org/en/7.3.x/","rel":["nofollow"]},"children":[{"type":"text","value":"docs.pytest.org"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":".files/pytest_logo.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"write-code"},"children":[{"type":"text","value":"Write Code"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["bash"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\n$ mkdir pytest-example\n$ cd pytest-example\n"}]}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\nCreating a file "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"example.py"}]},{"type":"text","value":" containing\n"},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef add(a, b):\n    return a + b\n \n \ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\nChat with the python shell about "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"assert"}]},{"type":"text","value":" ...\n"}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAssertionError\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test"},"children":[{"type":"text","value":"Test!"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["bash"],"dataLineNumbers":"1|1-9"},"children":[{"type":"text","value":"\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"breaking-things"},"children":[{"type":"text","value":"Breaking Things"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"testing-again"},"children":[{"type":"text","value":"Testing Again"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["bash"],"dataLineNumbers":"1|2-8|9-17|18-20"},"children":[{"type":"text","value":"\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"🚀❓"},{"type":"element","tag":"span","props":{"className":["fragment"]},"children":[{"type":"text","value":"Functions fail on first error"}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"But all test functions are executed"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pytest collects and runs all test functions starting with "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test_"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The tests pass when they do not throw (assertion) errors"}]}]},{"type":"element","tag":"pre","props":{"style":"width: max-content;"},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","className":["python"],"dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"recap-pure-functions"},"children":[{"type":"text","value":"Recap: pure functions"}]},{"type":"element","tag":"div","props":{"style":"width: 59%; float: left;"},"children":[{"type":"element","tag":"ul","props":{"style":"margin-top: 1ex;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Are deterministic"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Have a return value"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Have no side effects"},{"type":"element","tag":"sup","props":{},"children":[{"type":"text","value":"[1]"}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Have referential transparency"},{"type":"element","tag":"sup","props":{},"children":[{"type":"text","value":"[2]"}]}]},{"type":"element","tag":"ul","props":{},"children":[]}]}]},{"type":"element","tag":"div","props":{"style":"width: 39%; float: right;"},"children":[{"type":"element","tag":"pre","props":{"className":["fragment"],"style":"width: max-content;","dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden; padding-left: 1em; padding-right: 1em;","dataTrim":"","dataNoescape":"","dataLineNumbers":"1-2|1-6|4-8"},"children":[{"type":"text","value":"\ndef last(my_array):\n    return my_array[-1]\n \ndef add(a, b):\n    return a + b\n \nprint(add(1, 2))\nprint(3)\n"}]}]}]},{"type":"element","tag":"h4","props":{"className":["fragment"],"style":"width: 100%; float: left; margin-top: 1em;","id":"pure-functions-are-easy-to-understand-and-test"},"children":[{"type":"text","value":"Pure functions are easy to understand and test!"}]},{"type":"element","tag":"footer","props":{},"children":[{"type":"text","value":"\n[1] Side effects: interactions of a function with its surroundings\n"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n[2] Replacing a function call with the return of that function should not change anything\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away-1"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use pure functions when possible 👌"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing does not have to be hard 👏\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You test anyways, but then throw the test away 🧐"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You don't have to strive for 💯% test coverage"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Aim for a balance between unit- and integration tests ⚖️"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing removes the dread of refactoring 🔁"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Your future you (and others!) will thank you 🙏"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"test-driven-development-fizzbuzz-function"},"children":[{"type":"text","value":"Test-Driven Development: FizzBuzz Function"}]},{"type":"element","tag":"div","props":{"className":["r-stack"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/fizz_buzz_1.svg","style":{"aspectRatio":"791/265"}},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"1","src":"./media/testing/fizz_buzz_2.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"2","src":"./media/testing/fizz_buzz_3.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"3","src":"./media/testing/fizz_buzz_4.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"4","src":"./media/testing/fizz_buzz_5.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"5","src":"./media/testing/fizz_buzz_6.svg"},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fizz_buzz() takes an integer argument and returns it, BUT"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"fails on zero or negative numbers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"instead returns \"Fizz\" on multiples of 3"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"instead returns \"Buzz\" on multiples of 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"instead returns \"FizzBuzz\" on multiples of 3 and 5"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"fizzbuzz-function"},"children":[{"type":"text","value":"FizzBuzz Function"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fizz_buzz() takes an integer argument and returns it, BUT"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fails on zero or negative numbers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"instead returns \"Fizz\" on multiples of 3"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"instead returns \"Buzz\" on multiples of 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"instead returns \"FizzBuzz\" on multiples of 3 and 5"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Create an empty function fizz_buzz()"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Write the tests"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Paste your tests in the collab document, and discuss"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Now write a function code to make your tests pass"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away-2"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What did you think of this style of development?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Was it easier or harder than just writing code?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Would your code look different without the tests? "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For what kind of projects would it be (not) useful? "}]}]},{"type":"element","tag":"div","props":{"className":["fragment"],"style":"width: 20vw; margin: 1em auto;"},"children":[{"type":"text","value":"Test-Driven Development (TDD) is an optional tool in your toolbox 🛠️"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"why-test","depth":2,"text":"Why Test?","children":[{"id":"manage-complexity","depth":3,"text":"🧮 Manage Complexity 🧩"}]},{"id":"test-types","depth":2,"text":"Test Types"},{"id":"how-much-testing-is-enough","depth":2,"text":"How much testing is enough?"},{"id":"write-code","depth":2,"text":"Write Code"},{"id":"test","depth":2,"text":"Test!"},{"id":"breaking-things","depth":2,"text":"Breaking Things"},{"id":"testing-again","depth":2,"text":"Testing Again"},{"id":"take-away","depth":2,"text":"Take-away"},{"id":"take-away-1","depth":2,"text":"Take-away"},{"id":"fizzbuzz-function","depth":2,"text":"FizzBuzz Function"},{"id":"take-away-2","depth":2,"text":"Take-away"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:testing-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/testing-slides.md","_extension":"md","plainText":"---\ntitle: Testing\ntype: slides\norder: 4\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Testing\n\nnote:\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why Test?\n\n<ul>\n  <li>Preserve functionality\n  <ul>\n    <li>Detect new errors early</li>\n    <li>Facilitate reproducibility for research software</li>\n  </ul></li>\n  <li class=\"fragment\">Help users\n  <ul>\n    <li>Verify correct installation</li>\n    <li>Improve correctness for research output</li>\n  </ul></li>\n  <li class=\"fragment\">Enable developers\n  <ul>\n    <li>Make refactoring easier</li>\n    <li>Simplify external contributions</li>\n  </ul></li>\n</ul>\n\n<h3 style=\"margin-top: 1em;\" class=\"fragment\">🧮 Manage Complexity 🧩</h3>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test Types\n\n<ul>\n  <li>Unit test\n  <ul class=\"fragment fade-up\" data-fragment-index=\"1\">\n    <li>Smallest possible unit</li>\n    <li>No dependency on outside code...</li>\n    <li>(... replace them with mocks, stubs, etc.)</li>\n  </ul></li>\n</ul>\n<ul class=\"fragment fade-up\" data-fragment-index=\"2\">\n  <li>Integration test\n  <ul class=\"fragment fade-up\" data-fragment-index=\"3\">\n    <li>Test unit interaction</li>\n    <li>Can be on small scales, or system wide</li>\n  </ul></li>\n</ul>\n\n<div class=\"fragment fade-up\" data-fragment-index=\"4\" style='position:relative; padding: 0 0 calc(55.00% + 44px) 0; margin: -9em auto 0 auto;'></div><p style=\"font-size: large; margin: 0; padding: 0;\"> </p>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n\n## How much testing is enough?\n\nTest metrics:\n\n- lines of code : lines of tests (target: 1:3)\n- test coverage [example](https://sonarcloud.io/component_measures?id=eWaterCycle_ewatercycle&metric=coverage&view=treemap&selected=eWaterCycle_ewatercycle%3Aewatercycle) (target: >= 80%)\n\nTargets are defined as *necessary*, but *not sufficient* goals.\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# PyTest\n\n- recommended python testing framework\n- [docs.pytest.org](https://docs.pytest.org/en/7.3.x/)\n\n![](.files/pytest_logo.svg)\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Write Code\n\n<pre><code class=\"bash\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n$ mkdir pytest-example\n$ cd pytest-example\n</code></pre>\n\n<div class=\"fragment\">\nCreating a file <code>example.py</code> containing\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a + b\n&nbsp;\n&nbsp;\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n</div>\n\n<div class=\"fragment\">\nChat with the python shell about <code>assert</code> ...\n</div>\n<div class=\"fragment\">\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test!\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|1-9\">\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Breaking Things\n\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing Again\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|2-8|9-17|18-20\">\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n</code></pre>\n\n<ul>\n  <li class=\"fragment\">🚀❓<span class=\"fragment\">Functions fail on first error</span></li>\n  <li class=\"fragment\">But all test functions are executed</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- pytest collects and runs all test functions starting with <code>test_</code>\n- The tests pass when they do not throw (assertion) errors\n\n<pre style=\"width: max-content;\"><code style=\"overflow: hidden;\" class=\"python\" data-trim class=\"bash\" data-line-numbers>\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n</code></pre>\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# Recap: pure functions\n\n<div style=\"width: 59%; float: left;\">\n<ul style=\"margin-top: 1ex;\">\n  <li>Are deterministic</li>\n  <li>Have a return value</li>\n  <li>Have no side effects<sup>[1]</sup></li>\n  <li>Have referential transparency<sup>[2]</sup></li>\n<ul>\n</div>\n\n<div style=\"width: 39%; float: right;\">\n<pre class=\"fragment\" style=\"width: max-content;\" data-id=\"code-animation\"><code class=\"python\" style=\"overflow: hidden; padding-left: 1em; padding-right: 1em;\" data-trim data-noescape class=\"bash\" data-line-numbers=\"1-2|1-6|4-8\">\ndef last(my_array):\n    return my_array[-1]\n&nbsp;\ndef add(a, b):\n    return a + b\n&nbsp;\nprint(add(1, 2))\nprint(3)\n</code></pre>\n</div>\n\n<h4 class=\"fragment\" style=\"width: 100%; float: left; margin-top: 1em;\">Pure functions are easy to understand and test!</h4>\n\n<footer>\n[1] Side effects: interactions of a function with its surroundings\n<br>\n[2] Replacing a function call with the return of that function should not change anything\n</footer>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Use pure functions when possible 👌\n- Testing does not have to be hard 👏\n  - You test anyways, but then throw the test away 🧐\n- You don't have to strive for 💯% test coverage\n- Aim for a balance between unit- and integration tests ⚖️\n- Testing removes the dread of refactoring 🔁\n- Your future you (and others!) will thank you 🙏\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# Test-Driven Development: FizzBuzz Function\n\n<div class=\"r-stack\">\n  <img src=\"./media/testing/fizz_buzz_1.svg\">\n  <img class=\"fragment\" data-fragment-index=\"1\" src=\"./media/testing/fizz_buzz_2.svg\">\n  <img class=\"fragment\" data-fragment-index=\"2\" src=\"./media/testing/fizz_buzz_3.svg\">\n  <img class=\"fragment\" data-fragment-index=\"3\" src=\"./media/testing/fizz_buzz_4.svg\">\n  <img class=\"fragment\" data-fragment-index=\"4\" src=\"./media/testing/fizz_buzz_5.svg\">\n  <img class=\"fragment\" data-fragment-index=\"5\" src=\"./media/testing/fizz_buzz_6.svg\">\n</div>\n\n<ul>\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li class=\"fragment\" data-fragment-index=\"1\">fails on zero or negative numbers</li>\n    <li class=\"fragment\" data-fragment-index=\"2\">instead returns \"Fizz\" on multiples of 3</li>\n    <li class=\"fragment\" data-fragment-index=\"3\">instead returns \"Buzz\" on multiples of 5</li>\n    <li class=\"fragment\" data-fragment-index=\"5\">instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## FizzBuzz Function\n\n<ul>\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li>fails on zero or negative numbers</li>\n    <li>instead returns \"Fizz\" on multiples of 3</li>\n    <li>instead returns \"Buzz\" on multiples of 5</li>\n    <li>instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n  <li class=\"fragment\">Create an empty function fizz_buzz()</li>\n  <li class=\"fragment\">Write the tests</li>\n  <li class=\"fragment\">Paste your tests in the collab document, and discuss</li>\n  <li class=\"fragment\">Now write a function code to make your tests pass</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- What did you think of this style of development?\n- Was it easier or harder than just writing code?\n- Would your code look different without the tests? <!-- .element class=\"fragment\" -->\n- For what kind of projects would it be (not) useful? <!-- .element class=\"fragment\" -->\n\n<div class=\"fragment\" style=\"width: 20vw; margin: 1em auto;\">Test-Driven Development (TDD) is an optional tool in your toolbox 🛠️</div>\n"}