{"_path":"/modules/good-practices-lesson/testing-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Testing","description":"Getting more professional","type":"slides","order":4,"author":"Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"testing"},"children":[{"type":"text","value":"Testing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"basics-of-testing"},"children":[{"type":"text","value":"Basics of testing"}]},{"type":"element","tag":"h3","props":{"id":"mistakes-will-happen"},"children":[{"type":"text","value":"Mistakes "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"will"}]},{"type":"text","value":" happen!"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: center"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"The more complex the code, the harder to keep an eye on everything."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"However, we can build safeguards against problems:\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Throwing exceptions"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Logging (intermediate) results"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"text","value":"Writing tests"}]}]},{"type":"text","value":"\n        "}]}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/Doh.png","width":250,"style":{"aspectRatio":"1437/1117"}},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-test"},"children":[{"type":"text","value":"Why Test?"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: center"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Preserve functionality\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Detect (new) errors early"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Avoid unexpected outputs"}]},{"type":"text","value":"\n      "}]}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Help users\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Verify correct installation"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ensure reproducibility"}]},{"type":"text","value":"\n      "}]}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Enable developers\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Manage complexity"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Simplify refactoring"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Facilitate collaboration"}]},{"type":"text","value":"\n      "}]}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/experiment.webp","width":400,"style":"margin-left: 60px; aspect-ratio: 1600/1042;"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test-types"},"children":[{"type":"text","value":"Test Types"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"span","props":{"className":["fragment","fade-out"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"Exceptions in the code base\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Intended to handle \"expected\" problems"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Sound an alarm as soon as the problem arises"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Provide clear feedback to the user"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"Unit testing\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Smallest possible unit (module)"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"No dependency on outside code..."}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"(... replace them with mocks, stubs, etc.)"}]},{"type":"text","value":"\n  "}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"span","props":{"className":["fragment","fade-out"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"Integration testing\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Test interactions between units"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Can be on small scales, system wide, ..."}]},{"type":"text","value":"\n  "}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"testing-frameworks"},"children":[{"type":"text","value":"Testing frameworks"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Most modern programming languages have good options to streamline testing"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Python: "},{"type":"element","tag":"a","props":{"href":"https://docs.pytest.org/en/7.3.x/","rel":["nofollow"]},"children":[{"type":"text","value":"Pytest"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Java: "},{"type":"element","tag":"a","props":{"href":"https://junit.org/junit5/","rel":["nofollow"]},"children":[{"type":"text","value":"Junit"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"R: "},{"type":"element","tag":"a","props":{"href":"https://testthat.r-lib.org/","rel":["nofollow"]},"children":[{"type":"text","value":"testthat"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Matlab: "},{"type":"element","tag":"a","props":{"href":"https://nl.mathworks.com/help/matlab/matlab-unit-test-framework.html?s_tid=CRUX_lftnav","rel":["nofollow"]},"children":[{"type":"text","value":"Testing Frameworks"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Julia: "},{"type":"element","tag":"a","props":{"href":"https://docs.julialang.org/en/v1/stdlib/Test/","rel":["nofollow"]},"children":[{"type":"text","value":"Test"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"C++: "},{"type":"element","tag":"a","props":{"href":"https://google.github.io/googletest/","rel":["nofollow"]},"children":[{"type":"text","value":"GTest"}]},{"type":"text","value":" (developed by Google) or "},{"type":"element","tag":"a","props":{"href":"https://catch2-temp.readthedocs.io/en/latest/index.html","rel":["nofollow"]},"children":[{"type":"text","value":"Catch2"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"etc."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"testing-metrics"},"children":[{"type":"text","value":"Testing metrics"}]},{"type":"element","tag":"h4","props":{"id":"targets-are-arbitrary-and-indicative"},"children":[{"type":"text","value":"Targets are arbitrary and indicative"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: center"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"]},"children":[{"type":"text","value":"Coverage\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Proportion of code that is executed"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Target >= 80%"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"]},"children":[{"type":"text","value":"Ratio (lines of code:lines of test)\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Target: (1:3)"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{"className":["fragment","fade-up"]},"children":[{"type":"text","value":"Metrics can be misleading\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"They do not measure quality"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Don't get blindsided by hitting targets over writing good tests"}]},{"type":"text","value":"\n  "}]}]}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/metrics.jpg","width":300,"style":"margin-left: 60px; aspect-ratio: 600/525;"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"write-code"},"children":[{"type":"text","value":"Write Code"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["bash"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\n$ mkdir pytest-example\n$ cd pytest-example\n"}]}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\nCreating a file "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"example.py"}]},{"type":"text","value":" containing\n"},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef add(a, b):\n    return a + b\n \n \ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\nChat with the python shell about "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"assert"}]},{"type":"text","value":" ...\n"}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAssertionError\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test"},"children":[{"type":"text","value":"Test!"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["bash"],"dataLineNumbers":"1|1-9"},"children":[{"type":"text","value":"\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"breaking-things"},"children":[{"type":"text","value":"Breaking Things"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"testing-again"},"children":[{"type":"text","value":"Testing Again"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["bash"],"dataLineNumbers":"1|2-8|9-17|18-20"},"children":[{"type":"text","value":"\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"🚀❓"},{"type":"element","tag":"span","props":{"className":["fragment"]},"children":[{"type":"text","value":"Functions fail on first error"}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"But all test functions are executed"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"pytest-wrap-up"},"children":[{"type":"text","value":"Pytest wrap up"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pytest collects all files starting "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test_"}]},{"type":"text","value":"..."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"... and runs all test functions starting with "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test_"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The tests pass when they do not throw (assertion) errors"}]}]},{"type":"element","tag":"pre","props":{"style":"width: max-content;"},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","className":["python"],"dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use pure functions when possible 👌\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Do you remember what these are? 💭"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing does not have to be hard 👏\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You often test anyway, but then throw the test away 🧐"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use pytest if programming with Python 🎭"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You don't have to strive for 💯% test coverage\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"But be smart about what you are testing 🧠"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Aim for a balance between unit- and integration tests ⚖️"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing removes the dread of refactoring 🔁"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Your future you (and others!) will thank you 🙏"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test-driven-development-fizzbuzz"},"children":[{"type":"text","value":"Test-Driven Development: FizzBuzz"}]},{"type":"element","tag":"div","props":{"className":["r-stack"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/fizz_buzz_1.svg","style":{"aspectRatio":"791/265"}},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"1","src":"./media/testing/fizz_buzz_2.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"2","src":"./media/testing/fizz_buzz_3.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"3","src":"./media/testing/fizz_buzz_4.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"4","src":"./media/testing/fizz_buzz_5.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"5","src":"./media/testing/fizz_buzz_6.svg"},"children":[]}]},{"type":"element","tag":"ul","props":{"className":["fragment"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fizz_buzz() takes an integer argument and returns it, BUT"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"fails on zero or negative numbers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"instead returns \"Fizz\" on multiples of 3"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"instead returns \"Buzz\" on multiples of 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"instead returns \"FizzBuzz\" on multiples of 3 and 5"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test-driven-development-assignment"},"children":[{"type":"text","value":"Test driven development assignment:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create a test function that checks the rules of FizzBuzz:"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fails on zero or negative numbers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"return \"Fizz\" on multiples of 3"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"return \"Buzz\" on multiples of 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"return \"FizzBuzz\" on multiples of 3 and 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"otherwise return itself"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Paste your tests in the collab document, and discuss"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Now write a function code to make your tests pass"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away-1"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What did you think of this style of development?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Was it easier or harder than just writing code?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Would your code look different without the tests? "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For what kind of projects would it be (not) useful? "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Test-Driven Development (TDD) is an optional tool in your toolbox"}]},{"type":"text","value":" 🛠️ "}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"basics-of-testing","depth":2,"text":"Basics of testing","children":[{"id":"mistakes-will-happen","depth":3,"text":"Mistakes will happen!"}]},{"id":"why-test","depth":2,"text":"Why Test?"},{"id":"test-types","depth":2,"text":"Test Types"},{"id":"testing-frameworks","depth":2,"text":"Testing frameworks"},{"id":"testing-metrics","depth":2,"text":"Testing metrics"},{"id":"write-code","depth":2,"text":"Write Code"},{"id":"test","depth":2,"text":"Test!"},{"id":"breaking-things","depth":2,"text":"Breaking Things"},{"id":"testing-again","depth":2,"text":"Testing Again"},{"id":"pytest-wrap-up","depth":2,"text":"Pytest wrap up"},{"id":"take-away","depth":2,"text":"Take-away"},{"id":"test-driven-development-fizzbuzz","depth":2,"text":"Test-Driven Development: FizzBuzz"},{"id":"test-driven-development-assignment","depth":2,"text":"Test driven development assignment:"},{"id":"take-away-1","depth":2,"text":"Take-away"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:testing-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/testing-slides.md","_extension":"md","plainText":"---\ntitle: Testing\ntype: slides\norder: 4\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n<!-- .slide: data-state=\"blue_overlay yellow_flag yellow_strip purple_half_circle_bottom purple_blob right_e_top\" data-background-video=\"./media/testing/606762245.mp4\" data-background-video-loop data-background-video-muted=\"true\" -->\n<!-- https://pixabay.com/videos/engine-motor-mechanic-technology-5497/ -->\n\n# Testing\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Basics of testing\n\n### Mistakes *will* happen!\n\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n    <div>\n      <ul>\n        <li class=\"fragment\">The more complex the code, the harder to keep an eye on everything.</li>\n        <li class=\"fragment\">However, we can build safeguards against problems:\n        <ul>\n          <li class=\"fragment\">Throwing exceptions</li>\n          <li class=\"fragment\">Logging (intermediate) results</li>\n          <li class=\"fragment\"><b>Writing tests</b></li>\n        </ul></li>\n      </ul>\n  </div>\n    <img src=\"./media/testing/Doh.png\" width=\"250\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why Test?\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n  <div>\n    <ul>\n      <li class=\"fragment\">Preserve functionality\n      <ul>\n        <li>Detect (new) errors early</li>\n        <li>Avoid unexpected outputs</li>\n      </ul></li>\n      <li class=\"fragment\">Help users\n      <ul>\n        <li>Verify correct installation</li>\n        <li>Ensure reproducibility</li>\n      </ul></li>\n      <li class=\"fragment\">Enable developers\n      <ul>\n        <li>Manage complexity</li>\n        <li>Simplify refactoring</li>\n        <li>Facilitate collaboration</li>\n      </ul></li>\n    </ul>\n  </div>\n    <img src=\"./media/testing/experiment.webp\" width=\"400\" style=\"margin-left: 60px\">\n</div>\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test Types\n\n<ul>\n  <span class=\"fragment fade-out\" data-fragment-index=\"4\">\n    <li class=\"fragment fade-up\" data-fragment-index=\"1\">Exceptions in the code base\n    <ul>\n      <li>Intended to handle \"expected\" problems</li>\n      <li>Sound an alarm as soon as the problem arises</li>\n      <li>Provide clear feedback to the user</li>\n  </ul></li></span>\n  <li class=\"fragment fade-up\" data-fragment-index=\"2\">Unit testing\n  <ul>\n    <li>Smallest possible unit (module)</li>\n    <li>No dependency on outside code...</li>\n    <li>(... replace them with mocks, stubs, etc.)</li>\n  </ul></li>\n  <span class=\"fragment fade-out\" data-fragment-index=\"4\">\n  <li class=\"fragment fade-up\" data-fragment-index=\"3\">Integration testing\n  <ul>\n    <li>Test interactions between units</li>\n    <li>Can be on small scales, system wide, ...</li>\n  </ul></li></span>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing frameworks\n\nMost modern programming languages have good options to streamline testing\n\n- Python: [Pytest](https://docs.pytest.org/en/7.3.x/)\n- Java: [Junit](https://junit.org/junit5/)\n- R: [testthat](https://testthat.r-lib.org/)\n- Matlab: [Testing Frameworks](https://nl.mathworks.com/help/matlab/matlab-unit-test-framework.html?s_tid=CRUX_lftnav)\n- Julia: [Test](https://docs.julialang.org/en/v1/stdlib/Test/)\n- C++: [GTest](https://google.github.io/googletest/) (developed by Google) or [Catch2](https://catch2-temp.readthedocs.io/en/latest/index.html)\n- etc.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n\n## Testing metrics\n\n#### Targets are arbitrary and indicative\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n  <div>\n    <ul>\n      <li class=\"fragment fade-up\">Coverage\n        <ul>\n          <li>Proportion of code that is executed</li>\n          <li>Target >= 80%</li>\n        </ul>\n      </li>\n      <li class=\"fragment fade-up\">Ratio (lines of code:lines of test)\n        <ul>\n          <li>Target: (1:3)</li>\n        </ul>\n      </li>\n      <li class=\"fragment fade-up\">Metrics can be misleading\n        <ul>\n          <li>They do not measure quality</li>\n          <li>Don't get blindsided by hitting targets over writing good tests</li>\n  </div>\n  <img src=\"./media/testing/metrics.jpg\" width=\"300\" style=\"margin-left: 60px\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Write Code\n\n<pre><code class=\"bash\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n$ mkdir pytest-example\n$ cd pytest-example\n</code></pre>\n\n<div class=\"fragment\">\nCreating a file <code>example.py</code> containing\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a + b\n&nbsp;\n&nbsp;\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n</div>\n\n<div class=\"fragment\">\nChat with the python shell about <code>assert</code> ...\n</div>\n<div class=\"fragment\">\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test!\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|1-9\">\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Breaking Things\n\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing Again\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|2-8|9-17|18-20\">\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n</code></pre>\n\n<ul>\n  <li class=\"fragment\">🚀❓<span class=\"fragment\">Functions fail on first error</span></li>\n  <li class=\"fragment\">But all test functions are executed</li>\n</ul>\n\n===\n\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Pytest wrap up\n\n- pytest collects all files starting <code>test_</code>...\n- ... and runs all test functions starting with <code>test_</code>\n- The tests pass when they do not throw (assertion) errors\n\n<pre style=\"width: max-content;\"><code style=\"overflow: hidden;\" class=\"python\" data-trim class=\"bash\" data-line-numbers>\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Use pure functions when possible 👌\n  - Do you remember what these are? 💭\n- Testing does not have to be hard 👏\n  - You often test anyway, but then throw the test away 🧐\n  - Use pytest if programming with Python 🎭\n- You don't have to strive for 💯% test coverage\n  - But be smart about what you are testing 🧠\n- Aim for a balance between unit- and integration tests ⚖️\n- Testing removes the dread of refactoring 🔁\n- Your future you (and others!) will thank you 🙏\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test-Driven Development: FizzBuzz\n\n<div class=\"r-stack\">\n  <img src=\"./media/testing/fizz_buzz_1.svg\">\n  <img class=\"fragment\" data-fragment-index=\"1\" src=\"./media/testing/fizz_buzz_2.svg\">\n  <img class=\"fragment\" data-fragment-index=\"2\" src=\"./media/testing/fizz_buzz_3.svg\">\n  <img class=\"fragment\" data-fragment-index=\"3\" src=\"./media/testing/fizz_buzz_4.svg\">\n  <img class=\"fragment\" data-fragment-index=\"4\" src=\"./media/testing/fizz_buzz_5.svg\">\n  <img class=\"fragment\" data-fragment-index=\"5\" src=\"./media/testing/fizz_buzz_6.svg\">\n</div>\n\n<ul class=\"fragment\">\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li class=\"fragment\" data-fragment-index=\"1\">fails on zero or negative numbers</li>\n    <li class=\"fragment\" data-fragment-index=\"2\">instead returns \"Fizz\" on multiples of 3</li>\n    <li class=\"fragment\" data-fragment-index=\"3\">instead returns \"Buzz\" on multiples of 5</li>\n    <li class=\"fragment\" data-fragment-index=\"5\">instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test driven development assignment:\n\n<ul>\n  <li>Create a test function that checks the rules of FizzBuzz:</li>\n  <ul>\n    <li>fails on zero or negative numbers</li>\n    <li>return \"Fizz\" on multiples of 3</li>\n    <li>return \"Buzz\" on multiples of 5</li>\n    <li>return \"FizzBuzz\" on multiples of 3 and 5</li>\n    <li>otherwise return itself</li>\n  </ul>\n  <li class=\"fragment\">Paste your tests in the collab document, and discuss</li>\n  <li class=\"fragment\">Now write a function code to make your tests pass</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- What did you think of this style of development?\n- Was it easier or harder than just writing code?\n- Would your code look different without the tests? <!-- .element class=\"fragment\" -->\n- For what kind of projects would it be (not) useful? <!-- .element class=\"fragment\" -->\n\n**Test-Driven Development (TDD) is an optional tool in your toolbox** 🛠️ <!-- .element class=\"fragment\" -->"}