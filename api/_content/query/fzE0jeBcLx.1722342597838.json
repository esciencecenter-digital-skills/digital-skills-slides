{"_path":"/modules/good-practices-lesson/modular-code-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Modular Code","description":"Day 3 Code Refinery","type":"slides","order":2,"author":"Barbara Vreede, Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"developing-modular-code"},"children":[{"type":"text","value":"Developing Modular Code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-is-modularity"},"children":[{"type":"text","value":"What is modularity?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Software is 'built up' from smaller elements"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Elements are self-contained and independent"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Each element handles a specific (set of) task(s)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Simple components"}]},{"type":"text","value":" build "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"complex behavior"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"modular-code"},"children":[{"type":"text","value":"Modular code"}]},{"type":"element","tag":"img","props":{"width":900,"alt":"think in building blocks","src":"https://user-images.githubusercontent.com/5747405/207459058-59c88b4c-1401-428f-b28a-0ac3e72bd964.png"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-are-these-blockselements"},"children":[{"type":"text","value":"What are these blocks/elements?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"functions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"classes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"modules"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"libraries/packages"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"programs"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To increase robustness:"}]},{"type":"element","tag":"img","props":{"width":200,"alt":"testing a single module","src":"./media/modular-code/testing_module.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A well-designed module can be tested."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This helps keep the codebase well-functioning and bug-free."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-1"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To make maintenance easier:"}]},{"type":"element","tag":"img","props":{"width":300,"alt":"testing a module taken from a larger project","src":"./media/modular-code/testing_module_maintenance.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modular code is more readable and understandable."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules can be debugged separately."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-2"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To allow reusability:"}]},{"type":"element","tag":"img","props":{"width":400,"alt":"reuse a module in another project","src":"./media/modular-code/reuse_module.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A module can live independent of its original context"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"It can be reused by another project"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-3"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To facilitate scalability:"}]},{"type":"element","tag":"img","props":{"height":300,"alt":"scalability","src":"./media/modular-code/scalability.png"},"children":[]},{"type":"element","tag":"div","props":{},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Complexity remains low by design"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This creates space for scaling up"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-4"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create opportunities for innovation:"}]},{"type":"element","tag":"img","props":{"height":300,"alt":"tetris shows innovation","src":"./media/modular-code/tetris_innovation.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules increase the capabilities and power of a project"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rearrange old modules for new applications"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"img","props":{"width":800,"alt":"development speed","src":"./media/modular-code/development-speed.svg"},"children":[]},{"type":"element","tag":"h2","props":{"id":"a-good-module"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is readable"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"readability-shorter-code"},"children":[{"type":"text","value":"Readability =/= shorter code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Shorter:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"More modular:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(li) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(li) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module-1"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is readable"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is pure/does not have a 'state'"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-pure-function"},"children":[{"type":"text","value":"A pure function"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"has no side-effects:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def fahrenheit_to_celsius(temp_f):\n    temp_c = (temp_f - 32.0) * (5.0/9.0)\n    return temp_c\n\n>>> temp_c = fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def fahrenheit_to_celsius(temp_f):\n    temp_c = (temp_f - 32.0) * (5.0/9.0)\n    return temp_c\n\n>>> temp_c = fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-stateful-function"},"children":[{"type":"text","value":"A stateful function"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"changes its environment:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def fahrenheit_to_celsius(temp_f):\n    global temp_c\n    temp_c = (temp_f - f_to_c_offset) * f_to_c_factor\n\n>>> f_to_c_offset = 32.0\n>>> f_to_c_factor = (5.0/9.0)\n>>> temp_c = 0.0\n>>> print(temp_c)\n0.0\n>>> fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def fahrenheit_to_celsius(temp_f):\n    global temp_c\n    temp_c = (temp_f - f_to_c_offset) * f_to_c_factor\n\n>>> f_to_c_offset = 32.0\n>>> f_to_c_factor = (5.0/9.0)\n>>> temp_c = 0.0\n>>> print(temp_c)\n0.0\n>>> fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"focus-on-readability"},"children":[{"type":"text","value":"Focus on readability"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modular code becomes more readable"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code is read more than it is written"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Does a reader understand what the code does?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Bad readability can be a \"code smell\""}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identify-future-functions"},"children":[{"type":"text","value":"Identify future functions"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Don't Repeat Yourself (DRY): place reused code into a function"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify potential functions by their "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"action"}]},{"type":"text","value":"\n(e.g. \"plotting\", \"transforming\", \"extracting\", \"saving\")"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"target-nested-code"},"children":[{"type":"text","value":"Target nested code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nested code is a prime target for modularization:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def checkTemperature(degrees):\n    if degrees < 0:\n        if degrees < -273:\n            if degrees < -459:\n                print(\"This temperature is impossible.\")\n            else:\n                print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def checkTemperature(degrees):\n    if degrees < 0:\n        if degrees < -273:\n            if degrees < -459:\n                print(\"This temperature is impossible.\")\n            else:\n                print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"reduce-nestedness"},"children":[{"type":"text","value":"Reduce nestedness"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"by extracting modules:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def validTemp(degrees):\n    if degrees < -459:\n        return FALSE\n    return TRUE\n\ndef checkTemperature(degrees):\n    if not validTemp(degrees):\n        return \"invalid temperature\"\n    if degrees < 0:\n        if degrees < -273:\n            print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def validTemp(degrees):\n    if degrees < -459:\n        return FALSE\n    return TRUE\n\ndef checkTemperature(degrees):\n    if not validTemp(degrees):\n        return \"invalid temperature\"\n    if degrees < 0:\n        if degrees < -273:\n            print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"let-tests-help-you"},"children":[{"type":"text","value":"Let tests help you"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Write tests for each individual module"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use the test-writing procedure to look critically at the module's function:\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Is the input/output clear?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What can you not yet test? Extract it into a new module."}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-modularity","depth":2,"text":"What is modularity?"},{"id":"modular-code","depth":2,"text":"Modular code"},{"id":"what-are-these-blockselements","depth":2,"text":"What are these blocks/elements?"},{"id":"why-write-modular-code","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-1","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-2","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-3","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-4","depth":2,"text":"Why write modular code?"},{"id":"a-good-module","depth":2,"text":"A good module..."},{"id":"readability-shorter-code","depth":2,"text":"Readability =/= shorter code"},{"id":"a-good-module-1","depth":2,"text":"A good module..."},{"id":"a-pure-function","depth":2,"text":"A pure function"},{"id":"a-stateful-function","depth":2,"text":"A stateful function"},{"id":"identifying-opportunities-for-modularization","depth":2,"text":"Identifying opportunities for modularization"},{"id":"focus-on-readability","depth":2,"text":"Focus on readability"},{"id":"identify-future-functions","depth":2,"text":"Identify future functions"},{"id":"target-nested-code","depth":2,"text":"Target nested code"},{"id":"reduce-nestedness","depth":2,"text":"Reduce nestedness"},{"id":"let-tests-help-you","depth":2,"text":"Let tests help you"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:modular-code-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/modular-code-slides.md","_extension":"md","plainText":"---\ntitle: Modular Code\ntype: slides\norder: 2\nauthor: Barbara Vreede, Ole Mussmann\ndescription: Day 3 Code Refinery\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Developing Modular Code\n\nnote: \n\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## What is modularity?\n\n- Software is 'built up' from smaller elements\n- Elements are self-contained and independent\n- Each element handles a specific (set of) task(s)\n\n**Simple components** build **complex behavior**.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Modular code\n\n<img width=\"900\" alt=\"think in building blocks\" src=\"https://user-images.githubusercontent.com/5747405/207459058-59c88b4c-1401-428f-b28a-0ac3e72bd964.png\">\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What are these blocks/elements?\n\n- functions\n- classes\n- modules\n- libraries/packages\n- programs\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo increase robustness:\n\n<img width=\"200\" alt=\"testing a single module\" src=\"./media/modular-code/testing_module.png\">\n\n- A well-designed module can be tested.\n- This helps keep the codebase well-functioning and bug-free.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo make maintenance easier:\n\n<img width=\"300\" alt=\"testing a module taken from a larger project\" src=\"./media/modular-code/testing_module_maintenance.png\">\n\n- Modular code is more readable and understandable.\n- Modules can be debugged separately.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo allow reusability:\n\n<img width=\"400\" alt=\"reuse a module in another project\" src=\"./media/modular-code/reuse_module.png\">\n\n- A module can live independent of its original context\n- It can be reused by another project\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo facilitate scalability:\n\n<img height=\"300\" alt=\"scalability\" src=\"./media/modular-code/scalability.png\">\n\n\n<div>\n\n- Complexity remains low by design\n- This creates space for scaling up\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo create opportunities for innovation:\n\n<img height=\"300\" alt=\"tetris shows innovation\" src=\"./media/modular-code/tetris_innovation.png\">\n\n- Modules increase the capabilities and power of a project\n- Rearrange old modules for new applications\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n<img width=\"800\" alt=\"development speed\" src=\"./media/modular-code/development-speed.svg\">\n\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n- performs limited and clearly defined tasks\n- has a good name\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- is readable\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Readability =/= shorter code\n\nShorter:\n```python=\nindexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n```\n\nMore modular:\n```python=\ndef getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(li) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n- performs limited and clearly defined tasks\n- has a good name\n- is readable\n- is pure/does not have a 'state'\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A pure function\n\nhas no side-effects:\n\n```python=\ndef fahrenheit_to_celsius(temp_f):\n    temp_c = (temp_f - 32.0) * (5.0/9.0)\n    return temp_c\n\n>>> temp_c = fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A stateful function\n\nchanges its environment:\n\n```python=\ndef fahrenheit_to_celsius(temp_f):\n    global temp_c\n    temp_c = (temp_f - f_to_c_offset) * f_to_c_factor\n\n>>> f_to_c_offset = 32.0\n>>> f_to_c_factor = (5.0/9.0)\n>>> temp_c = 0.0\n>>> print(temp_c)\n0.0\n>>> fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Focus on readability\n\n- Modular code becomes more readable\n- Code is read more than it is written\n- Does a reader understand what the code does?\n- Bad readability can be a \"code smell\"\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identify future functions\n\n- Don't Repeat Yourself (DRY): place reused code into a function\n- Identify potential functions by their _action_\n    (e.g. \"plotting\", \"transforming\", \"extracting\", \"saving\")\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Target nested code\n\nNested code is a prime target for modularization:\n\n```python=\ndef checkTemperature(degrees):\n    if degrees < 0:\n        if degrees < -273:\n            if degrees < -459:\n                print(\"This temperature is impossible.\")\n            else:\n                print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Reduce nestedness\n\nby extracting modules:\n\n```python=\ndef validTemp(degrees):\n    if degrees < -459:\n        return FALSE\n    return TRUE\n\ndef checkTemperature(degrees):\n    if not validTemp(degrees):\n        return \"invalid temperature\"\n    if degrees < 0:\n        if degrees < -273:\n            print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Let tests help you\n\n- Write tests for each individual module\n- Use the test-writing procedure to look critically at the module's function:\n    - Is the input/output clear?\n    - What can you not yet test? Extract it into a new module.\n\n"}