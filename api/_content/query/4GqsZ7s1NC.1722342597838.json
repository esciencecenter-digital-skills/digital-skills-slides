[{"_path":"/modules/good-practices-lesson/info","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Info","description":"","type":"info","order":0,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"good-practices-in-research-software-development"},"children":[{"type":"text","value":"Good Practices in Research Software development"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The key objective of this workshop is to grow researchers' software skills necessary to apply good practices that enable open and reproducible research.\nThe workshop focuses on building modular, reusable, maintainable, sustainable, reproducible, testable, and robust software.\nThis will allow you to more easily organize, maintain and share your data.\nThe participants should be familiar with programming and regularly write code for their research, but no extensive expertise or knowledge of specific tools are required.\nThe main themes that are addressed are generically applicable, but please note that a lot of the exercises and demonstrations are in Python."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This workshop is inspired by and based on "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.org/lessons/","rel":["nofollow"]},"children":[{"type":"text","value":"CodeRefinery"}]},{"type":"text","value":" training materials."}]},{"type":"element","tag":"h2","props":{"id":"the-content"},"children":[{"type":"text","value":"The content"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This website hosts only the slides for the workshop. For the lesson content and exercises, see this "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/good-practices-lesson/","rel":["nofollow"]},"children":[{"type":"text","value":"workbench lesson"}]},{"type":"text","value":" or associated "},{"type":"element","tag":"a","props":{"href":"https://github.com/esciencecenter-digital-skills/good-practices-lesson","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub repository"}]},{"type":"text","value":"."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"good-practices-in-research-software-development","depth":2,"text":"Good Practices in Research Software development"},{"id":"the-content","depth":2,"text":"The content"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:info.md","_source":"local_fs","_file":"modules/good-practices-lesson/info.md","_extension":"md","plainText":"---\ntitle: Info\ntype: info\norder: 0\n---\n\n## Good Practices in Research Software development\nThe key objective of this workshop is to grow researchers' software skills necessary to apply good practices that enable open and reproducible research. \nThe workshop focuses on building modular, reusable, maintainable, sustainable, reproducible, testable, and robust software. \nThis will allow you to more easily organize, maintain and share your data. \nThe participants should be familiar with programming and regularly write code for their research, but no extensive expertise or knowledge of specific tools are required. \nThe main themes that are addressed are generically applicable, but please note that a lot of the exercises and demonstrations are in Python.\n\nThis workshop is inspired by and based on [CodeRefinery](https://coderefinery.org/lessons/) training materials.\n\n## The content\nThis website hosts only the slides for the workshop. For the lesson content and exercises, see this [workbench lesson](https://esciencecenter-digital-skills.github.io/good-practices-lesson/) or associated [GitHub repository](https://github.com/esciencecenter-digital-skills/good-practices-lesson)."},{"_path":"/modules/good-practices-lesson/good-practices-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Good Practices","description":"Getting more professional","type":"slides","order":1,"author":"Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"good-practices-for-research-software-development"},"children":[{"type":"text","value":"Good Practices for Research Software Development"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"\n\n/* Blockquote main style */\n.blockquote {\n    position: relative;\n    font-weight: 800;\n    padding: 30px 0;\n    width: 100%;\n    max-width: 500px;\n    z-index: 1;\n    margin: 80px auto;\n    align-self: center;\n    border-top: solid 1px;\n    border-bottom: solid 1px;\n}\n\n/* Blockquote header */\n.blockquote h1 {\n    position: relative;\n    font-size: small;\n    font-weight: 800;\n    line-height: 1;\n    margin: 0;\n}\n\n/* Blockquote right double quotes */\n.blockquote:after {\n    position: absolute;\n    content: \"‚Äù\";\n    font-size: 10rem;\n    line-height: 0;\n    bottom: -43px;\n    right: 30px;\n}\n\n/* increase header size after 600px */\n@media all and (min-width: 600px) {\n    .blockquote h1 {\n        font-size: 60px;\n   }\n\n}\n\n/* Blockquote subheader */\n.blockquote h4 {\n    position: relative;\n    font-size: 1.4rem;\n    font-weight: normal;\n    line-height: 1;\n    margin: 0;\n    padding-top: 20px;\n    z-index: 1;\n}\n\n"}]},{"type":"element","tag":"h2","props":{"id":"programming-vs-software-engineering"},"children":[{"type":"text","value":"Programming vs Software Engineering"}]},{"type":"element","tag":"div","props":{"className":["blockquote-wrapper","fragment"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["blockquote"]},"children":[{"type":"text","value":"\n      Software engineering is programming integrated over time.\n    "},{"type":"element","tag":"h4","props":{"id":"titus-winters-google-c-devlead"},"children":[{"type":"text","value":"‚ÄîTitus Winters, Google C++ devlead"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:\nWhat's the difference between programming and software engineering?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"img","props":{"width":800,"alt":"development speed","src":"./media/good-practices/development-speed.svg"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"development-speed"},"children":[{"type":"text","value":"Development Speed ‚ö°"}]},{"type":"element","tag":"div","props":{"style":"float: left;"},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Red curve\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Writing code"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Blue curve\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version Control"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Collaborative development"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code review"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modular code"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Documentation"}]},{"type":"text","value":"\n  "}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"projects-are-different"},"children":[{"type":"text","value":"Projects are Different"}]},{"type":"element","tag":"img","props":{"style":"height: 70vh; aspect-ratio: 1954/1361;","src":"/modules/good-practices-lesson/media/good-practices/branching.png"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-to-use-when"},"children":[{"type":"text","value":"What to Use When?"}]},{"type":"element","tag":"div","props":{"style":"width: 49%; float: left; font-size: smaller;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"‚è±Ô∏è¬†lifetime"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"use"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"1-shot"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"üö´"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"week+"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"Git & GitHub"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"3 months+"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"Testing"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"6 months+"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"Documentation,"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"automate testing"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"div","props":{"style":"width: 49%; float: right; font-size: smaller;","className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"üßëüßë¬†users"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"use"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"6"},"children":[{"type":"text","value":"Push to main"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"2+"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"7"},"children":[{"type":"text","value":"Branches, merging"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"2+ (+students)"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"8"},"children":[{"type":"text","value":"Code review"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"2+ (+external)"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"td","props":{"className":["fragment"],"dataFragmentIndex":"9"},"children":[{"type":"text","value":"Release branch, "},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"& everything else"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Train these tools"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Experience their effect"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use own judgement, but"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"avoid \"but in my project...\""}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"good-practices-are-investments"},"children":[{"type":"text","value":"Good practices are investments"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Profits come in"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Development efficiency"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reproducibility"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reusability"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Faster debugging"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Robustness, fewer errors"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fewer headaches!"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"programming-vs-software-engineering","depth":2,"text":"Programming vs Software Engineering"},{"id":"development-speed","depth":2,"text":"Development Speed ‚ö°"},{"id":"projects-are-different","depth":2,"text":"Projects are Different"},{"id":"what-to-use-when","depth":2,"text":"What to Use When?"},{"id":"good-practices-are-investments","depth":2,"text":"Good practices are investments"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:good-practices-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/good-practices-slides.md","_extension":"md","plainText":"---\ntitle: Good Practices\ntype: slides\norder: 1\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Good Practices for Research Software Development\n\nnote: \n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n<style>\n\n/* Blockquote main style */\n.blockquote {\n    position: relative;\n    font-weight: 800;\n    padding: 30px 0;\n    width: 100%;\n    max-width: 500px;\n    z-index: 1;\n    margin: 80px auto;\n    align-self: center;\n    border-top: solid 1px;\n    border-bottom: solid 1px;\n}\n\n/* Blockquote header */\n.blockquote h1 {\n    position: relative;\n    font-size: small;\n    font-weight: 800;\n    line-height: 1;\n    margin: 0;\n}\n\n/* Blockquote right double quotes */\n.blockquote:after {\n    position: absolute;\n    content: \"‚Äù\";\n    font-size: 10rem;\n    line-height: 0;\n    bottom: -43px;\n    right: 30px;\n}\n\n/* increase header size after 600px */\n@media all and (min-width: 600px) {\n    .blockquote h1 {\n        font-size: 60px;\n   }\n\n}\n\n/* Blockquote subheader */\n.blockquote h4 {\n    position: relative;\n    font-size: 1.4rem;\n    font-weight: normal;\n    line-height: 1;\n    margin: 0;\n    padding-top: 20px;\n    z-index: 1;\n}\n\n</style>\n\n\n## Programming vs Software Engineering\n\n<div class=\"blockquote-wrapper fragment\">\n  <div class=\"blockquote\">\n      Software engineering is programming integrated over time.\n    <h4>&mdash;Titus Winters, Google C++ devlead</h4>\n  </div>\n</div>\n\nNote:\nWhat's the difference between programming and software engineering?\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n<img width=\"800\" alt=\"development speed\" src=\"./media/good-practices/development-speed.svg\">\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Development Speed ‚ö°\n\n<div style=\"float: left;\">\n<ul>\n  <li>Red curve\n  <ul>\n    <li>Writing code</li>\n  </ul>\n  <li>Blue curve\n  <ul>\n    <li>Version Control</li>\n    <li>Collaborative development</li>\n    <li>Code review</li>\n    <li>Testing</li>\n    <li>Modular code</li>\n    <li>Documentation</li>\n  </ul>\n</ul>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Projects are Different\n\n<img style=\"height: 70vh;\" src=\"./media/good-practices/branching.png\"/>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What to Use When?\n\n<div style=\"width: 49%; float: left; font-size: smaller;\">\n  <table>\n    <tr>\n      <th>‚è±Ô∏è&nbsp;lifetime</th>\n      <th>use</th>\n    </tr>\n    <tr>\n      <td>1-shot</td>\n      <td class=\"fragment\" data-fragment-index=\"1\">üö´</td>\n    </tr>\n    <tr>\n      <td>week+</td>\n      <td class=\"fragment\" data-fragment-index=\"2\">Git &amp; GitHub</td>\n    </tr>\n    <tr>\n      <td>3 months+</td>\n      <td class=\"fragment\" data-fragment-index=\"3\">Testing</td>\n    </tr>\n    <tr>\n      <td>6 months+</td>\n      <td class=\"fragment\" data-fragment-index=\"4\">Documentation,<br>automate testing</td>\n    </tr>\n  </table>\n</div>\n\n<div style=\"width: 49%; float: right; font-size: smaller;\" class=\"fragment\" data-fragment-index=\"5\">\n  <table>\n    <tr>\n      <th>üßëüßë&nbsp;users</th>\n      <th>use</th>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td class=\"fragment\" data-fragment-index=\"6\">Push to main</td>\n    </tr>\n    <tr>\n      <td>2+</td>\n      <td class=\"fragment\" data-fragment-index=\"7\">Branches, merging</td>\n    </tr>\n    <tr>\n      <td>2+ (+students)</td>\n      <td class=\"fragment\" data-fragment-index=\"8\">Code review</td>\n    </tr>\n    <tr>\n      <td>2+ (+external)</td>\n      <td class=\"fragment\" data-fragment-index=\"9\">Release branch, <br>&amp; everything else</td>\n    </tr>\n  </table>\n</div>\n\nNote:\n- Train these tools\n- Experience their effect\n- Use own judgement, but\n- avoid \"but in my project...\"\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Good practices are investments\n\nProfits come in\n\n- Development efficiency\n- Reproducibility\n- Reusability\n- Faster debugging\n- Robustness, fewer errors\n- Fewer headaches!"},{"_path":"/modules/good-practices-lesson/modular-code-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Modular Code","description":"Day 3 Code Refinery","type":"slides","order":2,"author":"Barbara Vreede, Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"developing-modular-code"},"children":[{"type":"text","value":"Developing Modular Code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-is-modularity"},"children":[{"type":"text","value":"What is modularity?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Software is 'built up' from smaller elements"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Elements are self-contained and independent"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Each element handles a specific (set of) task(s)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Simple components"}]},{"type":"text","value":" build "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"complex behavior"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"modular-code"},"children":[{"type":"text","value":"Modular code"}]},{"type":"element","tag":"img","props":{"width":900,"alt":"think in building blocks","src":"https://user-images.githubusercontent.com/5747405/207459058-59c88b4c-1401-428f-b28a-0ac3e72bd964.png"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-are-these-blockselements"},"children":[{"type":"text","value":"What are these blocks/elements?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"functions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"classes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"modules"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"libraries/packages"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"programs"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To increase robustness:"}]},{"type":"element","tag":"img","props":{"width":200,"alt":"testing a single module","src":"./media/modular-code/testing_module.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A well-designed module can be tested."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This helps keep the codebase well-functioning and bug-free."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-1"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To make maintenance easier:"}]},{"type":"element","tag":"img","props":{"width":300,"alt":"testing a module taken from a larger project","src":"./media/modular-code/testing_module_maintenance.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modular code is more readable and understandable."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules can be debugged separately."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-2"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To allow reusability:"}]},{"type":"element","tag":"img","props":{"width":400,"alt":"reuse a module in another project","src":"./media/modular-code/reuse_module.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A module can live independent of its original context"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"It can be reused by another project"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-3"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To facilitate scalability:"}]},{"type":"element","tag":"img","props":{"height":300,"alt":"scalability","src":"./media/modular-code/scalability.png"},"children":[]},{"type":"element","tag":"div","props":{},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Complexity remains low by design"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This creates space for scaling up"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-4"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create opportunities for innovation:"}]},{"type":"element","tag":"img","props":{"height":300,"alt":"tetris shows innovation","src":"./media/modular-code/tetris_innovation.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules increase the capabilities and power of a project"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rearrange old modules for new applications"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"img","props":{"width":800,"alt":"development speed","src":"./media/modular-code/development-speed.svg"},"children":[]},{"type":"element","tag":"h2","props":{"id":"a-good-module"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is readable"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"readability-shorter-code"},"children":[{"type":"text","value":"Readability =/= shorter code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Shorter:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"More modular:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(li) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(li) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module-1"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is readable"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is pure/does not have a 'state'"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-pure-function"},"children":[{"type":"text","value":"A pure function"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"has no side-effects:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def fahrenheit_to_celsius(temp_f):\n    temp_c = (temp_f - 32.0) * (5.0/9.0)\n    return temp_c\n\n>>> temp_c = fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def fahrenheit_to_celsius(temp_f):\n    temp_c = (temp_f - 32.0) * (5.0/9.0)\n    return temp_c\n\n>>> temp_c = fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-stateful-function"},"children":[{"type":"text","value":"A stateful function"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"changes its environment:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def fahrenheit_to_celsius(temp_f):\n    global temp_c\n    temp_c = (temp_f - f_to_c_offset) * f_to_c_factor\n\n>>> f_to_c_offset = 32.0\n>>> f_to_c_factor = (5.0/9.0)\n>>> temp_c = 0.0\n>>> print(temp_c)\n0.0\n>>> fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def fahrenheit_to_celsius(temp_f):\n    global temp_c\n    temp_c = (temp_f - f_to_c_offset) * f_to_c_factor\n\n>>> f_to_c_offset = 32.0\n>>> f_to_c_factor = (5.0/9.0)\n>>> temp_c = 0.0\n>>> print(temp_c)\n0.0\n>>> fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"focus-on-readability"},"children":[{"type":"text","value":"Focus on readability"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modular code becomes more readable"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code is read more than it is written"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Does a reader understand what the code does?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Bad readability can be a \"code smell\""}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identify-future-functions"},"children":[{"type":"text","value":"Identify future functions"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Don't Repeat Yourself (DRY): place reused code into a function"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify potential functions by their "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"action"}]},{"type":"text","value":"\n(e.g. \"plotting\", \"transforming\", \"extracting\", \"saving\")"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"target-nested-code"},"children":[{"type":"text","value":"Target nested code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nested code is a prime target for modularization:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def checkTemperature(degrees):\n    if degrees < 0:\n        if degrees < -273:\n            if degrees < -459:\n                print(\"This temperature is impossible.\")\n            else:\n                print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def checkTemperature(degrees):\n    if degrees < 0:\n        if degrees < -273:\n            if degrees < -459:\n                print(\"This temperature is impossible.\")\n            else:\n                print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"reduce-nestedness"},"children":[{"type":"text","value":"Reduce nestedness"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"by extracting modules:"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def validTemp(degrees):\n    if degrees < -459:\n        return FALSE\n    return TRUE\n\ndef checkTemperature(degrees):\n    if not validTemp(degrees):\n        return \"invalid temperature\"\n    if degrees < 0:\n        if degrees < -273:\n            print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def validTemp(degrees):\n    if degrees < -459:\n        return FALSE\n    return TRUE\n\ndef checkTemperature(degrees):\n    if not validTemp(degrees):\n        return \"invalid temperature\"\n    if degrees < 0:\n        if degrees < -273:\n            print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"let-tests-help-you"},"children":[{"type":"text","value":"Let tests help you"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Write tests for each individual module"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use the test-writing procedure to look critically at the module's function:\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Is the input/output clear?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What can you not yet test? Extract it into a new module."}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-modularity","depth":2,"text":"What is modularity?"},{"id":"modular-code","depth":2,"text":"Modular code"},{"id":"what-are-these-blockselements","depth":2,"text":"What are these blocks/elements?"},{"id":"why-write-modular-code","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-1","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-2","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-3","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-4","depth":2,"text":"Why write modular code?"},{"id":"a-good-module","depth":2,"text":"A good module..."},{"id":"readability-shorter-code","depth":2,"text":"Readability =/= shorter code"},{"id":"a-good-module-1","depth":2,"text":"A good module..."},{"id":"a-pure-function","depth":2,"text":"A pure function"},{"id":"a-stateful-function","depth":2,"text":"A stateful function"},{"id":"identifying-opportunities-for-modularization","depth":2,"text":"Identifying opportunities for modularization"},{"id":"focus-on-readability","depth":2,"text":"Focus on readability"},{"id":"identify-future-functions","depth":2,"text":"Identify future functions"},{"id":"target-nested-code","depth":2,"text":"Target nested code"},{"id":"reduce-nestedness","depth":2,"text":"Reduce nestedness"},{"id":"let-tests-help-you","depth":2,"text":"Let tests help you"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:modular-code-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/modular-code-slides.md","_extension":"md","plainText":"---\ntitle: Modular Code\ntype: slides\norder: 2\nauthor: Barbara Vreede, Ole Mussmann\ndescription: Day 3 Code Refinery\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Developing Modular Code\n\nnote: \n\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## What is modularity?\n\n- Software is 'built up' from smaller elements\n- Elements are self-contained and independent\n- Each element handles a specific (set of) task(s)\n\n**Simple components** build **complex behavior**.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Modular code\n\n<img width=\"900\" alt=\"think in building blocks\" src=\"https://user-images.githubusercontent.com/5747405/207459058-59c88b4c-1401-428f-b28a-0ac3e72bd964.png\">\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What are these blocks/elements?\n\n- functions\n- classes\n- modules\n- libraries/packages\n- programs\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo increase robustness:\n\n<img width=\"200\" alt=\"testing a single module\" src=\"./media/modular-code/testing_module.png\">\n\n- A well-designed module can be tested.\n- This helps keep the codebase well-functioning and bug-free.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo make maintenance easier:\n\n<img width=\"300\" alt=\"testing a module taken from a larger project\" src=\"./media/modular-code/testing_module_maintenance.png\">\n\n- Modular code is more readable and understandable.\n- Modules can be debugged separately.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo allow reusability:\n\n<img width=\"400\" alt=\"reuse a module in another project\" src=\"./media/modular-code/reuse_module.png\">\n\n- A module can live independent of its original context\n- It can be reused by another project\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo facilitate scalability:\n\n<img height=\"300\" alt=\"scalability\" src=\"./media/modular-code/scalability.png\">\n\n\n<div>\n\n- Complexity remains low by design\n- This creates space for scaling up\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo create opportunities for innovation:\n\n<img height=\"300\" alt=\"tetris shows innovation\" src=\"./media/modular-code/tetris_innovation.png\">\n\n- Modules increase the capabilities and power of a project\n- Rearrange old modules for new applications\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n<img width=\"800\" alt=\"development speed\" src=\"./media/modular-code/development-speed.svg\">\n\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n- performs limited and clearly defined tasks\n- has a good name\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- is readable\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Readability =/= shorter code\n\nShorter:\n```python=\nindexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n```\n\nMore modular:\n```python=\ndef getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(li) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n- performs limited and clearly defined tasks\n- has a good name\n- is readable\n- is pure/does not have a 'state'\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A pure function\n\nhas no side-effects:\n\n```python=\ndef fahrenheit_to_celsius(temp_f):\n    temp_c = (temp_f - 32.0) * (5.0/9.0)\n    return temp_c\n\n>>> temp_c = fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A stateful function\n\nchanges its environment:\n\n```python=\ndef fahrenheit_to_celsius(temp_f):\n    global temp_c\n    temp_c = (temp_f - f_to_c_offset) * f_to_c_factor\n\n>>> f_to_c_offset = 32.0\n>>> f_to_c_factor = (5.0/9.0)\n>>> temp_c = 0.0\n>>> print(temp_c)\n0.0\n>>> fahrenheit_to_celsius(temp_f=77.0)\n>>> print(temp_c)\n25.0\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Focus on readability\n\n- Modular code becomes more readable\n- Code is read more than it is written\n- Does a reader understand what the code does?\n- Bad readability can be a \"code smell\"\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identify future functions\n\n- Don't Repeat Yourself (DRY): place reused code into a function\n- Identify potential functions by their _action_\n    (e.g. \"plotting\", \"transforming\", \"extracting\", \"saving\")\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Target nested code\n\nNested code is a prime target for modularization:\n\n```python=\ndef checkTemperature(degrees):\n    if degrees < 0:\n        if degrees < -273:\n            if degrees < -459:\n                print(\"This temperature is impossible.\")\n            else:\n                print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Reduce nestedness\n\nby extracting modules:\n\n```python=\ndef validTemp(degrees):\n    if degrees < -459:\n        return FALSE\n    return TRUE\n\ndef checkTemperature(degrees):\n    if not validTemp(degrees):\n        return \"invalid temperature\"\n    if degrees < 0:\n        if degrees < -273:\n            print(\"This temperature is likely Fahrenheit.\")\n        else:\n            print(\"This temperature is either Celsius or Fahrenheit.\")\n    else:\n        print(\"This temperature is in Kelvin, Celsius, or Fahrhenheit.\")\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Let tests help you\n\n- Write tests for each individual module\n- Use the test-writing procedure to look critically at the module's function:\n    - Is the input/output clear?\n    - What can you not yet test? Extract it into a new module.\n\n"},{"_path":"/modules/good-practices-lesson/documentation-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Documentation","description":"Day 3 Code Refinery","type":"slides","order":3,"author":"Luisa Orozco, Barbara Vreede","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"documentation"},"children":[{"type":"text","value":"Documentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"img","props":{"style":"height: 550px;","src":"./files/paint.png"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"examples-of-documentation"},"children":[{"type":"text","value":"Examples of documentation"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Think of projects with good documentation.\n"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"What do you like about them?"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Think of projects with less good documentation.\n"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"What don't you like about them? Are you missing anything?"}]}]}]},{"type":"element","tag":"quotation","props":{},"children":[{"type":"text","value":"\nNB: You can choose a mature library with lots of users, but try to also think of less mature projects you had to collaborate on, or papers you had to reproduce.\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"types-of-documentation"},"children":[{"type":"text","value":"Types of documentation"}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"README files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"In-code documentation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"API documentation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Tutorials"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"..."}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-readme-file"},"children":[{"type":"text","value":"A good README file"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"README file is first thing a user/collaborator sees"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What should be included in README files?"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"contentEditable":"true"},"children":[{"type":"text","value":"..."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A descriptive project title"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Motivation (why the project exists) and basics"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Installation / How to setup"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Copy-pasteable quick start code example"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Usage reference (if not elsewhere)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Recommended citation if someone uses it"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Other related tools (\"see also\")"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Contact information for the developer(s)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"License information"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Contributing guidelines"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-in-code-documentation"},"children":[{"type":"text","value":"Why write in-code documentation?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In-code documentation:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Makes code more understandable"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Explains decisions we made"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"when-not-to-use-in-code-documentation"},"children":[{"type":"text","value":"When "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" to use in-code documentation?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When the code is self-explanatory"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"To replace good variable/function names"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"To replace version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"To keep old (zombie) code around"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"readable-code-vs-commented-code"},"children":[{"type":"text","value":"Readable code vs commented code"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"# convert from degrees celsius to fahrenheit\ndef convert(d):\n    return d * 5 / 9 + 32\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# convert from degrees celsius to fahrenheit\ndef convert(d):\n    return d * 5 / 9 + 32\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"vs"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def celsius_to_fahrenheit(degrees):\n    return degrees * 5 / 9 + 32\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def celsius_to_fahrenheit(degrees):\n    return degrees * 5 / 9 + 32\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-makes-a-good-comment"},"children":[{"type":"text","value":"What makes a good comment?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Comment A"}]}]},{"type":"element","tag":"pre","props":{"dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["python"]},"children":[{"type":"text","value":"\n# Now we check if temperature is larger than -50:\nif temperature > -50:\n    print('do something')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Comment B"}]}]},{"type":"element","tag":"pre","props":{"dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["python"]},"children":[{"type":"text","value":"\n# We regard temperatures below -50 degrees as measurement errors\nif temperature > -50:\n    print('do something')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"How are these different? Which one do you prefer?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"docstrings-a-special-kind-of-comment"},"children":[{"type":"text","value":"Docstrings: a special kind of comment"}]},{"type":"element","tag":"pre","props":{"className":["language-python="],"code":"def celsius_to_fahrenheit(degrees):\n  \"\"\"Convert degrees Celsius to degrees Fahrenheit.\"\"\"\n  return degrees * 5 / 9 + 32\n","language":"python=","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def celsius_to_fahrenheit(degrees):\n  \"\"\"Convert degrees Celsius to degrees Fahrenheit.\"\"\"\n  return degrees * 5 / 9 + 32\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Why is this OK?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note:\nDocstrings can be used to generate user documentation.\nThey are accessible outside the code.\nThey follow a standardized syntax."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"in-code-commenting-key-points"},"children":[{"type":"text","value":"In-code commenting: key points"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Explicit, descriptive naming already provides important documentation."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Comments should describe the why for your code, not the what."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Writing docstrings is an easy way to write documentation while you code, as they are accessible outside the code itself."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"userapi-documentation"},"children":[{"type":"text","value":"User/API documentation"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What if a README file is not enough?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How do I easily create user documentation?"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"tools"},"children":[{"type":"text","value":"Tools"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Sphinx"}]},{"type":"text","value":" (documentation generator)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"creates nicely-formatted HTML pages out of .md or .rst files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"programming language independent"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Github pages"}]},{"type":"text","value":" (deploy your documentation)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"set up inside your GitHub repository"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"automatically deploys your Sphinx-generated documentation"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-home-message"},"children":[{"type":"text","value":"Take-home message"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Depending on the purpose and state of the project documentation needs to meet different criteria."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Documentation can take different shapes:\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Readable code"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"In-code comments"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Docstrings"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"README files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Tutorials/notebooks"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Documentation is a vital part of a project, and should be kept and created alongside the corresponding code."}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"examples-of-documentation","depth":2,"text":"Examples of documentation"},{"id":"types-of-documentation","depth":2,"text":"Types of documentation"},{"id":"a-good-readme-file","depth":2,"text":"A good README file"},{"id":"why-write-in-code-documentation","depth":2,"text":"Why write in-code documentation?"},{"id":"when-not-to-use-in-code-documentation","depth":2,"text":"When not to use in-code documentation?"},{"id":"readable-code-vs-commented-code","depth":2,"text":"Readable code vs commented code"},{"id":"what-makes-a-good-comment","depth":2,"text":"What makes a good comment?"},{"id":"docstrings-a-special-kind-of-comment","depth":2,"text":"Docstrings: a special kind of comment"},{"id":"in-code-commenting-key-points","depth":2,"text":"In-code commenting: key points"},{"id":"userapi-documentation","depth":2,"text":"User/API documentation"},{"id":"tools","depth":2,"text":"Tools"},{"id":"take-home-message","depth":2,"text":"Take-home message"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:documentation-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/documentation-slides.md","_extension":"md","plainText":"---\ntitle: Documentation\ntype: slides\norder: 3\nauthor: Luisa Orozco, Barbara Vreede\ndescription: Day 3 Code Refinery\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Documentation\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n<img style=\"height: 550px;\" src=\"./files/paint.png\"/>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Examples of documentation\n\n+ Think of projects with good documentation.\n      _What do you like about them?_\n+ Think of projects with less good documentation.\n      _What don't you like about them? Are you missing anything?_\n\n<quotation>NB: You can choose a mature library with lots of users, but try to also think of less mature projects you had to collaborate on, or papers you had to reproduce.</quotation>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Types of documentation\n\n<div class=\"fragment\">\n\n+ README files\n+ In-code documentation\n+ API documentation\n+ Tutorials\n+ ...\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good README file\n\n+ README file is first thing a user/collaborator sees\n+ What should be included in README files?\n<ul>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n</ul>\n\n\nNote:\n+ A descriptive project title\n+ Motivation (why the project exists) and basics\n+ Installation / How to setup\n+ Copy-pasteable quick start code example\n+ Usage reference (if not elsewhere)\n+ Recommended citation if someone uses it\n+ Other related tools (\"see also\")\n+ Contact information for the developer(s)\n+ License information\n+ Contributing guidelines\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write in-code documentation?\n\nIn-code documentation:\n\n+ Makes code more understandable\n+ Explains decisions we made\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## When **not** to use in-code documentation?\n\n+ When the code is self-explanatory\n+ To replace good variable/function names\n+ To replace version control\n+ To keep old (zombie) code around\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Readable code vs commented code\n\n```python=\n# convert from degrees celsius to fahrenheit\ndef convert(d):\n    return d * 5 / 9 + 32\n```\nvs\n```python=\ndef celsius_to_fahrenheit(degrees):\n    return degrees * 5 / 9 + 32\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## What makes a good comment?\n\n**Comment A**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# Now we check if temperature is larger than -50:\nif temperature > -50:\n    print('do something')\n</code></pre>\n\n**Comment B**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# We regard temperatures below -50 degrees as measurement errors\nif temperature > -50:\n    print('do something')\n</code></pre>\n\nHow are these different? Which one do you prefer?\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Docstrings: a special kind of comment\n\n```python=\ndef celsius_to_fahrenheit(degrees):\n  \"\"\"Convert degrees Celsius to degrees Fahrenheit.\"\"\"\n  return degrees * 5 / 9 + 32\n```\n\nWhy is this OK?\n\nNote:\nDocstrings can be used to generate user documentation.\nThey are accessible outside the code.\nThey follow a standardized syntax.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## In-code commenting: key points\n\n+ Explicit, descriptive naming already provides important documentation.\n+ Comments should describe the why for your code, not the what.\n+ Writing docstrings is an easy way to write documentation while you code, as they are accessible outside the code itself.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## User/API documentation\n\n+ What if a README file is not enough?\n+ How do I easily create user documentation?\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Tools\n\n+ **Sphinx** (documentation generator)\n  - creates nicely-formatted HTML pages out of .md or .rst files\n  - programming language independent\n+ **Github pages** (deploy your documentation)\n  - set up inside your GitHub repository\n  - automatically deploys your Sphinx-generated documentation\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-home message\n\n+ Depending on the purpose and state of the project documentation needs to meet different criteria.\n+ Documentation can take different shapes:\n  + Readable code\n  + In-code comments\n  + Docstrings\n  + README files\n  + Tutorials/notebooks\n+ Documentation is a vital part of a project, and should be kept and created alongside the corresponding code."},{"_path":"/modules/good-practices-lesson/testing-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Testing","description":"Getting more professional","type":"slides","order":4,"author":"Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"testing"},"children":[{"type":"text","value":"Testing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-test"},"children":[{"type":"text","value":"Why Test?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Preserve functionality\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Detect new errors early"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Facilitate reproducibility for research software"}]},{"type":"text","value":"\n  "}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Help users\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Verify correct installation"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Improve correctness for research output"}]},{"type":"text","value":"\n  "}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Enable developers\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Make refactoring easier"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Simplify external contributions"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"h3","props":{"style":"margin-top: 1em;","className":["fragment"],"id":"manage-complexity"},"children":[{"type":"text","value":"üßÆ Manage Complexity üß©"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test-types"},"children":[{"type":"text","value":"Test Types"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Unit test\n  "},{"type":"element","tag":"ul","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Smallest possible unit"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"No dependency on outside code..."}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"(... replace them with mocks, stubs, etc.)"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"ul","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Integration test\n  "},{"type":"element","tag":"ul","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Test unit interaction"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Can be on small scales, or system wide"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"div","props":{"className":["fragment","fade-up"],"dataFragmentIndex":"4","style":"position:relative; padding: 0 0 calc(55.00% + 44px) 0; margin: -9em auto 0 auto;"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"how-much-testing-is-enough"},"children":[{"type":"text","value":"How much testing is enough?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Test metrics:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"lines of code : lines of tests (target: 1:3)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"test coverage "},{"type":"element","tag":"a","props":{"href":"https://sonarcloud.io/component_measures?id=eWaterCycle_ewatercycle&metric=coverage&view=treemap&selected=eWaterCycle_ewatercycle%3Aewatercycle","rel":["nofollow"]},"children":[{"type":"text","value":"example"}]},{"type":"text","value":" (target: >= 80%)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Targets are defined as "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"necessary"}]},{"type":"text","value":", but "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"not sufficient"}]},{"type":"text","value":" goals."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"pytest"},"children":[{"type":"text","value":"PyTest"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"recommended python testing framework"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.pytest.org/en/7.3.x/","rel":["nofollow"]},"children":[{"type":"text","value":"docs.pytest.org"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":".files/pytest_logo.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"write-code"},"children":[{"type":"text","value":"Write Code"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["bash"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\n$ mkdir pytest-example\n$ cd pytest-example\n"}]}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\nCreating a file "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"example.py"}]},{"type":"text","value":" containing\n"},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef add(a, b):\n    return a + b\n¬†\n¬†\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? ü§î\n    assert add('space', 'ship') == 'spaceship'\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"text","value":"\nChat with the python shell about "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"assert"}]},{"type":"text","value":" ...\n"}]},{"type":"element","tag":"div","props":{"className":["fragment"]},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAssertionError\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"test"},"children":[{"type":"text","value":"Test!"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["bash"],"dataLineNumbers":"1|1-9"},"children":[{"type":"text","value":"\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"breaking-things"},"children":[{"type":"text","value":"Breaking Things"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden;","dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef add(a, b):\n    return a - b  # Uh oh, mistake! üò±\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"testing-again"},"children":[{"type":"text","value":"Testing Again"}]},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","dataTrim":"","className":["bash"],"dataLineNumbers":"1|2-8|9-17|18-20"},"children":[{"type":"text","value":"\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"üöÄ‚ùì"},{"type":"element","tag":"span","props":{"className":["fragment"]},"children":[{"type":"text","value":"Functions fail on first error"}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"But all test functions are executed"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pytest collects and runs all test functions starting with "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test_"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The tests pass when they do not throw (assertion) errors"}]}]},{"type":"element","tag":"pre","props":{"style":"width: max-content;"},"children":[{"type":"element","tag":"code","props":{"style":"overflow: hidden;","className":["python"],"dataTrim":"","dataLineNumbers":""},"children":[{"type":"text","value":"\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"recap-pure-functions"},"children":[{"type":"text","value":"Recap: pure functions"}]},{"type":"element","tag":"div","props":{"style":"width: 59%; float: left;"},"children":[{"type":"element","tag":"ul","props":{"style":"margin-top: 1ex;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Are deterministic"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Have a return value"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Have no side effects"},{"type":"element","tag":"sup","props":{},"children":[{"type":"text","value":"[1]"}]}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Have referential transparency"},{"type":"element","tag":"sup","props":{},"children":[{"type":"text","value":"[2]"}]}]},{"type":"element","tag":"ul","props":{},"children":[]}]}]},{"type":"element","tag":"div","props":{"style":"width: 39%; float: right;"},"children":[{"type":"element","tag":"pre","props":{"className":["fragment"],"style":"width: max-content;","dataId":"code-animation"},"children":[{"type":"element","tag":"code","props":{"className":["python"],"style":"overflow: hidden; padding-left: 1em; padding-right: 1em;","dataTrim":"","dataNoescape":"","dataLineNumbers":"1-2|1-6|4-8"},"children":[{"type":"text","value":"\ndef last(my_array):\n    return my_array[-1]\n¬†\ndef add(a, b):\n    return a + b\n¬†\nprint(add(1, 2))\nprint(3)\n"}]}]}]},{"type":"element","tag":"h4","props":{"className":["fragment"],"style":"width: 100%; float: left; margin-top: 1em;","id":"pure-functions-are-easy-to-understand-and-test"},"children":[{"type":"text","value":"Pure functions are easy to understand and test!"}]},{"type":"element","tag":"footer","props":{},"children":[{"type":"text","value":"\n[1] Side effects: interactions of a function with its surroundings\n"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n[2] Replacing a function call with the return of that function should not change anything\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away-1"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use pure functions when possible üëå"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing does not have to be hard üëè\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You test anyways, but then throw the test away üßê"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You don't have to strive for üíØ% test coverage"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Aim for a balance between unit- and integration tests ‚öñÔ∏è"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Testing removes the dread of refactoring üîÅ"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Your future you (and others!) will thank you üôè"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"test-driven-development-fizzbuzz-function"},"children":[{"type":"text","value":"Test-Driven Development: FizzBuzz Function"}]},{"type":"element","tag":"div","props":{"className":["r-stack"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/testing/fizz_buzz_1.svg","style":{"aspectRatio":"791/265"}},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"1","src":"./media/testing/fizz_buzz_2.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"2","src":"./media/testing/fizz_buzz_3.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"3","src":"./media/testing/fizz_buzz_4.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"4","src":"./media/testing/fizz_buzz_5.svg"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"className":["fragment"],"dataFragmentIndex":"5","src":"./media/testing/fizz_buzz_6.svg"},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fizz_buzz() takes an integer argument and returns it, BUT"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"fails on zero or negative numbers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"instead returns \"Fizz\" on multiples of 3"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"instead returns \"Buzz\" on multiples of 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"instead returns \"FizzBuzz\" on multiples of 3 and 5"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"fizzbuzz-function"},"children":[{"type":"text","value":"FizzBuzz Function"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fizz_buzz() takes an integer argument and returns it, BUT"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fails on zero or negative numbers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"instead returns \"Fizz\" on multiples of 3"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"instead returns \"Buzz\" on multiples of 5"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"instead returns \"FizzBuzz\" on multiples of 3 and 5"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Create an empty function fizz_buzz()"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Write the tests"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Paste your tests in the collab document, and discuss"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{"className":["fragment"]},"children":[{"type":"text","value":"Now write a function code to make your tests pass"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away-2"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What did you think of this style of development?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Was it easier or harder than just writing code?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Would your code look different without the tests? "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For what kind of projects would it be (not) useful? "}]}]},{"type":"element","tag":"div","props":{"className":["fragment"],"style":"width: 20vw; margin: 1em auto;"},"children":[{"type":"text","value":"Test-Driven Development (TDD) is an optional tool in your toolbox üõ†Ô∏è"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"why-test","depth":2,"text":"Why Test?","children":[{"id":"manage-complexity","depth":3,"text":"üßÆ Manage Complexity üß©"}]},{"id":"test-types","depth":2,"text":"Test Types"},{"id":"how-much-testing-is-enough","depth":2,"text":"How much testing is enough?"},{"id":"write-code","depth":2,"text":"Write Code"},{"id":"test","depth":2,"text":"Test!"},{"id":"breaking-things","depth":2,"text":"Breaking Things"},{"id":"testing-again","depth":2,"text":"Testing Again"},{"id":"take-away","depth":2,"text":"Take-away"},{"id":"take-away-1","depth":2,"text":"Take-away"},{"id":"fizzbuzz-function","depth":2,"text":"FizzBuzz Function"},{"id":"take-away-2","depth":2,"text":"Take-away"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:testing-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/testing-slides.md","_extension":"md","plainText":"---\ntitle: Testing\ntype: slides\norder: 4\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Testing\n\nnote:\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why Test?\n\n<ul>\n  <li>Preserve functionality\n  <ul>\n    <li>Detect new errors early</li>\n    <li>Facilitate reproducibility for research software</li>\n  </ul></li>\n  <li class=\"fragment\">Help users\n  <ul>\n    <li>Verify correct installation</li>\n    <li>Improve correctness for research output</li>\n  </ul></li>\n  <li class=\"fragment\">Enable developers\n  <ul>\n    <li>Make refactoring easier</li>\n    <li>Simplify external contributions</li>\n  </ul></li>\n</ul>\n\n<h3 style=\"margin-top: 1em;\" class=\"fragment\">üßÆ Manage Complexity üß©</h3>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test Types\n\n<ul>\n  <li>Unit test\n  <ul class=\"fragment fade-up\" data-fragment-index=\"1\">\n    <li>Smallest possible unit</li>\n    <li>No dependency on outside code...</li>\n    <li>(... replace them with mocks, stubs, etc.)</li>\n  </ul></li>\n</ul>\n<ul class=\"fragment fade-up\" data-fragment-index=\"2\">\n  <li>Integration test\n  <ul class=\"fragment fade-up\" data-fragment-index=\"3\">\n    <li>Test unit interaction</li>\n    <li>Can be on small scales, or system wide</li>\n  </ul></li>\n</ul>\n\n<div class=\"fragment fade-up\" data-fragment-index=\"4\" style='position:relative; padding: 0 0 calc(55.00% + 44px) 0; margin: -9em auto 0 auto;'></div><p style=\"font-size: large; margin: 0; padding: 0;\"> </p>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n\n## How much testing is enough?\n\nTest metrics:\n\n- lines of code : lines of tests (target: 1:3)\n- test coverage [example](https://sonarcloud.io/component_measures?id=eWaterCycle_ewatercycle&metric=coverage&view=treemap&selected=eWaterCycle_ewatercycle%3Aewatercycle) (target: >= 80%)\n\nTargets are defined as *necessary*, but *not sufficient* goals.\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# PyTest\n\n- recommended python testing framework\n- [docs.pytest.org](https://docs.pytest.org/en/7.3.x/)\n\n![](.files/pytest_logo.svg)\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Write Code\n\n<pre><code class=\"bash\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n$ mkdir pytest-example\n$ cd pytest-example\n</code></pre>\n\n<div class=\"fragment\">\nCreating a file <code>example.py</code> containing\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a + b\n&nbsp;\n&nbsp;\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? ü§î\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n</div>\n\n<div class=\"fragment\">\nChat with the python shell about <code>assert</code> ...\n</div>\n<div class=\"fragment\">\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test!\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|1-9\">\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Breaking Things\n\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a - b  # Uh oh, mistake! üò±\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing Again\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|2-8|9-17|18-20\">\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n</code></pre>\n\n<ul>\n  <li class=\"fragment\">üöÄ‚ùì<span class=\"fragment\">Functions fail on first error</span></li>\n  <li class=\"fragment\">But all test functions are executed</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- pytest collects and runs all test functions starting with <code>test_</code>\n- The tests pass when they do not throw (assertion) errors\n\n<pre style=\"width: max-content;\"><code style=\"overflow: hidden;\" class=\"python\" data-trim class=\"bash\" data-line-numbers>\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n</code></pre>\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# Recap: pure functions\n\n<div style=\"width: 59%; float: left;\">\n<ul style=\"margin-top: 1ex;\">\n  <li>Are deterministic</li>\n  <li>Have a return value</li>\n  <li>Have no side effects<sup>[1]</sup></li>\n  <li>Have referential transparency<sup>[2]</sup></li>\n<ul>\n</div>\n\n<div style=\"width: 39%; float: right;\">\n<pre class=\"fragment\" style=\"width: max-content;\" data-id=\"code-animation\"><code class=\"python\" style=\"overflow: hidden; padding-left: 1em; padding-right: 1em;\" data-trim data-noescape class=\"bash\" data-line-numbers=\"1-2|1-6|4-8\">\ndef last(my_array):\n    return my_array[-1]\n&nbsp;\ndef add(a, b):\n    return a + b\n&nbsp;\nprint(add(1, 2))\nprint(3)\n</code></pre>\n</div>\n\n<h4 class=\"fragment\" style=\"width: 100%; float: left; margin-top: 1em;\">Pure functions are easy to understand and test!</h4>\n\n<footer>\n[1] Side effects: interactions of a function with its surroundings\n<br>\n[2] Replacing a function call with the return of that function should not change anything\n</footer>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Use pure functions when possible üëå\n- Testing does not have to be hard üëè\n  - You test anyways, but then throw the test away üßê\n- You don't have to strive for üíØ% test coverage\n- Aim for a balance between unit- and integration tests ‚öñÔ∏è\n- Testing removes the dread of refactoring üîÅ\n- Your future you (and others!) will thank you üôè\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# Test-Driven Development: FizzBuzz Function\n\n<div class=\"r-stack\">\n  <img src=\"./media/testing/fizz_buzz_1.svg\">\n  <img class=\"fragment\" data-fragment-index=\"1\" src=\"./media/testing/fizz_buzz_2.svg\">\n  <img class=\"fragment\" data-fragment-index=\"2\" src=\"./media/testing/fizz_buzz_3.svg\">\n  <img class=\"fragment\" data-fragment-index=\"3\" src=\"./media/testing/fizz_buzz_4.svg\">\n  <img class=\"fragment\" data-fragment-index=\"4\" src=\"./media/testing/fizz_buzz_5.svg\">\n  <img class=\"fragment\" data-fragment-index=\"5\" src=\"./media/testing/fizz_buzz_6.svg\">\n</div>\n\n<ul>\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li class=\"fragment\" data-fragment-index=\"1\">fails on zero or negative numbers</li>\n    <li class=\"fragment\" data-fragment-index=\"2\">instead returns \"Fizz\" on multiples of 3</li>\n    <li class=\"fragment\" data-fragment-index=\"3\">instead returns \"Buzz\" on multiples of 5</li>\n    <li class=\"fragment\" data-fragment-index=\"5\">instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## FizzBuzz Function\n\n<ul>\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li>fails on zero or negative numbers</li>\n    <li>instead returns \"Fizz\" on multiples of 3</li>\n    <li>instead returns \"Buzz\" on multiples of 5</li>\n    <li>instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n  <li class=\"fragment\">Create an empty function fizz_buzz()</li>\n  <li class=\"fragment\">Write the tests</li>\n  <li class=\"fragment\">Paste your tests in the collab document, and discuss</li>\n  <li class=\"fragment\">Now write a function code to make your tests pass</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- What did you think of this style of development?\n- Was it easier or harder than just writing code?\n- Would your code look different without the tests? <!-- .element class=\"fragment\" -->\n- For what kind of projects would it be (not) useful? <!-- .element class=\"fragment\" -->\n\n<div class=\"fragment\" style=\"width: 20vw; margin: 1em auto;\">Test-Driven Development (TDD) is an optional tool in your toolbox üõ†Ô∏è</div>\n"},{"_path":"/modules/good-practices-lesson/ci-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"CI","description":"Day 3 Code Refinery","type":"slides","order":5,"author":"Ole Mussman","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"continuous-integration"},"children":[{"type":"text","value":"Continuous Integration"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"continuous-integration-1"},"children":[{"type":"text","value":"Continuous Integration"}]},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/ci/automate.jpg","style":{"aspectRatio":"411/318"}},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h1","props":{"id":"continuous-what-now"},"children":[{"type":"text","value":"Continuous "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"What"}]},{"type":"text","value":" Now...?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"\n\n/* Blockquote main style */\n.blockquote {\n    position: relative;\n    font-weight: 800;\n    padding: 30px 0;\n    width: 100%;\n    max-width: 500px;\n    z-index: 1;\n    margin: 80px auto;\n    align-self: center;\n    border-top: solid 1px;\n    border-bottom: solid 1px;\n}\n\n/* Blockquote header */\n.blockquote h1 {\n    position: relative;\n    font-size: small;\n    font-weight: 800;\n    line-height: 1;\n    margin: 0;\n}\n\n/* Blockquote right double quotes */\n.blockquote:after {\n    position: absolute;\n    content: \"‚Äù\";\n    font-size: 10rem;\n    line-height: 0;\n    bottom: -43px;\n    right: 30px;\n}\n\n/* increase header size after 600px */\n@media all and (min-width: 600px) {\n    .blockquote h1 {\n        font-size: 60px;\n   }\n\n}\n\n/* Blockquote subheader */\n.blockquote h4 {\n    position: relative;\n    font-size: 1.4rem;\n    font-weight: normal;\n    line-height: 1;\n    margin: 0;\n    padding-top: 20px;\n    z-index: 1;\n}\n\n"}]},{"type":"element","tag":"h1","props":{"id":"continuous-what-now-1"},"children":[{"type":"text","value":"Continuous "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"What"}]},{"type":"text","value":" Now...?"}]},{"type":"element","tag":"div","props":{"className":["blockquote"]},"children":[{"type":"text","value":"\n  Automating the integration of code changes from multiple contributors into a single software project.\n"},{"type":"element","tag":"h4","props":{"id":"atlassian"},"children":[{"type":"text","value":"‚Äî "},{"type":"element","tag":"a","props":{"href":"atlassian.com/continuous-delivery/continuous-integration"},"children":[{"type":"text","value":"Atlassian"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-is-it-good-for"},"children":[{"type":"text","value":"What Is It Good For?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Linting"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Automated testing"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Security analyses"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Send messages\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Slack, Discord, Matrix, Mastodon, email, ..."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Building & compiling\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code, Documentation, ..."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Deploying (PyPi, Kubernetes, GitHub Pages)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Just like these slides"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"take-away"},"children":[{"type":"text","value":"Take-away"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Best practices are a time-investment "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"with returns"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"CI saves time and keeps your project clean"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What improvements could your project benefit from?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What's nice to know, but overkill for your current work?"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"hands-on"},"children":[{"type":"text","value":"Hands-On"}]},{"type":"element","tag":"div","props":{"style":"float: left; width: 60%; margin-bottom: 1em;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"ol","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Ensure your repository has tests"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Set up Continuous Integration (automatic testing)"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Verify that tests ran"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Add a test that fails"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Open an issue"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person B: "}]},{"type":"text","value":"Fork ‚ö†Ô∏è and clone person A's repo"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person B: "}]},{"type":"text","value":"Fix the broken test"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person B: "}]},{"type":"text","value":"Open a pull request linked to the issue"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person B: "}]},{"type":"text","value":"Verify that tests now run"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Person A: "}]},{"type":"text","value":"Accept Person B's pull request"}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"img","props":{"style":"float: right; width: 39%; aspect-ratio: 674/754;","src":"/modules/good-practices-lesson/media/ci/full-cycle-ci.png"},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-it-good-for","depth":2,"text":"What Is It Good For?"},{"id":"take-away","depth":2,"text":"Take-away"},{"id":"hands-on","depth":2,"text":"Hands-On"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:ci-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/ci-slides.md","_extension":"md","plainText":"---\ntitle: CI\ntype: slides\norder: 5\nauthor: Ole Mussman\ndescription: Day 3 Code Refinery\n---\n\n\n<!-- .slide: data-state=\"title\" -->\n\n# Continuous Integration\n\nnote:\n\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n# Continuous Integration\n<img src=\"./media/ci/automate.jpg\">\n\n===\n\n\n<!-- .slide: data-state=\"standard\"  -->\n\n\n# Continuous _What_ Now...? \n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n<style>\n\n/* Blockquote main style */\n.blockquote {\n    position: relative;\n    font-weight: 800;\n    padding: 30px 0;\n    width: 100%;\n    max-width: 500px;\n    z-index: 1;\n    margin: 80px auto;\n    align-self: center;\n    border-top: solid 1px;\n    border-bottom: solid 1px;\n}\n\n/* Blockquote header */\n.blockquote h1 {\n    position: relative;\n    font-size: small;\n    font-weight: 800;\n    line-height: 1;\n    margin: 0;\n}\n\n/* Blockquote right double quotes */\n.blockquote:after {\n    position: absolute;\n    content: \"‚Äù\";\n    font-size: 10rem;\n    line-height: 0;\n    bottom: -43px;\n    right: 30px;\n}\n\n/* increase header size after 600px */\n@media all and (min-width: 600px) {\n    .blockquote h1 {\n        font-size: 60px;\n   }\n\n}\n\n/* Blockquote subheader */\n.blockquote h4 {\n    position: relative;\n    font-size: 1.4rem;\n    font-weight: normal;\n    line-height: 1;\n    margin: 0;\n    padding-top: 20px;\n    z-index: 1;\n}\n\n</style>\n\n# Continuous _What_ Now...?\n\n<div class=\"blockquote\">\n  Automating the integration of code changes from multiple contributors into a single software project.\n<h4>&mdash; <a href=\"atlassian.com/continuous-delivery/continuous-integration\">Atlassian</a></h4>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What Is It Good For? \n- Linting\n- Automated testing\n- Security analyses\n- Send messages\n  - Slack, Discord, Matrix, Mastodon, email, ...\n- Building & compiling\n  - Code, Documentation, ...\n- Deploying (PyPi, Kubernetes, GitHub Pages)\n  - Just like these slides\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Best practices are a time-investment _with returns_\n- CI saves time and keeps your project clean\n- What improvements could your project benefit from?\n- What's nice to know, but overkill for your current work?\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Hands-On\n\n<div style=\"float: left; width: 60%; margin-bottom: 1em;\">\n  <ol>\n    <li><strong>Person A: </strong>Ensure your repository has tests</li>\n    <li><strong>Person A: </strong>Set up Continuous Integration (automatic testing)</li>\n    <li><strong>Person A: </strong>Verify that tests ran</li>\n    <li><strong>Person A: </strong>Add a test that fails</li>\n    <li><strong>Person A: </strong>Open an issue</li>\n    <li><strong>Person B: </strong>Fork ‚ö†Ô∏è and clone person A's repo</li>\n    <li><strong>Person B: </strong>Fix the broken test</li>\n    <li><strong>Person B: </strong>Open a pull request linked to the issue</li>\n    <li><strong>Person B: </strong>Verify that tests now run</li>\n    <li><strong>Person A: </strong>Accept Person B's pull request</li>\n  </ol>\n</div>\n<img style=\"float: right; width: 39%;\" src=\"./media/ci/full-cycle-ci.png\">\n\n\n"}]