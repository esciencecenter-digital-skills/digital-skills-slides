[{"_path":"/modules/good-practices-lesson/info","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Info","description":"","type":"info","order":0,"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:info.md","_source":"local_fs","_file":"modules/good-practices-lesson/info.md","_extension":"md","plainText":"---\ntitle: Info\ntype: info\norder: 0\n---\n\n## Good Practices in Research Software development\nThe key objective of this workshop is to grow researchers' software skills necessary to apply good practices that enable open and reproducible research. \nThe workshop focuses on building modular, reusable, maintainable, sustainable, reproducible, testable, and robust software. \nThis will allow you to more easily organize, maintain and share your data. \nThe participants should be familiar with programming and regularly write code for their research, but no extensive expertise or knowledge of specific tools are required. \nThe main themes that are addressed are generically applicable, but please note that a lot of the exercises and demonstrations are in Python.\n\nThis workshop is inspired by and based on [CodeRefinery](https://coderefinery.org/lessons/) training materials.\n\n## The content\nThis website hosts only the slides for the workshop. For the lesson content and exercises, see this [workbench lesson](https://esciencecenter-digital-skills.github.io/good-practices-lesson/) or associated [GitHub repository](https://github.com/esciencecenter-digital-skills/good-practices-lesson)."},{"_path":"/modules/good-practices-lesson/testing-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Testing","description":"Getting more professional","type":"slides","order":4,"author":"Ole Mussmann","_type":"markdown","_id":"local_fs:modules:good-practices-lesson:testing-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/testing-slides.md","_extension":"md","plainText":"---\ntitle: Testing\ntype: slides\norder: 4\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Testing\n\nnote:\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why Test?\n\n<ul>\n  <li>Preserve functionality\n  <ul>\n    <li>Detect new errors early</li>\n    <li>Facilitate reproducibility for research software</li>\n  </ul></li>\n  <li class=\"fragment\">Help users\n  <ul>\n    <li>Verify correct installation</li>\n    <li>Improve correctness for research output</li>\n  </ul></li>\n  <li class=\"fragment\">Enable developers\n  <ul>\n    <li>Make refactoring easier</li>\n    <li>Simplify external contributions</li>\n  </ul></li>\n</ul>\n\n<h3 style=\"margin-top: 1em;\" class=\"fragment\">üßÆ Manage Complexity üß©</h3>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test Types\n\n<ul>\n  <li>Unit test\n  <ul class=\"fragment fade-up\" data-fragment-index=\"1\">\n    <li>Smallest possible unit</li>\n    <li>No dependency on outside code...</li>\n    <li>(... replace them with mocks, stubs, etc.)</li>\n  </ul></li>\n</ul>\n<ul class=\"fragment fade-up\" data-fragment-index=\"2\">\n  <li>Integration test\n  <ul class=\"fragment fade-up\" data-fragment-index=\"3\">\n    <li>Test unit interaction</li>\n    <li>Can be on small scales, or system wide</li>\n  </ul></li>\n</ul>\n\n<div class=\"fragment fade-up\" data-fragment-index=\"4\" style='position:relative; padding: 0 0 calc(55.00% + 44px) 0; margin: -9em auto 0 auto;'></div><p style=\"font-size: large; margin: 0; padding: 0;\"> </p>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n\n## How much testing is enough?\n\nTest metrics:\n\n- lines of code : lines of tests (target: 1:3)\n- test coverage [example](https://sonarcloud.io/component_measures?id=eWaterCycle_ewatercycle&metric=coverage&view=treemap&selected=eWaterCycle_ewatercycle%3Aewatercycle) (target: >= 80%)\n\nTargets are defined as *necessary*, but *not sufficient* goals.\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# PyTest\n\n- recommended python testing framework\n- [docs.pytest.org](https://docs.pytest.org/en/7.3.x/)\n\n![](.files/pytest_logo.svg)\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Write Code\n\n<pre><code class=\"bash\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n$ mkdir pytest-example\n$ cd pytest-example\n</code></pre>\n\n<div class=\"fragment\">\nCreating a file <code>example.py</code> containing\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a + b\n&nbsp;\n&nbsp;\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? ü§î\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n</div>\n\n<div class=\"fragment\">\nChat with the python shell about <code>assert</code> ...\n</div>\n<div class=\"fragment\">\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test!\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|1-9\">\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Breaking Things\n\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a - b  # Uh oh, mistake! üò±\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing Again\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|2-8|9-17|18-20\">\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n</code></pre>\n\n<ul>\n  <li class=\"fragment\">üöÄ‚ùì<span class=\"fragment\">Functions fail on first error</span></li>\n  <li class=\"fragment\">But all test functions are executed</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- pytest collects and runs all test functions starting with <code>test_</code>\n- The tests pass when they do not throw (assertion) errors\n\n<pre style=\"width: max-content;\"><code style=\"overflow: hidden;\" class=\"python\" data-trim class=\"bash\" data-line-numbers>\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n</code></pre>\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# Recap: pure functions\n\n<div style=\"width: 59%; float: left;\">\n<ul style=\"margin-top: 1ex;\">\n  <li>Are deterministic</li>\n  <li>Have a return value</li>\n  <li>Have no side effects<sup>[1]</sup></li>\n  <li>Have referential transparency<sup>[2]</sup></li>\n<ul>\n</div>\n\n<div style=\"width: 39%; float: right;\">\n<pre class=\"fragment\" style=\"width: max-content;\" data-id=\"code-animation\"><code class=\"python\" style=\"overflow: hidden; padding-left: 1em; padding-right: 1em;\" data-trim data-noescape class=\"bash\" data-line-numbers=\"1-2|1-6|4-8\">\ndef last(my_array):\n    return my_array[-1]\n&nbsp;\ndef add(a, b):\n    return a + b\n&nbsp;\nprint(add(1, 2))\nprint(3)\n</code></pre>\n</div>\n\n<h4 class=\"fragment\" style=\"width: 100%; float: left; margin-top: 1em;\">Pure functions are easy to understand and test!</h4>\n\n<footer>\n[1] Side effects: interactions of a function with its surroundings\n<br>\n[2] Replacing a function call with the return of that function should not change anything\n</footer>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Use pure functions when possible üëå\n- Testing does not have to be hard üëè\n  - You test anyways, but then throw the test away üßê\n- You don't have to strive for üíØ% test coverage\n- Aim for a balance between unit- and integration tests ‚öñÔ∏è\n- Testing removes the dread of refactoring üîÅ\n- Your future you (and others!) will thank you üôè\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n# Test-Driven Development: FizzBuzz Function\n\n<div class=\"r-stack\">\n  <img src=\"./media/testing/fizz_buzz_1.svg\">\n  <img class=\"fragment\" data-fragment-index=\"1\" src=\"./media/testing/fizz_buzz_2.svg\">\n  <img class=\"fragment\" data-fragment-index=\"2\" src=\"./media/testing/fizz_buzz_3.svg\">\n  <img class=\"fragment\" data-fragment-index=\"3\" src=\"./media/testing/fizz_buzz_4.svg\">\n  <img class=\"fragment\" data-fragment-index=\"4\" src=\"./media/testing/fizz_buzz_5.svg\">\n  <img class=\"fragment\" data-fragment-index=\"5\" src=\"./media/testing/fizz_buzz_6.svg\">\n</div>\n\n<ul>\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li class=\"fragment\" data-fragment-index=\"1\">fails on zero or negative numbers</li>\n    <li class=\"fragment\" data-fragment-index=\"2\">instead returns \"Fizz\" on multiples of 3</li>\n    <li class=\"fragment\" data-fragment-index=\"3\">instead returns \"Buzz\" on multiples of 5</li>\n    <li class=\"fragment\" data-fragment-index=\"5\">instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## FizzBuzz Function\n\n<ul>\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li>fails on zero or negative numbers</li>\n    <li>instead returns \"Fizz\" on multiples of 3</li>\n    <li>instead returns \"Buzz\" on multiples of 5</li>\n    <li>instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n  <li class=\"fragment\">Create an empty function fizz_buzz()</li>\n  <li class=\"fragment\">Write the tests</li>\n  <li class=\"fragment\">Paste your tests in the collab document, and discuss</li>\n  <li class=\"fragment\">Now write a function code to make your tests pass</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- What did you think of this style of development?\n- Was it easier or harder than just writing code?\n- Would your code look different without the tests? <!-- .element class=\"fragment\" -->\n- For what kind of projects would it be (not) useful? <!-- .element class=\"fragment\" -->\n\n<div class=\"fragment\" style=\"width: 20vw; margin: 1em auto;\">Test-Driven Development (TDD) is an optional tool in your toolbox üõ†Ô∏è</div>\n"}]