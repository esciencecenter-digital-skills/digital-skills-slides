{"_path":"/modules/good-practices-lesson/modular-code-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Modular Code","description":"Modular coding","type":"slides","order":2,"author":"Barbara Vreede, Ole Mussmann","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"developing-modular-code"},"children":[{"type":"text","value":"Developing Modular Code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-is-modularity"},"children":[{"type":"text","value":"What is modularity?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Simple components combined to produce complex behavior."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Software can be 'built up' from smaller elements."}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Elements are self-contained and independent."}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Each element handles a specific (set of) task(s)."}]}]},{"type":"element","tag":"figure","props":{"style":"text-align: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"height":300,"alt":"modularity","src":"./media/modular-code/modern_times.jpg","style":"margin-bottom: -10px;"},"children":[]},{"type":"text","value":"\n        "},{"type":"element","tag":"figcaption","props":{"style":"font-size: 0.3em; color: #666;"},"children":[{"type":"text","value":"Charlie Chaplin in "},{"type":"element","tag":"i","props":{},"children":[{"type":"text","value":"Modern Times"}]},{"type":"text","value":" (1936)."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"Â© Roy Export Company Establishment; photograph, the Museum of Modern Art/Film Stills Archive, New York City"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"modular-code"},"children":[{"type":"text","value":"Modular code"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"width":400,"alt":"cohesive","src":"./media/modular-code/small_cohesive_units.png","style":"margin-right: 20px;"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"width":400,"alt":"bohemoth","src":"./media/modular-code/customized_bohemoth.png","className":["fragment"],"dataFragmentIndex":"1"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-are-these-blockselements"},"children":[{"type":"text","value":"What are these blocks/elements?"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px; max-width: 100%;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/building_blocks.png","alt":"building blocks","style":"max-width: 40%; height: auto; margin-right: 20px; aspect-ratio: 927/736;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"functions"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"classes"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"modules"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"libraries/packages"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"programs"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"5"},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To increase robustness"}]},{"type":"element","tag":"img","props":{"width":200,"alt":"testing a single module","src":"./media/modular-code/testing_module.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A well-designed module can be tested."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This helps keep the codebase well-functioning and bug-free."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-1"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To make maintenance easier:"}]},{"type":"element","tag":"img","props":{"width":300,"alt":"testing a module taken from a larger project","src":"./media/modular-code/testing_module_maintenance.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modular code is more readable and understandable."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules can be debugged separately."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules only need to be improved/optimized once."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-2"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To allow reusability:"}]},{"type":"element","tag":"img","props":{"width":400,"alt":"reuse a module in another project","src":"./media/modular-code/reuse_module.png"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A module can live independent of its original context."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"It can be reused by another project."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-3"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To facilitate scalability:"}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"alt":"scalability","src":"/modules/good-practices-lesson/media/modular-code/scalability.png","style":"max-width: 40%; height: auto; margin-right: 20px; aspect-ratio: 892/1244;"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Complexity remains low by design."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This creates space for scaling up."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-4"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create opportunities for innovation:"}]},{"type":"element","tag":"img","props":{"alt":"tetris shows innovation","src":"/modules/good-practices-lesson/media/modular-code/tetris_innovation.png","style":"max-width: 50%; height: auto; aspect-ratio: 1824/1356;"},"children":[]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Modules increase the capabilities and power of a project."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rearrange old modules for new applications."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-write-modular-code-5"},"children":[{"type":"text","value":"Why write modular code?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To save time:"}]},{"type":"element","tag":"img","props":{"width":600,"alt":"development speed","src":"./media/modular-code/development-speed.svg"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/units.png","alt":"units","width":300,"style":"margin-right: 20px; aspect-ratio: 1157/1195;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"has a good name"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"naming-your-module"},"children":[{"type":"text","value":"Naming your module"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"be descriptive and clear"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"focus on human intelligibility"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"follow language specific conventions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"avoid abbreviations"}]}]},{"type":"element","tag":"div","props":{"style":"text-align: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"alt":"naming","src":"/modules/good-practices-lesson/media/modular-code/naming_stuff.jpg","style":"max-width: 100%; height: auto; max-height: 300px; aspect-ratio: 650/615;"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module-1"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/units.png","alt":"units","width":300,"style":"margin-right: 20px; aspect-ratio: 1157/1195;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"is readable"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"more-readable-shorter-code"},"children":[{"type":"text","value":"More readable != shorter code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Shorter:"}]},{"type":"element","tag":"pre","props":{"code":"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"More modular:"}]},{"type":"element","tag":"pre","props":{"code":"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module-2"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/units.png","alt":"units","width":300,"style":"margin-right: 20px; aspect-ratio: 1157/1195;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is readable"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"is pure and predictable"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"an-impure-function"},"children":[{"type":"text","value":"An impure function..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... does not always give the same result:"}]},{"type":"element","tag":"pre","props":{"code":"def fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Q: What will happen when we call the function a second time?"}]}]},{"type":"element","tag":"pre","props":{"code":">>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":">>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-pure-function"},"children":[{"type":"text","value":"A pure function..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... always gives the same result:"}]},{"type":"element","tag":"pre","props":{"code":"def fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"a-good-module-3"},"children":[{"type":"text","value":"A good module..."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/units.png","alt":"units","width":300,"style":"margin-right: 20px; aspect-ratio: 1157/1195;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"performs limited and clearly defined tasks"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"has a good name"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is readable"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"is pure and predictable"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/testing_module.png","alt":"testing a single module","width":300,"style":"margin-right: 20px; aspect-ratio: 492/498;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"poor readability"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"readable-code"},"children":[{"type":"text","value":"Readable code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Modular code becomes more readable"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code is read more than it is written"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Does a reader understand what the code does?"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Bad readability can be a \"code smell\""}]}]},{"type":"element","tag":"figure","props":{"style":"text-align: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"width":400,"alt":"smelly","src":"./media/modular-code/Smelly-Code-Featured.avif","style":"margin-bottom: -10px;"},"children":[]},{"type":"text","value":"\n        "},{"type":"element","tag":"figcaption","props":{"style":"font-size: 0.3em; color: #666;"},"children":[{"type":"text","value":"SIphotography/Depositphotos"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization-1"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/testing_module.png","alt":"testing a single module","width":300,"style":"margin-right: 20px; aspect-ratio: 492/498;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"poor readability"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"repetition"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"repetitive-code"},"children":[{"type":"text","value":"Repetitive code"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Don't Repeat Yourself (DRY): place reused code into a function"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify functions units by their "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"action"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"(e.g. \"plot\", \"transform\", \"extract\", \"save\")"}]}]}]}]},{"type":"element","tag":"div","props":{"style":"text-align: center; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"alt":"DRY","src":"/modules/good-practices-lesson/media/modular-code/dry-vs-wet-code.jpg","style":"max-width: 100%; height: auto; max-height: 300px; aspect-ratio: 800/686;"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization-2"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/testing_module.png","alt":"testing a single module","width":300,"style":"margin-right: 20px; aspect-ratio: 492/498;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"poor readability"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"repetition"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"nested code"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"target-nested-code"},"children":[{"type":"text","value":"Target nested code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nested code is a prime target for modularization:"}]},{"type":"element","tag":"pre","props":{"code":"def sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"reduce-nestedness"},"children":[{"type":"text","value":"Reduce nestedness..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... by extracting modules:"}]},{"type":"element","tag":"pre","props":{"code":"def _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top < bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n","language":"python","meta":"","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top < bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"identifying-opportunities-for-modularization-3"},"children":[{"type":"text","value":"Identifying opportunities for modularization"}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"/modules/good-practices-lesson/media/modular-code/testing_module.png","alt":"testing a single module","width":300,"style":"margin-right: 20px; aspect-ratio: 492/498;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"poor readability"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"repetition"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"nested code"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"let-tests-help-you"},"children":[{"type":"text","value":"Let tests help you"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Write tests for each individual module"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use the test-writing procedure to look critically at the module's function:"}]}]},{"type":"element","tag":"pre","props":{"code":"- Is the input/output clear?\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- Is the input/output clear?\n"}]}]},{"type":"element","tag":"pre","props":{"code":"- What can you not yet test? Extract it into a new module.\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- What can you not yet test? Extract it into a new module.\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-modularity","depth":2,"text":"What is modularity?"},{"id":"modular-code","depth":2,"text":"Modular code"},{"id":"what-are-these-blockselements","depth":2,"text":"What are these blocks/elements?"},{"id":"why-write-modular-code","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-1","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-2","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-3","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-4","depth":2,"text":"Why write modular code?"},{"id":"why-write-modular-code-5","depth":2,"text":"Why write modular code?"},{"id":"a-good-module","depth":2,"text":"A good module..."},{"id":"naming-your-module","depth":2,"text":"Naming your module"},{"id":"a-good-module-1","depth":2,"text":"A good module..."},{"id":"more-readable-shorter-code","depth":2,"text":"More readable != shorter code"},{"id":"a-good-module-2","depth":2,"text":"A good module..."},{"id":"an-impure-function","depth":2,"text":"An impure function..."},{"id":"a-pure-function","depth":2,"text":"A pure function..."},{"id":"a-good-module-3","depth":2,"text":"A good module..."},{"id":"identifying-opportunities-for-modularization","depth":2,"text":"Identifying opportunities for modularization"},{"id":"readable-code","depth":2,"text":"Readable code"},{"id":"identifying-opportunities-for-modularization-1","depth":2,"text":"Identifying opportunities for modularization"},{"id":"repetitive-code","depth":2,"text":"Repetitive code"},{"id":"identifying-opportunities-for-modularization-2","depth":2,"text":"Identifying opportunities for modularization"},{"id":"target-nested-code","depth":2,"text":"Target nested code"},{"id":"reduce-nestedness","depth":2,"text":"Reduce nestedness..."},{"id":"identifying-opportunities-for-modularization-3","depth":2,"text":"Identifying opportunities for modularization"},{"id":"let-tests-help-you","depth":2,"text":"Let tests help you"}]}},"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:modular-code-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/modular-code-slides.md","_extension":"md","plainText":"---\ntitle: Modular Code\ntype: slides\norder: 2\nauthor: Barbara Vreede, Ole Mussmann\ndescription: Modular coding\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Developing Modular Code\n\n<!-- .slide: data-state=\"standard\"  -->\n\n===\n\n## What is modularity?\n\nSimple components combined to produce complex behavior.\n\n- Software can be 'built up' from smaller elements.\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n- Elements are self-contained and independent.\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n- Each element handles a specific (set of) task(s).\n<!-- .element: class=\"fragment\" data-fragment-index=\"5\" -->\n\n<figure style=\"text-align: center; margin-top: 20px;\">\n    <img height=\"300\" alt=\"modularity\" src=\"./media/modular-code/modern_times.jpg\" style=\"margin-bottom: -10px;\">\n        <figcaption style=\"font-size: 0.3em; color: #666;\">Charlie Chaplin in <i>Modern Times</i> (1936).<br>Â© Roy Export Company Establishment; photograph, the Museum of Modern Art/Film Stills Archive, New York City</figcaption>\n</figure>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Modular code\n\n<div style=\"display: flex; justify-content: center; align-items: center; margin-top: 20px;\">\n  <img width=\"400\" alt=\"cohesive\" src=\"./media/modular-code/small_cohesive_units.png\" style=\"margin-right: 20px;\">\n  <img width=\"400\" alt=\"bohemoth\" src=\"./media/modular-code/customized_bohemoth.png\" class=\"fragment\" data-fragment-index=\"1\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What are these blocks/elements?\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px; max-width: 100%;\">\n    <img src=\"./media/modular-code/building_blocks.png\" alt=\"building blocks\" style=\"max-width: 40%; height: auto; margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"1\">functions</li>\n            <li class=\"fragment\" data-fragment-index=\"2\">classes</li>\n            <li class=\"fragment\" data-fragment-index=\"3\">modules</li>\n            <li class=\"fragment\" data-fragment-index=\"4\">libraries/packages</li>\n            <li class=\"fragment\" data-fragment-index=\"5\">programs</li>\n            <li class=\"fragment\" data-fragment-index=\"5\">...</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo increase robustness\n\n<img width=\"200\" alt=\"testing a single module\" src=\"./media/modular-code/testing_module.png\">\n\n- A well-designed module can be tested.\n- This helps keep the codebase well-functioning and bug-free.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo make maintenance easier:\n\n<img width=\"300\" alt=\"testing a module taken from a larger project\" src=\"./media/modular-code/testing_module_maintenance.png\">\n\n- Modular code is more readable and understandable.\n- Modules can be debugged separately.\n- Modules only need to be improved/optimized once.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo allow reusability:\n\n<img width=\"400\" alt=\"reuse a module in another project\" src=\"./media/modular-code/reuse_module.png\">\n\n- A module can live independent of its original context.\n- It can be reused by another project.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo facilitate scalability:\n\n<div style=\"display: flex; align-items: center;\">\n\n  <img alt=\"scalability\" src=\"./media/modular-code/scalability.png\" style=\"max-width: 40%; height: auto; margin-right: 20px;\">\n\n  <div>\n    <ul>\n      <li>Complexity remains low by design.</li>\n      <li>This creates space for scaling up.</li>\n    </ul>\n  </div>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo create opportunities for innovation:\n\n<img alt=\"tetris shows innovation\" src=\"./media/modular-code/tetris_innovation.png\" style=\"max-width: 50%; height: auto;\">\n\n- Modules increase the capabilities and power of a project.\n- Rearrange old modules for new applications.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Why write modular code?\n\nTo save time:\n\n<img width=\"600\" alt=\"development speed\" src=\"./media/modular-code/development-speed.svg\">\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"1\">performs limited and clearly defined tasks</li>\n            <li class=\"fragment\" data-fragment-index=\"2\">has a good name</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"-->\n\n## Naming your module\n\n- be descriptive and clear\n- focus on human intelligibility\n- follow language specific conventions\n- avoid abbreviations\n\n<div style=\"text-align: center; margin-top: 20px;\">\n    <img alt=\"naming\" src=\"./media/modular-code/naming_stuff.jpg\" style=\"max-width: 100%; height: auto; max-height: 300px;\">\n</div>\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">is readable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## More readable != shorter code\n\nShorter:\n```python\nindexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n```\n\nMore modular:\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n```python\ndef getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n```\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li>is readable</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">is pure and predictable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## An impure function...\n\n... does not always give the same result:\n\n```python\ndef fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n```\n\n**Q: What will happen when we call the function a second time?**\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n```python\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n```\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A pure function...\n\n... always gives the same result:\n\n```python\ndef fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li>is readable</li>\n            <li>is pure and predictable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"2\">poor readability</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Readable code\n\nModular code becomes more readable\n\n- Code is read more than it is written\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- Does a reader understand what the code does?\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n- Bad readability can be a \"code smell\"\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n\n<figure style=\"text-align: center; margin-top: 20px;\">\n    <img width=\"400\" alt=\"smelly\" src=\"./media/modular-code/Smelly-Code-Featured.avif\" style=\"margin-bottom: -10px;\">\n        <figcaption style=\"font-size: 0.3em; color: #666;\">SIphotography/Depositphotos</figcaption>\n</figure>\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">repetition</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Repetitive code\n\n- Don't Repeat Yourself (DRY): place reused code into a function\n- Identify functions units by their _action_\n  - (e.g. \"plot\", \"transform\", \"extract\", \"save\")\n\n<div style=\"text-align: center; margin-top: 20px;\">\n    <img alt=\"DRY\" src=\"./media/modular-code/dry-vs-wet-code.jpg\" style=\"max-width: 100%; height: auto; max-height: 300px;\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li>repetition</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">nested code</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Target nested code\n\nNested code is a prime target for modularization:\n\n```python\ndef sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Reduce nestedness...\n\n... by extracting modules:\n\n```python\ndef _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top < bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li>repetition</li>\n            <li>nested code</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Let tests help you\n\n- Write tests for each individual module\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- Use the test-writing procedure to look critically at the module's function:\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n    - Is the input/output clear?\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n    - What can you not yet test? Extract it into a new module.\n\n \n\n\n"}