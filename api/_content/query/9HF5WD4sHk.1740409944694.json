[{"_path":"/modules/good-practices-lesson/info","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Info","description":"","type":"info","order":0,"_type":"markdown","_id":"local_fs:modules:good-practices-lesson:info.md","_source":"local_fs","_file":"modules/good-practices-lesson/info.md","_extension":"md","plainText":"---\ntitle: Info\ntype: info\norder: 0\n---\n\n## Good Practices in Research Software development\nThe key objective of this workshop is to grow researchers' software skills necessary to apply good practices that enable open and reproducible research. \nThe workshop focuses on building modular, reusable, maintainable, sustainable, reproducible, testable, and robust software. \nThis will allow you to more easily organize, maintain and share your data. \nThe participants should be familiar with programming and regularly write code for their research, but no extensive expertise or knowledge of specific tools are required. \nThe main themes that are addressed are generically applicable, but please note that a lot of the exercises and demonstrations are in Python.\n\nThis workshop is inspired by and based on [CodeRefinery](https://coderefinery.org/lessons/) training materials.\n\n## The content\nThis website hosts only the slides for the workshop. For the lesson content and exercises, see this [workbench lesson](https://esciencecenter-digital-skills.github.io/good-practices-lesson/) or associated [GitHub repository](https://github.com/esciencecenter-digital-skills/good-practices-lesson)."},{"_path":"/modules/good-practices-lesson/testing-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Testing","description":"Getting more professional","type":"slides","order":4,"author":"Ole Mussmann","_type":"markdown","_id":"local_fs:modules:good-practices-lesson:testing-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/testing-slides.md","_extension":"md","plainText":"---\ntitle: Testing\ntype: slides\norder: 4\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n<!-- .slide: data-state=\"blue_overlay yellow_flag yellow_strip purple_half_circle_bottom purple_blob right_e_top\" data-background-video=\"./media/testing/606762245.mp4\" data-background-video-loop data-background-video-muted=\"true\" -->\n<!-- https://pixabay.com/videos/engine-motor-mechanic-technology-5497/ -->\n\n# Testing\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Basics of testing\n\n### Mistakes *will* happen!\n\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n    <div>\n      <ul>\n        <li class=\"fragment\">The more complex the code, the harder to keep an eye on everything.</li>\n        <li class=\"fragment\">However, we can build safeguards against problems:\n        <ul>\n          <li class=\"fragment\">Throwing exceptions</li>\n          <li class=\"fragment\">Logging (intermediate) results</li>\n          <li class=\"fragment\"><b>Writing tests</b></li>\n        </ul></li>\n      </ul>\n  </div>\n    <img src=\"./media/testing/Doh.png\" width=\"250\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why Test?\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n  <div>\n    <ul>\n      <li class=\"fragment\">Preserve functionality\n      <ul>\n        <li>Detect (new) errors early</li>\n        <li>Avoid unexpected outputs</li>\n      </ul></li>\n      <li class=\"fragment\">Help users\n      <ul>\n        <li>Verify correct installation</li>\n        <li>Ensure reproducibility</li>\n      </ul></li>\n      <li class=\"fragment\">Enable developers\n      <ul>\n        <li>Manage complexity</li>\n        <li>Simplify refactoring</li>\n        <li>Facilitate collaboration</li>\n      </ul></li>\n    </ul>\n  </div>\n    <img src=\"./media/testing/experiment.webp\" width=\"400\" style=\"margin-left: 60px\">\n</div>\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test Types\n\n<ul>\n  <span class=\"fragment fade-out\" data-fragment-index=\"4\">\n    <li class=\"fragment fade-up\" data-fragment-index=\"1\">Exceptions in the code base\n    <ul>\n      <li>Intended to handle \"expected\" problems</li>\n      <li>Sound an alarm as soon as the problem arises</li>\n      <li>Provide clear feedback to the user</li>\n  </ul></li></span>\n  <li class=\"fragment fade-up\" data-fragment-index=\"2\">Unit testing\n  <ul>\n    <li>Smallest possible unit (module)</li>\n    <li>No dependency on outside code...</li>\n    <li>(... replace them with mocks, stubs, etc.)</li>\n  </ul></li>\n  <span class=\"fragment fade-out\" data-fragment-index=\"4\">\n  <li class=\"fragment fade-up\" data-fragment-index=\"3\">Integration testing\n  <ul>\n    <li>Test interactions between units</li>\n    <li>Can be on small scales, system wide, ...</li>\n  </ul></li></span>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing frameworks\n\nMost modern programming languages have good options to streamline testing\n\n- Python: [Pytest](https://docs.pytest.org/en/7.3.x/)\n- Java: [Junit](https://junit.org/junit5/)\n- R: [testthat](https://testthat.r-lib.org/)\n- Matlab: [Testing Frameworks](https://nl.mathworks.com/help/matlab/matlab-unit-test-framework.html?s_tid=CRUX_lftnav)\n- Julia: [Test](https://docs.julialang.org/en/v1/stdlib/Test/)\n- C++: [GTest](https://google.github.io/googletest/) (developed by Google) or [Catch2](https://catch2-temp.readthedocs.io/en/latest/index.html)\n- etc.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n\n## Testing metrics\n\n#### Targets are arbitrary and indicative\n\n<div style=\"display: flex; justify-content: center; align-items: center\">\n  <div>\n    <ul>\n      <li class=\"fragment fade-up\">Coverage\n        <ul>\n          <li>Proportion of code that is executed</li>\n          <li>Target >= 80%</li>\n        </ul>\n      </li>\n      <li class=\"fragment fade-up\">Ratio (lines of code:lines of test)\n        <ul>\n          <li>Target: (1:3)</li>\n        </ul>\n      </li>\n      <li class=\"fragment fade-up\">Metrics can be misleading\n        <ul>\n          <li>They do not measure quality</li>\n          <li>Don't get blindsided by hitting targets over writing good tests</li>\n  </div>\n  <img src=\"./media/testing/metrics.jpg\" width=\"300\" style=\"margin-left: 60px\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Write Code\n\n<pre><code class=\"bash\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n$ mkdir pytest-example\n$ cd pytest-example\n</code></pre>\n\n<div class=\"fragment\">\nCreating a file <code>example.py</code> containing\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a + b\n&nbsp;\n&nbsp;\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? ü§î\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n</div>\n\n<div class=\"fragment\">\nChat with the python shell about <code>assert</code> ...\n</div>\n<div class=\"fragment\">\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test!\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|1-9\">\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Breaking Things\n\n<pre><code class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a - b  # Uh oh, mistake! üò±\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Testing Again\n\n<pre><code style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|2-8|9-17|18-20\">\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n</code></pre>\n\n<ul>\n  <li class=\"fragment\">üöÄ‚ùì<span class=\"fragment\">Functions fail on first error</span></li>\n  <li class=\"fragment\">But all test functions are executed</li>\n</ul>\n\n===\n\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Pytest wrap up\n\n- pytest collects all files starting <code>test_</code>...\n- ... and runs all test functions starting with <code>test_</code>\n- The tests pass when they do not throw (assertion) errors\n\n<pre style=\"width: max-content;\"><code style=\"overflow: hidden;\" class=\"python\" data-trim class=\"bash\" data-line-numbers>\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n</code></pre>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Use pure functions when possible üëå\n  - Do you remember what these are? üí≠\n- Testing does not have to be hard üëè\n  - You often test anyway, but then throw the test away üßê\n  - Use pytest if programming with Python üé≠\n- You don't have to strive for üíØ% test coverage\n  - But be smart about what you are testing üß†\n- Aim for a balance between unit- and integration tests ‚öñÔ∏è\n- Testing removes the dread of refactoring üîÅ\n- Your future you (and others!) will thank you üôè\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test-Driven Development: FizzBuzz\n\n<div class=\"r-stack\">\n  <img src=\"./media/testing/fizz_buzz_1.svg\">\n  <img class=\"fragment\" data-fragment-index=\"1\" src=\"./media/testing/fizz_buzz_2.svg\">\n  <img class=\"fragment\" data-fragment-index=\"2\" src=\"./media/testing/fizz_buzz_3.svg\">\n  <img class=\"fragment\" data-fragment-index=\"3\" src=\"./media/testing/fizz_buzz_4.svg\">\n  <img class=\"fragment\" data-fragment-index=\"4\" src=\"./media/testing/fizz_buzz_5.svg\">\n  <img class=\"fragment\" data-fragment-index=\"5\" src=\"./media/testing/fizz_buzz_6.svg\">\n</div>\n\n<ul class=\"fragment\">\n  <li>fizz_buzz() takes an integer argument and returns it, BUT</li>\n  <ul>\n    <li class=\"fragment\" data-fragment-index=\"1\">fails on zero or negative numbers</li>\n    <li class=\"fragment\" data-fragment-index=\"2\">instead returns \"Fizz\" on multiples of 3</li>\n    <li class=\"fragment\" data-fragment-index=\"3\">instead returns \"Buzz\" on multiples of 5</li>\n    <li class=\"fragment\" data-fragment-index=\"5\">instead returns \"FizzBuzz\" on multiples of 3 and 5</li>\n  </ul>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Test driven development assignment:\n\n<ul>\n  <li>Create a test function that checks the rules of FizzBuzz:</li>\n  <ul>\n    <li>fails on zero or negative numbers</li>\n    <li>return \"Fizz\" on multiples of 3</li>\n    <li>return \"Buzz\" on multiples of 5</li>\n    <li>return \"FizzBuzz\" on multiples of 3 and 5</li>\n    <li>otherwise return itself</li>\n  </ul>\n  <li class=\"fragment\">Paste your tests in the collab document, and discuss</li>\n  <li class=\"fragment\">Now write a function code to make your tests pass</li>\n</ul>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- What did you think of this style of development?\n- Was it easier or harder than just writing code?\n- Would your code look different without the tests? <!-- .element class=\"fragment\" -->\n- For what kind of projects would it be (not) useful? <!-- .element class=\"fragment\" -->\n\n**Test-Driven Development (TDD) is an optional tool in your toolbox** üõ†Ô∏è <!-- .element class=\"fragment\" -->"}]