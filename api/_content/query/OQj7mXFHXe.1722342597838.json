[{"_path":"/modules/git-lesson/info","_dir":"git-lesson","_draft":false,"_partial":false,"_locale":"","title":"Info","description":"","type":"info","order":0,"_type":"markdown","_id":"local_fs:modules:git-lesson:info.md","_source":"local_fs","_file":"modules/git-lesson/info.md","_extension":"md","plainText":"---\ntitle: Info\ntype: info\norder: 0\n---\n\n## Collaborative version control with Git and GitHub\nThis workshop introduces version control with Git and teaches you how to collaborate using Git and GitHub.\n\nKnowing how to use Git and GitHub will allow you to keep track of changes in your software project, publish your code online, collaborate with several people in the same project, and contribute to projects as an external collaborator.\n\n## The content\nThis website hosts only the slides for the workshop. For the lesson content and exercises, see this [workbench lesson](https://esciencecenter-digital-skills.github.io/git-lesson/) or associated [GitHub repository](https://github.com/esciencecenter-digital-skills/git-lesson)."},{"_path":"/modules/good-practices-lesson/documentation-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Documentation","description":"Day 3 Code Refinery","type":"slides","order":3,"author":"Luisa Orozco, Barbara Vreede","_type":"markdown","_id":"local_fs:modules:good-practices-lesson:documentation-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/documentation-slides.md","_extension":"md","plainText":"---\ntitle: Documentation\ntype: slides\norder: 3\nauthor: Luisa Orozco, Barbara Vreede\ndescription: Day 3 Code Refinery\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Documentation\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n<img style=\"height: 550px;\" src=\"./files/paint.png\"/>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Examples of documentation\n\n+ Think of projects with good documentation.\n      _What do you like about them?_\n+ Think of projects with less good documentation.\n      _What don't you like about them? Are you missing anything?_\n\n<quotation>NB: You can choose a mature library with lots of users, but try to also think of less mature projects you had to collaborate on, or papers you had to reproduce.</quotation>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Types of documentation\n\n<div class=\"fragment\">\n\n+ README files\n+ In-code documentation\n+ API documentation\n+ Tutorials\n+ ...\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good README file\n\n+ README file is first thing a user/collaborator sees\n+ What should be included in README files?\n<ul>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n</ul>\n\n\nNote:\n+ A descriptive project title\n+ Motivation (why the project exists) and basics\n+ Installation / How to setup\n+ Copy-pasteable quick start code example\n+ Usage reference (if not elsewhere)\n+ Recommended citation if someone uses it\n+ Other related tools (\"see also\")\n+ Contact information for the developer(s)\n+ License information\n+ Contributing guidelines\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write in-code documentation?\n\nIn-code documentation:\n\n+ Makes code more understandable\n+ Explains decisions we made\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## When **not** to use in-code documentation?\n\n+ When the code is self-explanatory\n+ To replace good variable/function names\n+ To replace version control\n+ To keep old (zombie) code around\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Readable code vs commented code\n\n```python=\n# convert from degrees celsius to fahrenheit\ndef convert(d):\n    return d * 5 / 9 + 32\n```\nvs\n```python=\ndef celsius_to_fahrenheit(degrees):\n    return degrees * 5 / 9 + 32\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## What makes a good comment?\n\n**Comment A**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# Now we check if temperature is larger than -50:\nif temperature > -50:\n    print('do something')\n</code></pre>\n\n**Comment B**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# We regard temperatures below -50 degrees as measurement errors\nif temperature > -50:\n    print('do something')\n</code></pre>\n\nHow are these different? Which one do you prefer?\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Docstrings: a special kind of comment\n\n```python=\ndef celsius_to_fahrenheit(degrees):\n  \"\"\"Convert degrees Celsius to degrees Fahrenheit.\"\"\"\n  return degrees * 5 / 9 + 32\n```\n\nWhy is this OK?\n\nNote:\nDocstrings can be used to generate user documentation.\nThey are accessible outside the code.\nThey follow a standardized syntax.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## In-code commenting: key points\n\n+ Explicit, descriptive naming already provides important documentation.\n+ Comments should describe the why for your code, not the what.\n+ Writing docstrings is an easy way to write documentation while you code, as they are accessible outside the code itself.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## User/API documentation\n\n+ What if a README file is not enough?\n+ How do I easily create user documentation?\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Tools\n\n+ **Sphinx** (documentation generator)\n  - creates nicely-formatted HTML pages out of .md or .rst files\n  - programming language independent\n+ **Github pages** (deploy your documentation)\n  - set up inside your GitHub repository\n  - automatically deploys your Sphinx-generated documentation\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Take-home message\n\n+ Depending on the purpose and state of the project documentation needs to meet different criteria.\n+ Documentation can take different shapes:\n  + Readable code\n  + In-code comments\n  + Docstrings\n  + README files\n  + Tutorials/notebooks\n+ Documentation is a vital part of a project, and should be kept and created alongside the corresponding code."}]