[{"_path":"/modules/good-practices-lesson","_dir":"modules","_draft":false,"_partial":false,"_locale":"","title":"Good Practices in Research Software Engineering","description":"Photo by OCG Saving The Ocean on Unsplash","id":2,"category":"Good Practices","author":"eScience Center","thumbnail":"good-practices-thumbnail.png","visibility":"visible","_type":"markdown","_id":"local_fs:modules:good-practices-lesson:index.md","_source":"local_fs","_file":"modules/good-practices-lesson/index.md","_extension":"md","plainText":"---\nid: 2\ncategory: Good Practices\ntitle: Good Practices in Research Software Engineering\nauthor: eScience Center\nthumbnail: \"good-practices-thumbnail.png\"\nvisibility: visible\n---\n\nPhoto by <a href=\"https://unsplash.com/@oceancleanupgroup?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">OCG Saving The Ocean</a> on <a href=\"https://unsplash.com/photos/man-in-blue-t-shirt-and-blue-shorts-playing-soccer-on-beach-during-daytime-psRG_u3DLps?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash</a>\n  \n"},{"_path":"/modules/good-practices-lesson/modular-code-slides","_dir":"good-practices-lesson","_draft":false,"_partial":false,"_locale":"","title":"Modular Code","description":"Modular coding","type":"slides","order":2,"author":"Barbara Vreede, Ole Mussmann","_type":"markdown","_id":"local_fs:modules:good-practices-lesson:modular-code-slides.md","_source":"local_fs","_file":"modules/good-practices-lesson/modular-code-slides.md","_extension":"md","plainText":"---\ntitle: Modular Code\ntype: slides\norder: 2\nauthor: Barbara Vreede, Ole Mussmann\ndescription: Modular coding\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Developing Modular Code\n\n<!-- .slide: data-state=\"standard\"  -->\n\n===\n\n## What is modularity?\n\nSimple components combined to produce complex behavior.\n\n- Software can be 'built up' from smaller elements.\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n- Elements are self-contained and independent.\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n- Each element handles a specific (set of) task(s).\n<!-- .element: class=\"fragment\" data-fragment-index=\"5\" -->\n\n<figure style=\"text-align: center; margin-top: 20px;\">\n    <img height=\"300\" alt=\"modularity\" src=\"./media/modular-code/modern_times.jpg\" style=\"margin-bottom: -10px;\">\n        <figcaption style=\"font-size: 0.3em; color: #666;\">Charlie Chaplin in <i>Modern Times</i> (1936).<br>Â© Roy Export Company Establishment; photograph, the Museum of Modern Art/Film Stills Archive, New York City</figcaption>\n</figure>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Modular code\n\n<div style=\"display: flex; justify-content: center; align-items: center; margin-top: 20px;\">\n  <img width=\"400\" alt=\"cohesive\" src=\"./media/modular-code/small_cohesive_units.png\" style=\"margin-right: 20px;\">\n  <img width=\"400\" alt=\"bohemoth\" src=\"./media/modular-code/customized_bohemoth.png\" class=\"fragment\" data-fragment-index=\"1\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What are these blocks/elements?\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px; max-width: 100%;\">\n    <img src=\"./media/modular-code/building_blocks.png\" alt=\"building blocks\" style=\"max-width: 40%; height: auto; margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"1\">functions</li>\n            <li class=\"fragment\" data-fragment-index=\"2\">classes</li>\n            <li class=\"fragment\" data-fragment-index=\"3\">modules</li>\n            <li class=\"fragment\" data-fragment-index=\"4\">libraries/packages</li>\n            <li class=\"fragment\" data-fragment-index=\"5\">programs</li>\n            <li class=\"fragment\" data-fragment-index=\"5\">...</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo increase robustness\n\n<img width=\"200\" alt=\"testing a single module\" src=\"./media/modular-code/testing_module.png\">\n\n- A well-designed module can be tested.\n- This helps keep the codebase well-functioning and bug-free.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo make maintenance easier:\n\n<img width=\"300\" alt=\"testing a module taken from a larger project\" src=\"./media/modular-code/testing_module_maintenance.png\">\n\n- Modular code is more readable and understandable.\n- Modules can be debugged separately.\n- Modules only need to be improved/optimized once.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo allow reusability:\n\n<img width=\"400\" alt=\"reuse a module in another project\" src=\"./media/modular-code/reuse_module.png\">\n\n- A module can live independent of its original context.\n- It can be reused by another project.\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo facilitate scalability:\n\n<div style=\"display: flex; align-items: center;\">\n\n  <img alt=\"scalability\" src=\"./media/modular-code/scalability.png\" style=\"max-width: 40%; height: auto; margin-right: 20px;\">\n\n  <div>\n    <ul>\n      <li>Complexity remains low by design.</li>\n      <li>This creates space for scaling up.</li>\n    </ul>\n  </div>\n\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo create opportunities for innovation:\n\n<img alt=\"tetris shows innovation\" src=\"./media/modular-code/tetris_innovation.png\" style=\"max-width: 50%; height: auto;\">\n\n- Modules increase the capabilities and power of a project.\n- Rearrange old modules for new applications.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Why write modular code?\n\nTo save time:\n\n<img width=\"600\" alt=\"development speed\" src=\"./media/modular-code/development-speed.svg\">\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"1\">performs limited and clearly defined tasks</li>\n            <li class=\"fragment\" data-fragment-index=\"2\">has a good name</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"-->\n\n## Naming your module\n\n- be descriptive and clear\n- focus on human intelligibility\n- follow language specific conventions\n- avoid abbreviations\n\n<div style=\"text-align: center; margin-top: 20px;\">\n    <img alt=\"naming\" src=\"./media/modular-code/naming_stuff.jpg\" style=\"max-width: 100%; height: auto; max-height: 300px;\">\n</div>\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">is readable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## More readable != shorter code\n\nShorter:\n```python\nindexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n```\n\nMore modular:\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n```python\ndef getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n```\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li>is readable</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">is pure and predictable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## An impure function...\n\n... does not always give the same result:\n\n```python\ndef fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n```\n\n**Q: What will happen when we call the function a second time?**\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n```python\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n```\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A pure function...\n\n... always gives the same result:\n\n```python\ndef fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>performs limited and clearly defined tasks</li>\n            <li>has a good name</li>\n            <li>is readable</li>\n            <li>is pure and predictable</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li class=\"fragment\" data-fragment-index=\"2\">poor readability</li>\n        </ul>\n    </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Readable code\n\nModular code becomes more readable\n\n- Code is read more than it is written\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- Does a reader understand what the code does?\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n- Bad readability can be a \"code smell\"\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n\n<figure style=\"text-align: center; margin-top: 20px;\">\n    <img width=\"400\" alt=\"smelly\" src=\"./media/modular-code/Smelly-Code-Featured.avif\" style=\"margin-bottom: -10px;\">\n        <figcaption style=\"font-size: 0.3em; color: #666;\">SIphotography/Depositphotos</figcaption>\n</figure>\n<!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">repetition</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Repetitive code\n\n- Don't Repeat Yourself (DRY): place reused code into a function\n- Identify functions units by their _action_\n  - (e.g. \"plot\", \"transform\", \"extract\", \"save\")\n\n<div style=\"text-align: center; margin-top: 20px;\">\n    <img alt=\"DRY\" src=\"./media/modular-code/dry-vs-wet-code.jpg\" style=\"max-width: 100%; height: auto; max-height: 300px;\">\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li>repetition</li>\n            <li class=\"fragment\" data-fragment-index=\"1\">nested code</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Target nested code\n\nNested code is a prime target for modularization:\n\n```python\ndef sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Reduce nestedness...\n\n... by extracting modules:\n\n```python\ndef _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top < bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n```\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n<div style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    <img src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    <div>\n        <ul>\n            <li>poor readability</li>\n            <li>repetition</li>\n            <li>nested code</li>\n    </ul>\n  </div>\n</div>\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## Let tests help you\n\n- Write tests for each individual module\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- Use the test-writing procedure to look critically at the module's function:\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n    - Is the input/output clear?\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n    - What can you not yet test? Extract it into a new module.\n\n \n\n\n"}]