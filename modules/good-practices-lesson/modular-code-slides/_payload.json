[{"data":1,"prerenderedAt":1196},["Reactive",2],{"content-query-nmxCwJj1W6":3,"content-query-AT44bg6JPw":1138},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"type":10,"order":11,"author":12,"body":13,"_type":1132,"_id":1133,"_source":1134,"_file":1135,"_extension":1136,"plainText":1137},"/modules/good-practices-lesson/modular-code-slides","good-practices-lesson",false,"","Modular Code","Modular coding","slides",2,"Barbara Vreede, Ole Mussmann",{"type":14,"children":15,"toc":1104},"root",[16,25,31,38,43,53,61,69,107,111,117,140,144,150,218,222,228,233,239,252,256,261,266,271,289,293,298,303,308,321,325,330,335,369,373,378,383,389,402,406,411,416,422,426,432,467,471,477,500,510,514,519,553,557,563,568,581,586,595,599,604,643,647,653,658,667,676,685,689,695,700,709,713,718,755,759,765,791,795,801,806,814,822,830,845,849,854,883,887,893,920,930,934,939,973,977,983,988,997,1001,1007,1012,1021,1025,1030,1062,1066,1072,1080,1088,1096],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"developing-modular-code",[22],{"type":23,"value":24},"text","Developing Modular Code",{"type":17,"tag":26,"props":27,"children":28},"p",{},[29],{"type":23,"value":30},"===",{"type":17,"tag":32,"props":33,"children":35},"h2",{"id":34},"what-is-modularity",[36],{"type":23,"value":37},"What is modularity?",{"type":17,"tag":26,"props":39,"children":40},{},[41],{"type":23,"value":42},"Simple components combined to produce complex behavior.",{"type":17,"tag":44,"props":45,"children":46},"ul",{},[47],{"type":17,"tag":48,"props":49,"children":50},"li",{},[51],{"type":23,"value":52},"Software can be 'built up' from smaller elements.",{"type":17,"tag":44,"props":54,"children":55},{},[56],{"type":17,"tag":48,"props":57,"children":58},{},[59],{"type":23,"value":60},"Elements are self-contained and independent.",{"type":17,"tag":44,"props":62,"children":63},{},[64],{"type":17,"tag":48,"props":65,"children":66},{},[67],{"type":23,"value":68},"Each element handles a specific (set of) task(s).",{"type":17,"tag":70,"props":71,"children":73},"figure",{"style":72},"text-align: center; margin-top: 20px;",[74,76,84,86],{"type":23,"value":75},"\n    ",{"type":17,"tag":77,"props":78,"children":83},"img",{"height":79,"alt":80,"src":81,"style":82},300,"modularity","./media/modular-code/modern_times.jpg","margin-bottom: -10px;",[],{"type":23,"value":85},"\n        ",{"type":17,"tag":87,"props":88,"children":90},"figcaption",{"style":89},"font-size: 0.3em; color: #666;",[91,93,99,101,105],{"type":23,"value":92},"Charlie Chaplin in ",{"type":17,"tag":94,"props":95,"children":96},"i",{},[97],{"type":23,"value":98},"Modern Times",{"type":23,"value":100}," (1936).",{"type":17,"tag":102,"props":103,"children":104},"br",{},[],{"type":23,"value":106},"Â© Roy Export Company Establishment; photograph, the Museum of Modern Art/Film Stills Archive, New York City",{"type":17,"tag":26,"props":108,"children":109},{},[110],{"type":23,"value":30},{"type":17,"tag":32,"props":112,"children":114},{"id":113},"modular-code",[115],{"type":23,"value":116},"Modular code",{"type":17,"tag":118,"props":119,"children":121},"div",{"style":120},"display: flex; justify-content: center; align-items: center; margin-top: 20px;",[122,124,131,132],{"type":23,"value":123},"\n  ",{"type":17,"tag":77,"props":125,"children":130},{"width":126,"alt":127,"src":128,"style":129},400,"cohesive","./media/modular-code/small_cohesive_units.png","margin-right: 20px;",[],{"type":23,"value":123},{"type":17,"tag":77,"props":133,"children":139},{"width":126,"alt":134,"src":135,"className":136,"dataFragmentIndex":138},"bohemoth","./media/modular-code/customized_bohemoth.png",[137],"fragment","1",[],{"type":17,"tag":26,"props":141,"children":142},{},[143],{"type":23,"value":30},{"type":17,"tag":32,"props":145,"children":147},{"id":146},"what-are-these-blockselements",[148],{"type":23,"value":149},"What are these blocks/elements?",{"type":17,"tag":118,"props":151,"children":153},{"style":152},"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px; max-width: 100%;",[154,155,161,162],{"type":23,"value":75},{"type":17,"tag":77,"props":156,"children":160},{"src":157,"alt":158,"style":159},"/modules/good-practices-lesson/media/modular-code/building_blocks.png","building blocks","max-width: 40%; height: auto; margin-right: 20px; aspect-ratio: 927/736;",[],{"type":23,"value":75},{"type":17,"tag":118,"props":163,"children":164},{},[165,166,217],{"type":23,"value":85},{"type":17,"tag":44,"props":167,"children":168},{},[169,171,177,178,185,186,193,194,201,202,209,210,216],{"type":23,"value":170},"\n            ",{"type":17,"tag":48,"props":172,"children":174},{"className":173,"dataFragmentIndex":138},[137],[175],{"type":23,"value":176},"functions",{"type":23,"value":170},{"type":17,"tag":48,"props":179,"children":182},{"className":180,"dataFragmentIndex":181},[137],"2",[183],{"type":23,"value":184},"classes",{"type":23,"value":170},{"type":17,"tag":48,"props":187,"children":190},{"className":188,"dataFragmentIndex":189},[137],"3",[191],{"type":23,"value":192},"modules",{"type":23,"value":170},{"type":17,"tag":48,"props":195,"children":198},{"className":196,"dataFragmentIndex":197},[137],"4",[199],{"type":23,"value":200},"libraries/packages",{"type":23,"value":170},{"type":17,"tag":48,"props":203,"children":206},{"className":204,"dataFragmentIndex":205},[137],"5",[207],{"type":23,"value":208},"programs",{"type":23,"value":170},{"type":17,"tag":48,"props":211,"children":213},{"className":212,"dataFragmentIndex":205},[137],[214],{"type":23,"value":215},"...",{"type":23,"value":85},{"type":23,"value":75},{"type":17,"tag":26,"props":219,"children":220},{},[221],{"type":23,"value":30},{"type":17,"tag":32,"props":223,"children":225},{"id":224},"why-write-modular-code",[226],{"type":23,"value":227},"Why write modular code?",{"type":17,"tag":26,"props":229,"children":230},{},[231],{"type":23,"value":232},"To increase robustness",{"type":17,"tag":77,"props":234,"children":238},{"width":235,"alt":236,"src":237},200,"testing a single module","./media/modular-code/testing_module.png",[],{"type":17,"tag":44,"props":240,"children":241},{},[242,247],{"type":17,"tag":48,"props":243,"children":244},{},[245],{"type":23,"value":246},"A well-designed module can be tested.",{"type":17,"tag":48,"props":248,"children":249},{},[250],{"type":23,"value":251},"This helps keep the codebase well-functioning and bug-free.",{"type":17,"tag":26,"props":253,"children":254},{},[255],{"type":23,"value":30},{"type":17,"tag":32,"props":257,"children":259},{"id":258},"why-write-modular-code-1",[260],{"type":23,"value":227},{"type":17,"tag":26,"props":262,"children":263},{},[264],{"type":23,"value":265},"To make maintenance easier:",{"type":17,"tag":77,"props":267,"children":270},{"width":79,"alt":268,"src":269},"testing a module taken from a larger project","./media/modular-code/testing_module_maintenance.png",[],{"type":17,"tag":44,"props":272,"children":273},{},[274,279,284],{"type":17,"tag":48,"props":275,"children":276},{},[277],{"type":23,"value":278},"Modular code is more readable and understandable.",{"type":17,"tag":48,"props":280,"children":281},{},[282],{"type":23,"value":283},"Modules can be debugged separately.",{"type":17,"tag":48,"props":285,"children":286},{},[287],{"type":23,"value":288},"Modules only need to be improved/optimized once.",{"type":17,"tag":26,"props":290,"children":291},{},[292],{"type":23,"value":30},{"type":17,"tag":32,"props":294,"children":296},{"id":295},"why-write-modular-code-2",[297],{"type":23,"value":227},{"type":17,"tag":26,"props":299,"children":300},{},[301],{"type":23,"value":302},"To allow reusability:",{"type":17,"tag":77,"props":304,"children":307},{"width":126,"alt":305,"src":306},"reuse a module in another project","./media/modular-code/reuse_module.png",[],{"type":17,"tag":44,"props":309,"children":310},{},[311,316],{"type":17,"tag":48,"props":312,"children":313},{},[314],{"type":23,"value":315},"A module can live independent of its original context.",{"type":17,"tag":48,"props":317,"children":318},{},[319],{"type":23,"value":320},"It can be reused by another project.",{"type":17,"tag":26,"props":322,"children":323},{},[324],{"type":23,"value":30},{"type":17,"tag":32,"props":326,"children":328},{"id":327},"why-write-modular-code-3",[329],{"type":23,"value":227},{"type":17,"tag":26,"props":331,"children":332},{},[333],{"type":23,"value":334},"To facilitate scalability:",{"type":17,"tag":118,"props":336,"children":338},{"style":337},"display: flex; align-items: center;",[339,340,346,347],{"type":23,"value":123},{"type":17,"tag":77,"props":341,"children":345},{"alt":342,"src":343,"style":344},"scalability","/modules/good-practices-lesson/media/modular-code/scalability.png","max-width: 40%; height: auto; margin-right: 20px; aspect-ratio: 892/1244;",[],{"type":23,"value":123},{"type":17,"tag":118,"props":348,"children":349},{},[350,351,368],{"type":23,"value":75},{"type":17,"tag":44,"props":352,"children":353},{},[354,356,361,362,367],{"type":23,"value":355},"\n      ",{"type":17,"tag":48,"props":357,"children":358},{},[359],{"type":23,"value":360},"Complexity remains low by design.",{"type":23,"value":355},{"type":17,"tag":48,"props":363,"children":364},{},[365],{"type":23,"value":366},"This creates space for scaling up.",{"type":23,"value":75},{"type":23,"value":123},{"type":17,"tag":26,"props":370,"children":371},{},[372],{"type":23,"value":30},{"type":17,"tag":32,"props":374,"children":376},{"id":375},"why-write-modular-code-4",[377],{"type":23,"value":227},{"type":17,"tag":26,"props":379,"children":380},{},[381],{"type":23,"value":382},"To create opportunities for innovation:",{"type":17,"tag":77,"props":384,"children":388},{"alt":385,"src":386,"style":387},"tetris shows innovation","/modules/good-practices-lesson/media/modular-code/tetris_innovation.png","max-width: 50%; height: auto; aspect-ratio: 1824/1356;",[],{"type":17,"tag":44,"props":390,"children":391},{},[392,397],{"type":17,"tag":48,"props":393,"children":394},{},[395],{"type":23,"value":396},"Modules increase the capabilities and power of a project.",{"type":17,"tag":48,"props":398,"children":399},{},[400],{"type":23,"value":401},"Rearrange old modules for new applications.",{"type":17,"tag":26,"props":403,"children":404},{},[405],{"type":23,"value":30},{"type":17,"tag":32,"props":407,"children":409},{"id":408},"why-write-modular-code-5",[410],{"type":23,"value":227},{"type":17,"tag":26,"props":412,"children":413},{},[414],{"type":23,"value":415},"To save time:",{"type":17,"tag":77,"props":417,"children":421},{"width":418,"alt":419,"src":420},600,"development speed","./media/modular-code/development-speed.svg",[],{"type":17,"tag":26,"props":423,"children":424},{},[425],{"type":23,"value":30},{"type":17,"tag":32,"props":427,"children":429},{"id":428},"a-good-module",[430],{"type":23,"value":431},"A good module...",{"type":17,"tag":118,"props":433,"children":435},{"style":434},"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;",[436,437,443,444],{"type":23,"value":75},{"type":17,"tag":77,"props":438,"children":442},{"src":439,"alt":440,"width":79,"style":441},"/modules/good-practices-lesson/media/modular-code/units.png","units","margin-right: 20px; aspect-ratio: 1157/1195;",[],{"type":23,"value":75},{"type":17,"tag":118,"props":445,"children":446},{},[447,448,466],{"type":23,"value":85},{"type":17,"tag":44,"props":449,"children":450},{},[451,452,458,459,465],{"type":23,"value":170},{"type":17,"tag":48,"props":453,"children":455},{"className":454,"dataFragmentIndex":138},[137],[456],{"type":23,"value":457},"performs limited and clearly defined tasks",{"type":23,"value":170},{"type":17,"tag":48,"props":460,"children":462},{"className":461,"dataFragmentIndex":181},[137],[463],{"type":23,"value":464},"has a good name",{"type":23,"value":85},{"type":23,"value":75},{"type":17,"tag":26,"props":468,"children":469},{},[470],{"type":23,"value":30},{"type":17,"tag":32,"props":472,"children":474},{"id":473},"naming-your-module",[475],{"type":23,"value":476},"Naming your module",{"type":17,"tag":44,"props":478,"children":479},{},[480,485,490,495],{"type":17,"tag":48,"props":481,"children":482},{},[483],{"type":23,"value":484},"be descriptive and clear",{"type":17,"tag":48,"props":486,"children":487},{},[488],{"type":23,"value":489},"focus on human intelligibility",{"type":17,"tag":48,"props":491,"children":492},{},[493],{"type":23,"value":494},"follow language specific conventions",{"type":17,"tag":48,"props":496,"children":497},{},[498],{"type":23,"value":499},"avoid abbreviations",{"type":17,"tag":118,"props":501,"children":502},{"style":72},[503,504],{"type":23,"value":75},{"type":17,"tag":77,"props":505,"children":509},{"alt":506,"src":507,"style":508},"naming","/modules/good-practices-lesson/media/modular-code/naming_stuff.jpg","max-width: 100%; height: auto; max-height: 300px; aspect-ratio: 650/615;",[],{"type":17,"tag":26,"props":511,"children":512},{},[513],{"type":23,"value":30},{"type":17,"tag":32,"props":515,"children":517},{"id":516},"a-good-module-1",[518],{"type":23,"value":431},{"type":17,"tag":118,"props":520,"children":521},{"style":434},[522,523,526,527],{"type":23,"value":75},{"type":17,"tag":77,"props":524,"children":525},{"src":439,"alt":440,"width":79,"style":441},[],{"type":23,"value":75},{"type":17,"tag":118,"props":528,"children":529},{},[530,531,552],{"type":23,"value":85},{"type":17,"tag":44,"props":532,"children":533},{},[534,535,539,540,544,545,551],{"type":23,"value":170},{"type":17,"tag":48,"props":536,"children":537},{},[538],{"type":23,"value":457},{"type":23,"value":170},{"type":17,"tag":48,"props":541,"children":542},{},[543],{"type":23,"value":464},{"type":23,"value":170},{"type":17,"tag":48,"props":546,"children":548},{"className":547,"dataFragmentIndex":138},[137],[549],{"type":23,"value":550},"is readable",{"type":23,"value":85},{"type":23,"value":75},{"type":17,"tag":26,"props":554,"children":555},{},[556],{"type":23,"value":30},{"type":17,"tag":32,"props":558,"children":560},{"id":559},"more-readable-shorter-code",[561],{"type":23,"value":562},"More readable != shorter code",{"type":17,"tag":26,"props":564,"children":565},{},[566],{"type":23,"value":567},"Shorter:",{"type":17,"tag":569,"props":570,"children":575},"pre",{"code":571,"language":572,"meta":7,"className":573},"indexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n","python",[574],"language-python",[576],{"type":17,"tag":577,"props":578,"children":579},"code",{"__ignoreMap":7},[580],{"type":23,"value":571},{"type":17,"tag":26,"props":582,"children":583},{},[584],{"type":23,"value":585},"More modular:",{"type":17,"tag":569,"props":587,"children":590},{"code":588,"language":572,"meta":7,"className":589},"def getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n",[574],[591],{"type":17,"tag":577,"props":592,"children":593},{"__ignoreMap":7},[594],{"type":23,"value":588},{"type":17,"tag":26,"props":596,"children":597},{},[598],{"type":23,"value":30},{"type":17,"tag":32,"props":600,"children":602},{"id":601},"a-good-module-2",[603],{"type":23,"value":431},{"type":17,"tag":118,"props":605,"children":606},{"style":434},[607,608,611,612],{"type":23,"value":75},{"type":17,"tag":77,"props":609,"children":610},{"src":439,"alt":440,"width":79,"style":441},[],{"type":23,"value":75},{"type":17,"tag":118,"props":613,"children":614},{},[615,616,642],{"type":23,"value":85},{"type":17,"tag":44,"props":617,"children":618},{},[619,620,624,625,629,630,634,635,641],{"type":23,"value":170},{"type":17,"tag":48,"props":621,"children":622},{},[623],{"type":23,"value":457},{"type":23,"value":170},{"type":17,"tag":48,"props":626,"children":627},{},[628],{"type":23,"value":464},{"type":23,"value":170},{"type":17,"tag":48,"props":631,"children":632},{},[633],{"type":23,"value":550},{"type":23,"value":170},{"type":17,"tag":48,"props":636,"children":638},{"className":637,"dataFragmentIndex":138},[137],[639],{"type":23,"value":640},"is pure and predictable",{"type":23,"value":85},{"type":23,"value":75},{"type":17,"tag":26,"props":644,"children":645},{},[646],{"type":23,"value":30},{"type":17,"tag":32,"props":648,"children":650},{"id":649},"an-impure-function",[651],{"type":23,"value":652},"An impure function...",{"type":17,"tag":26,"props":654,"children":655},{},[656],{"type":23,"value":657},"... does not always give the same result:",{"type":17,"tag":569,"props":659,"children":662},{"code":660,"language":572,"meta":7,"className":661},"def fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n",[574],[663],{"type":17,"tag":577,"props":664,"children":665},{"__ignoreMap":7},[666],{"type":23,"value":660},{"type":17,"tag":26,"props":668,"children":669},{},[670],{"type":17,"tag":671,"props":672,"children":673},"strong",{},[674],{"type":23,"value":675},"Q: What will happen when we call the function a second time?",{"type":17,"tag":569,"props":677,"children":680},{"code":678,"language":572,"meta":7,"className":679},">>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n",[574],[681],{"type":17,"tag":577,"props":682,"children":683},{"__ignoreMap":7},[684],{"type":23,"value":678},{"type":17,"tag":26,"props":686,"children":687},{},[688],{"type":23,"value":30},{"type":17,"tag":32,"props":690,"children":692},{"id":691},"a-pure-function",[693],{"type":23,"value":694},"A pure function...",{"type":17,"tag":26,"props":696,"children":697},{},[698],{"type":23,"value":699},"... always gives the same result:",{"type":17,"tag":569,"props":701,"children":704},{"code":702,"language":572,"meta":7,"className":703},"def fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n",[574],[705],{"type":17,"tag":577,"props":706,"children":707},{"__ignoreMap":7},[708],{"type":23,"value":702},{"type":17,"tag":26,"props":710,"children":711},{},[712],{"type":23,"value":30},{"type":17,"tag":32,"props":714,"children":716},{"id":715},"a-good-module-3",[717],{"type":23,"value":431},{"type":17,"tag":118,"props":719,"children":720},{"style":434},[721,722,725,726],{"type":23,"value":75},{"type":17,"tag":77,"props":723,"children":724},{"src":439,"alt":440,"width":79,"style":441},[],{"type":23,"value":75},{"type":17,"tag":118,"props":727,"children":728},{},[729,730,754],{"type":23,"value":85},{"type":17,"tag":44,"props":731,"children":732},{},[733,734,738,739,743,744,748,749,753],{"type":23,"value":170},{"type":17,"tag":48,"props":735,"children":736},{},[737],{"type":23,"value":457},{"type":23,"value":170},{"type":17,"tag":48,"props":740,"children":741},{},[742],{"type":23,"value":464},{"type":23,"value":170},{"type":17,"tag":48,"props":745,"children":746},{},[747],{"type":23,"value":550},{"type":23,"value":170},{"type":17,"tag":48,"props":750,"children":751},{},[752],{"type":23,"value":640},{"type":23,"value":85},{"type":23,"value":75},{"type":17,"tag":26,"props":756,"children":757},{},[758],{"type":23,"value":30},{"type":17,"tag":32,"props":760,"children":762},{"id":761},"identifying-opportunities-for-modularization",[763],{"type":23,"value":764},"Identifying opportunities for modularization",{"type":17,"tag":118,"props":766,"children":767},{"style":434},[768,769,774,775],{"type":23,"value":75},{"type":17,"tag":77,"props":770,"children":773},{"src":771,"alt":236,"width":79,"style":772},"/modules/good-practices-lesson/media/modular-code/testing_module.png","margin-right: 20px; aspect-ratio: 492/498;",[],{"type":23,"value":75},{"type":17,"tag":118,"props":776,"children":777},{},[778,779,790],{"type":23,"value":85},{"type":17,"tag":44,"props":780,"children":781},{},[782,783,789],{"type":23,"value":170},{"type":17,"tag":48,"props":784,"children":786},{"className":785,"dataFragmentIndex":181},[137],[787],{"type":23,"value":788},"poor readability",{"type":23,"value":85},{"type":23,"value":75},{"type":17,"tag":26,"props":792,"children":793},{},[794],{"type":23,"value":30},{"type":17,"tag":32,"props":796,"children":798},{"id":797},"readable-code",[799],{"type":23,"value":800},"Readable code",{"type":17,"tag":26,"props":802,"children":803},{},[804],{"type":23,"value":805},"Modular code becomes more readable",{"type":17,"tag":44,"props":807,"children":808},{},[809],{"type":17,"tag":48,"props":810,"children":811},{},[812],{"type":23,"value":813},"Code is read more than it is written",{"type":17,"tag":44,"props":815,"children":816},{},[817],{"type":17,"tag":48,"props":818,"children":819},{},[820],{"type":23,"value":821},"Does a reader understand what the code does?",{"type":17,"tag":44,"props":823,"children":824},{},[825],{"type":17,"tag":48,"props":826,"children":827},{},[828],{"type":23,"value":829},"Bad readability can be a \"code smell\"",{"type":17,"tag":70,"props":831,"children":832},{"style":72},[833,834,839,840],{"type":23,"value":75},{"type":17,"tag":77,"props":835,"children":838},{"width":126,"alt":836,"src":837,"style":82},"smelly","./media/modular-code/Smelly-Code-Featured.avif",[],{"type":23,"value":85},{"type":17,"tag":87,"props":841,"children":842},{"style":89},[843],{"type":23,"value":844},"SIphotography/Depositphotos",{"type":17,"tag":26,"props":846,"children":847},{},[848],{"type":23,"value":30},{"type":17,"tag":32,"props":850,"children":852},{"id":851},"identifying-opportunities-for-modularization-1",[853],{"type":23,"value":764},{"type":17,"tag":118,"props":855,"children":856},{"style":434},[857,858,861,862],{"type":23,"value":75},{"type":17,"tag":77,"props":859,"children":860},{"src":771,"alt":236,"width":79,"style":772},[],{"type":23,"value":75},{"type":17,"tag":118,"props":863,"children":864},{},[865,866,882],{"type":23,"value":85},{"type":17,"tag":44,"props":867,"children":868},{},[869,870,874,875,881],{"type":23,"value":170},{"type":17,"tag":48,"props":871,"children":872},{},[873],{"type":23,"value":788},{"type":23,"value":170},{"type":17,"tag":48,"props":876,"children":878},{"className":877,"dataFragmentIndex":138},[137],[879],{"type":23,"value":880},"repetition",{"type":23,"value":75},{"type":23,"value":123},{"type":17,"tag":26,"props":884,"children":885},{},[886],{"type":23,"value":30},{"type":17,"tag":32,"props":888,"children":890},{"id":889},"repetitive-code",[891],{"type":23,"value":892},"Repetitive code",{"type":17,"tag":44,"props":894,"children":895},{},[896,901],{"type":17,"tag":48,"props":897,"children":898},{},[899],{"type":23,"value":900},"Don't Repeat Yourself (DRY): place reused code into a function",{"type":17,"tag":48,"props":902,"children":903},{},[904,906,912],{"type":23,"value":905},"Identify functions units by their ",{"type":17,"tag":907,"props":908,"children":909},"em",{},[910],{"type":23,"value":911},"action",{"type":17,"tag":44,"props":913,"children":914},{},[915],{"type":17,"tag":48,"props":916,"children":917},{},[918],{"type":23,"value":919},"(e.g. \"plot\", \"transform\", \"extract\", \"save\")",{"type":17,"tag":118,"props":921,"children":922},{"style":72},[923,924],{"type":23,"value":75},{"type":17,"tag":77,"props":925,"children":929},{"alt":926,"src":927,"style":928},"DRY","/modules/good-practices-lesson/media/modular-code/dry-vs-wet-code.jpg","max-width: 100%; height: auto; max-height: 300px; aspect-ratio: 800/686;",[],{"type":17,"tag":26,"props":931,"children":932},{},[933],{"type":23,"value":30},{"type":17,"tag":32,"props":935,"children":937},{"id":936},"identifying-opportunities-for-modularization-2",[938],{"type":23,"value":764},{"type":17,"tag":118,"props":940,"children":941},{"style":434},[942,943,946,947],{"type":23,"value":75},{"type":17,"tag":77,"props":944,"children":945},{"src":771,"alt":236,"width":79,"style":772},[],{"type":23,"value":75},{"type":17,"tag":118,"props":948,"children":949},{},[950,951,972],{"type":23,"value":85},{"type":17,"tag":44,"props":952,"children":953},{},[954,955,959,960,964,965,971],{"type":23,"value":170},{"type":17,"tag":48,"props":956,"children":957},{},[958],{"type":23,"value":788},{"type":23,"value":170},{"type":17,"tag":48,"props":961,"children":962},{},[963],{"type":23,"value":880},{"type":23,"value":170},{"type":17,"tag":48,"props":966,"children":968},{"className":967,"dataFragmentIndex":138},[137],[969],{"type":23,"value":970},"nested code",{"type":23,"value":75},{"type":23,"value":123},{"type":17,"tag":26,"props":974,"children":975},{},[976],{"type":23,"value":30},{"type":17,"tag":32,"props":978,"children":980},{"id":979},"target-nested-code",[981],{"type":23,"value":982},"Target nested code",{"type":17,"tag":26,"props":984,"children":985},{},[986],{"type":23,"value":987},"Nested code is a prime target for modularization:",{"type":17,"tag":569,"props":989,"children":992},{"code":990,"language":572,"meta":7,"className":991},"def sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n",[574],[993],{"type":17,"tag":577,"props":994,"children":995},{"__ignoreMap":7},[996],{"type":23,"value":990},{"type":17,"tag":26,"props":998,"children":999},{},[1000],{"type":23,"value":30},{"type":17,"tag":32,"props":1002,"children":1004},{"id":1003},"reduce-nestedness",[1005],{"type":23,"value":1006},"Reduce nestedness...",{"type":17,"tag":26,"props":1008,"children":1009},{},[1010],{"type":23,"value":1011},"... by extracting modules:",{"type":17,"tag":569,"props":1013,"children":1016},{"code":1014,"language":572,"meta":7,"className":1015},"def _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top \u003C bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n",[574],[1017],{"type":17,"tag":577,"props":1018,"children":1019},{"__ignoreMap":7},[1020],{"type":23,"value":1014},{"type":17,"tag":26,"props":1022,"children":1023},{},[1024],{"type":23,"value":30},{"type":17,"tag":32,"props":1026,"children":1028},{"id":1027},"identifying-opportunities-for-modularization-3",[1029],{"type":23,"value":764},{"type":17,"tag":118,"props":1031,"children":1032},{"style":434},[1033,1034,1037,1038],{"type":23,"value":75},{"type":17,"tag":77,"props":1035,"children":1036},{"src":771,"alt":236,"width":79,"style":772},[],{"type":23,"value":75},{"type":17,"tag":118,"props":1039,"children":1040},{},[1041,1042,1061],{"type":23,"value":85},{"type":17,"tag":44,"props":1043,"children":1044},{},[1045,1046,1050,1051,1055,1056,1060],{"type":23,"value":170},{"type":17,"tag":48,"props":1047,"children":1048},{},[1049],{"type":23,"value":788},{"type":23,"value":170},{"type":17,"tag":48,"props":1052,"children":1053},{},[1054],{"type":23,"value":880},{"type":23,"value":170},{"type":17,"tag":48,"props":1057,"children":1058},{},[1059],{"type":23,"value":970},{"type":23,"value":75},{"type":23,"value":123},{"type":17,"tag":26,"props":1063,"children":1064},{},[1065],{"type":23,"value":30},{"type":17,"tag":32,"props":1067,"children":1069},{"id":1068},"let-tests-help-you",[1070],{"type":23,"value":1071},"Let tests help you",{"type":17,"tag":44,"props":1073,"children":1074},{},[1075],{"type":17,"tag":48,"props":1076,"children":1077},{},[1078],{"type":23,"value":1079},"Write tests for each individual module",{"type":17,"tag":44,"props":1081,"children":1082},{},[1083],{"type":17,"tag":48,"props":1084,"children":1085},{},[1086],{"type":23,"value":1087},"Use the test-writing procedure to look critically at the module's function:",{"type":17,"tag":569,"props":1089,"children":1091},{"code":1090},"- Is the input/output clear?\n",[1092],{"type":17,"tag":577,"props":1093,"children":1094},{"__ignoreMap":7},[1095],{"type":23,"value":1090},{"type":17,"tag":569,"props":1097,"children":1099},{"code":1098},"- What can you not yet test? Extract it into a new module.\n",[1100],{"type":17,"tag":577,"props":1101,"children":1102},{"__ignoreMap":7},[1103],{"type":23,"value":1098},{"title":7,"searchDepth":11,"depth":11,"links":1105},[1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131],{"id":34,"depth":11,"text":37},{"id":113,"depth":11,"text":116},{"id":146,"depth":11,"text":149},{"id":224,"depth":11,"text":227},{"id":258,"depth":11,"text":227},{"id":295,"depth":11,"text":227},{"id":327,"depth":11,"text":227},{"id":375,"depth":11,"text":227},{"id":408,"depth":11,"text":227},{"id":428,"depth":11,"text":431},{"id":473,"depth":11,"text":476},{"id":516,"depth":11,"text":431},{"id":559,"depth":11,"text":562},{"id":601,"depth":11,"text":431},{"id":649,"depth":11,"text":652},{"id":691,"depth":11,"text":694},{"id":715,"depth":11,"text":431},{"id":761,"depth":11,"text":764},{"id":797,"depth":11,"text":800},{"id":851,"depth":11,"text":764},{"id":889,"depth":11,"text":892},{"id":936,"depth":11,"text":764},{"id":979,"depth":11,"text":982},{"id":1003,"depth":11,"text":1006},{"id":1027,"depth":11,"text":764},{"id":1068,"depth":11,"text":1071},"markdown","local_fs:modules:good-practices-lesson:modular-code-slides.md","local_fs","modules/good-practices-lesson/modular-code-slides.md","md","---\ntitle: Modular Code\ntype: slides\norder: 2\nauthor: Barbara Vreede, Ole Mussmann\ndescription: Modular coding\n---\n\n\u003C!-- .slide: data-state=\"title\" -->\n\n# Developing Modular Code\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n===\n\n## What is modularity?\n\nSimple components combined to produce complex behavior.\n\n- Software can be 'built up' from smaller elements.\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n- Elements are self-contained and independent.\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n- Each element handles a specific (set of) task(s).\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"5\" -->\n\n\u003Cfigure style=\"text-align: center; margin-top: 20px;\">\n    \u003Cimg height=\"300\" alt=\"modularity\" src=\"./media/modular-code/modern_times.jpg\" style=\"margin-bottom: -10px;\">\n        \u003Cfigcaption style=\"font-size: 0.3em; color: #666;\">Charlie Chaplin in \u003Ci>Modern Times\u003C/i> (1936).\u003Cbr>Â© Roy Export Company Establishment; photograph, the Museum of Modern Art/Film Stills Archive, New York City\u003C/figcaption>\n\u003C/figure>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Modular code\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: center; margin-top: 20px;\">\n  \u003Cimg width=\"400\" alt=\"cohesive\" src=\"./media/modular-code/small_cohesive_units.png\" style=\"margin-right: 20px;\">\n  \u003Cimg width=\"400\" alt=\"bohemoth\" src=\"./media/modular-code/customized_bohemoth.png\" class=\"fragment\" data-fragment-index=\"1\">\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## What are these blocks/elements?\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px; max-width: 100%;\">\n    \u003Cimg src=\"./media/modular-code/building_blocks.png\" alt=\"building blocks\" style=\"max-width: 40%; height: auto; margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli class=\"fragment\" data-fragment-index=\"1\">functions\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"2\">classes\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"3\">modules\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"4\">libraries/packages\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"5\">programs\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"5\">...\u003C/li>\n        \u003C/ul>\n    \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo increase robustness\n\n\u003Cimg width=\"200\" alt=\"testing a single module\" src=\"./media/modular-code/testing_module.png\">\n\n- A well-designed module can be tested.\n- This helps keep the codebase well-functioning and bug-free.\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo make maintenance easier:\n\n\u003Cimg width=\"300\" alt=\"testing a module taken from a larger project\" src=\"./media/modular-code/testing_module_maintenance.png\">\n\n- Modular code is more readable and understandable.\n- Modules can be debugged separately.\n- Modules only need to be improved/optimized once.\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo allow reusability:\n\n\u003Cimg width=\"400\" alt=\"reuse a module in another project\" src=\"./media/modular-code/reuse_module.png\">\n\n- A module can live independent of its original context.\n- It can be reused by another project.\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo facilitate scalability:\n\n\u003Cdiv style=\"display: flex; align-items: center;\">\n\n  \u003Cimg alt=\"scalability\" src=\"./media/modular-code/scalability.png\" style=\"max-width: 40%; height: auto; margin-right: 20px;\">\n\n  \u003Cdiv>\n    \u003Cul>\n      \u003Cli>Complexity remains low by design.\u003C/li>\n      \u003Cli>This creates space for scaling up.\u003C/li>\n    \u003C/ul>\n  \u003C/div>\n\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Why write modular code?\n\nTo create opportunities for innovation:\n\n\u003Cimg alt=\"tetris shows innovation\" src=\"./media/modular-code/tetris_innovation.png\" style=\"max-width: 50%; height: auto;\">\n\n- Modules increase the capabilities and power of a project.\n- Rearrange old modules for new applications.\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n## Why write modular code?\n\nTo save time:\n\n\u003Cimg width=\"600\" alt=\"development speed\" src=\"./media/modular-code/development-speed.svg\">\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## A good module...\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    \u003Cimg src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli class=\"fragment\" data-fragment-index=\"1\">performs limited and clearly defined tasks\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"2\">has a good name\u003C/li>\n        \u003C/ul>\n    \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"-->\n\n## Naming your module\n\n- be descriptive and clear\n- focus on human intelligibility\n- follow language specific conventions\n- avoid abbreviations\n\n\u003Cdiv style=\"text-align: center; margin-top: 20px;\">\n    \u003Cimg alt=\"naming\" src=\"./media/modular-code/naming_stuff.jpg\" style=\"max-width: 100%; height: auto; max-height: 300px;\">\n\u003C/div>\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    \u003Cimg src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli>performs limited and clearly defined tasks\u003C/li>\n            \u003Cli>has a good name\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"1\">is readable\u003C/li>\n        \u003C/ul>\n    \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## More readable != shorter code\n\nShorter:\n```python\nindexATG = [n for n,i in enumerate(myList) if i == 'ATG']\nindexAAG = [n for n,i in enumerate(myList) if i == 'AAG']\n```\n\nMore modular:\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n```python\ndef getIndex(inputList,z):\n    zIndex = [n for n,i in enumerate(inputList) if i == z]\n    return zIndex\n\nindexATG = getIndex(myList,'ATG')\nindexAAG = getIndex(myList,'AAG')\n```\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    \u003Cimg src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli>performs limited and clearly defined tasks\u003C/li>\n            \u003Cli>has a good name\u003C/li>\n            \u003Cli>is readable\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"1\">is pure and predictable\u003C/li>\n        \u003C/ul>\n    \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## An impure function...\n\n... does not always give the same result:\n\n```python\ndef fahrenheit_to_celsius(temp_list, converted_temps=[]):\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n```\n\n**Q: What will happen when we call the function a second time?**\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\n```python\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0, 0.0, 25.0]\n```\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## A pure function...\n\n... always gives the same result:\n\n```python\ndef fahrenheit_to_celsius(temp_list, converted_temps=None):\n    if converted_temps == None:\n        converted_temps = []\n    for temp in temp_list:\n        temp_c = (temp - 32.0) * (5.0/9.0)\n        converted_temps.append(temp_c)\n\n    return converted_temps\n\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n>>> fahrenheit_to_celsius([32.0, 77.0])  # [0.0, 25.0]\n```\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## A good module...\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    \u003Cimg src=\"./media/modular-code/units.png\" alt=\"units\" width=\"300\" style=\"margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli>performs limited and clearly defined tasks\u003C/li>\n            \u003Cli>has a good name\u003C/li>\n            \u003Cli>is readable\u003C/li>\n            \u003Cli>is pure and predictable\u003C/li>\n        \u003C/ul>\n    \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    \u003Cimg src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli class=\"fragment\" data-fragment-index=\"2\">poor readability\u003C/li>\n        \u003C/ul>\n    \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Readable code\n\nModular code becomes more readable\n\n- Code is read more than it is written\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- Does a reader understand what the code does?\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n- Bad readability can be a \"code smell\"\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n\n\u003Cfigure style=\"text-align: center; margin-top: 20px;\">\n    \u003Cimg width=\"400\" alt=\"smelly\" src=\"./media/modular-code/Smelly-Code-Featured.avif\" style=\"margin-bottom: -10px;\">\n        \u003Cfigcaption style=\"font-size: 0.3em; color: #666;\">SIphotography/Depositphotos\u003C/figcaption>\n\u003C/figure>\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"4\" -->\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    \u003Cimg src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli>poor readability\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"1\">repetition\u003C/li>\n    \u003C/ul>\n  \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Repetitive code\n\n- Don't Repeat Yourself (DRY): place reused code into a function\n- Identify functions units by their _action_\n  - (e.g. \"plot\", \"transform\", \"extract\", \"save\")\n\n\u003Cdiv style=\"text-align: center; margin-top: 20px;\">\n    \u003Cimg alt=\"DRY\" src=\"./media/modular-code/dry-vs-wet-code.jpg\" style=\"max-width: 100%; height: auto; max-height: 300px;\">\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    \u003Cimg src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli>poor readability\u003C/li>\n            \u003Cli>repetition\u003C/li>\n            \u003Cli class=\"fragment\" data-fragment-index=\"1\">nested code\u003C/li>\n    \u003C/ul>\n  \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Target nested code\n\nNested code is a prime target for modularization:\n\n```python\ndef sum_even_numbers(bottom, top):\n    if top > bottom:\n        sum = 0\n        for x in range(bottom, top):\n            if x % 2 == 0:\n                sum += x\n        return sum\n    return 0\n\nsum_even_numbers(2, 14)  # 42\n```\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Reduce nestedness...\n\n... by extracting modules:\n\n```python\ndef _filter_even(number):\n    if number % 2 == 0:\n        return number\n    return 0\n\ndef sum_even_numbers(bottom, top):\n    if top \u003C bottom:\n        return 0\n    \n    sum = 0\n    for x in range(bottom, top):\n        sum += _filter_even(x)\n    return sum\n\nsum_even_numbers (2,14)  # 42\n```\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Identifying opportunities for modularization\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: flex-start; margin-top: 20px;\">\n    \u003Cimg src=\"./media/modular-code/testing_module.png\" alt=\"testing a single module\" width=\"300\" style=\"margin-right: 20px;\">\n    \u003Cdiv>\n        \u003Cul>\n            \u003Cli>poor readability\u003C/li>\n            \u003Cli>repetition\u003C/li>\n            \u003Cli>nested code\u003C/li>\n    \u003C/ul>\n  \u003C/div>\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Let tests help you\n\n- Write tests for each individual module\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- Use the test-writing procedure to look critically at the module's function:\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n    - Is the input/output clear?\n\u003C!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n    - What can you not yet test? Extract it into a new module.\n\n \n\n\n",[1139,1174],{"_path":1140,"_dir":1141,"_draft":6,"_partial":6,"_locale":7,"title":1142,"description":7,"body":1143,"_type":1132,"_id":1171,"_source":1134,"_file":1172,"_extension":1136,"plainText":1173},"/main/about","main","About",{"type":14,"children":1144,"toc":1167},[1145,1151,1156,1162],{"type":17,"tag":32,"props":1146,"children":1148},{"id":1147},"about-this-lessonproject",[1149],{"type":23,"value":1150},"About this lesson/project",{"type":17,"tag":26,"props":1152,"children":1153},{},[1154],{"type":23,"value":1155},"Provide details about the project and lesson.",{"type":17,"tag":32,"props":1157,"children":1159},{"id":1158},"target-audience",[1160],{"type":23,"value":1161},"Target audience",{"type":17,"tag":26,"props":1163,"children":1164},{},[1165],{"type":23,"value":1166},"Define target audience for this material.",{"title":7,"searchDepth":11,"depth":11,"links":1168},[1169,1170],{"id":1147,"depth":11,"text":1150},{"id":1158,"depth":11,"text":1161},"local_fs:main:about.md","main/about.md","---\ntitle: About\n---\n\n## About this lesson/project\n\nProvide details about the project and lesson.\n\n## Target audience\n\nDefine target audience for this material.",{"_path":1175,"_dir":1141,"_draft":6,"_partial":6,"_locale":7,"title":1176,"description":7,"body":1177,"_type":1132,"_id":1193,"_source":1134,"_file":1194,"_extension":1136,"plainText":1195},"/main/contribute","Contribute",{"type":14,"children":1178,"toc":1190},[1179,1185],{"type":17,"tag":32,"props":1180,"children":1182},{"id":1181},"contributing-to-this-lesson",[1183],{"type":23,"value":1184},"Contributing to this lesson",{"type":17,"tag":26,"props":1186,"children":1187},{},[1188],{"type":23,"value":1189},"Add contributing guidelines for you project.",{"title":7,"searchDepth":11,"depth":11,"links":1191},[1192],{"id":1181,"depth":11,"text":1184},"local_fs:main:contribute.md","main/contribute.md","---\ntitle: Contribute\n---\n\n## Contributing to this lesson\n\nAdd contributing guidelines for you project.",1740409955481]