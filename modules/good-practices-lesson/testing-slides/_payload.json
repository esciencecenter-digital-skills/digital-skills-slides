[{"data":1,"prerenderedAt":925},["Reactive",2],{"content-query-IHDDqgcRBr":3,"content-query-AT44bg6JPw":867},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"type":10,"order":11,"author":12,"body":13,"_type":861,"_id":862,"_source":863,"_file":864,"_extension":865,"plainText":866},"/modules/good-practices-lesson/testing-slides","good-practices-lesson",false,"","Testing","Getting more professional","slides",4,"Ole Mussmann",{"type":14,"children":15,"toc":844},"root",[16,24,30,35,42,118,127,131,137,171,200,207,211,217,222,246,266,270,276,294,302,306,312,325,348,361,374,378,384,394,398,404,413,417,423,433,457,461,467,485,495,499,505,551,568,577,589,593,598,639,643,649,692,734,738,744,805,809,814,837],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"testing",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"note:",{"type":17,"tag":25,"props":31,"children":32},{},[33],{"type":23,"value":34},"===",{"type":17,"tag":36,"props":37,"children":39},"h2",{"id":38},"why-test",[40],{"type":23,"value":41},"Why Test?",{"type":17,"tag":43,"props":44,"children":45},"ul",{},[46,48,71,72,95,96],{"type":23,"value":47},"\n  ",{"type":17,"tag":49,"props":50,"children":51},"li",{},[52,54],{"type":23,"value":53},"Preserve functionality\n  ",{"type":17,"tag":43,"props":55,"children":56},{},[57,59,64,65,70],{"type":23,"value":58},"\n    ",{"type":17,"tag":49,"props":60,"children":61},{},[62],{"type":23,"value":63},"Detect new errors early",{"type":23,"value":58},{"type":17,"tag":49,"props":66,"children":67},{},[68],{"type":23,"value":69},"Facilitate reproducibility for research software",{"type":23,"value":47},{"type":23,"value":47},{"type":17,"tag":49,"props":73,"children":76},{"className":74},[75],"fragment",[77,79],{"type":23,"value":78},"Help users\n  ",{"type":17,"tag":43,"props":80,"children":81},{},[82,83,88,89,94],{"type":23,"value":58},{"type":17,"tag":49,"props":84,"children":85},{},[86],{"type":23,"value":87},"Verify correct installation",{"type":23,"value":58},{"type":17,"tag":49,"props":90,"children":91},{},[92],{"type":23,"value":93},"Improve correctness for research output",{"type":23,"value":47},{"type":23,"value":47},{"type":17,"tag":49,"props":97,"children":99},{"className":98},[75],[100,102],{"type":23,"value":101},"Enable developers\n  ",{"type":17,"tag":43,"props":103,"children":104},{},[105,106,111,112,117],{"type":23,"value":58},{"type":17,"tag":49,"props":107,"children":108},{},[109],{"type":23,"value":110},"Make refactoring easier",{"type":23,"value":58},{"type":17,"tag":49,"props":113,"children":114},{},[115],{"type":23,"value":116},"Simplify external contributions",{"type":23,"value":47},{"type":17,"tag":119,"props":120,"children":124},"h3",{"style":121,"className":122,"id":123},"margin-top: 1em;",[75],"manage-complexity",[125],{"type":23,"value":126},"🧮 Manage Complexity 🧩",{"type":17,"tag":25,"props":128,"children":129},{},[130],{"type":23,"value":34},{"type":17,"tag":36,"props":132,"children":134},{"id":133},"test-types",[135],{"type":23,"value":136},"Test Types",{"type":17,"tag":43,"props":138,"children":139},{},[140,141],{"type":23,"value":47},{"type":17,"tag":49,"props":142,"children":143},{},[144,146],{"type":23,"value":145},"Unit test\n  ",{"type":17,"tag":43,"props":147,"children":151},{"className":148,"dataFragmentIndex":150},[75,149],"fade-up","1",[152,153,158,159,164,165,170],{"type":23,"value":58},{"type":17,"tag":49,"props":154,"children":155},{},[156],{"type":23,"value":157},"Smallest possible unit",{"type":23,"value":58},{"type":17,"tag":49,"props":160,"children":161},{},[162],{"type":23,"value":163},"No dependency on outside code...",{"type":23,"value":58},{"type":17,"tag":49,"props":166,"children":167},{},[168],{"type":23,"value":169},"(... replace them with mocks, stubs, etc.)",{"type":23,"value":47},{"type":17,"tag":43,"props":172,"children":175},{"className":173,"dataFragmentIndex":174},[75,149],"2",[176,177],{"type":23,"value":47},{"type":17,"tag":49,"props":178,"children":179},{},[180,182],{"type":23,"value":181},"Integration test\n  ",{"type":17,"tag":43,"props":183,"children":186},{"className":184,"dataFragmentIndex":185},[75,149],"3",[187,188,193,194,199],{"type":23,"value":58},{"type":17,"tag":49,"props":189,"children":190},{},[191],{"type":23,"value":192},"Test unit interaction",{"type":23,"value":58},{"type":17,"tag":49,"props":195,"children":196},{},[197],{"type":23,"value":198},"Can be on small scales, or system wide",{"type":23,"value":47},{"type":17,"tag":201,"props":202,"children":206},"div",{"className":203,"dataFragmentIndex":204,"style":205},[75,149],"4","position:relative; padding: 0 0 calc(55.00% + 44px) 0; margin: -9em auto 0 auto;",[],{"type":17,"tag":25,"props":208,"children":209},{},[210],{"type":23,"value":34},{"type":17,"tag":36,"props":212,"children":214},{"id":213},"how-much-testing-is-enough",[215],{"type":23,"value":216},"How much testing is enough?",{"type":17,"tag":25,"props":218,"children":219},{},[220],{"type":23,"value":221},"Test metrics:",{"type":17,"tag":43,"props":223,"children":224},{},[225,230],{"type":17,"tag":49,"props":226,"children":227},{},[228],{"type":23,"value":229},"lines of code : lines of tests (target: 1:3)",{"type":17,"tag":49,"props":231,"children":232},{},[233,235,244],{"type":23,"value":234},"test coverage ",{"type":17,"tag":236,"props":237,"children":241},"a",{"href":238,"rel":239},"https://sonarcloud.io/component_measures?id=eWaterCycle_ewatercycle&metric=coverage&view=treemap&selected=eWaterCycle_ewatercycle%3Aewatercycle",[240],"nofollow",[242],{"type":23,"value":243},"example",{"type":23,"value":245}," (target: >= 80%)",{"type":17,"tag":25,"props":247,"children":248},{},[249,251,257,259,264],{"type":23,"value":250},"Targets are defined as ",{"type":17,"tag":252,"props":253,"children":254},"em",{},[255],{"type":23,"value":256},"necessary",{"type":23,"value":258},", but ",{"type":17,"tag":252,"props":260,"children":261},{},[262],{"type":23,"value":263},"not sufficient",{"type":23,"value":265}," goals.",{"type":17,"tag":25,"props":267,"children":268},{},[269],{"type":23,"value":34},{"type":17,"tag":18,"props":271,"children":273},{"id":272},"pytest",[274],{"type":23,"value":275},"PyTest",{"type":17,"tag":43,"props":277,"children":278},{},[279,284],{"type":17,"tag":49,"props":280,"children":281},{},[282],{"type":23,"value":283},"recommended python testing framework",{"type":17,"tag":49,"props":285,"children":286},{},[287],{"type":17,"tag":236,"props":288,"children":291},{"href":289,"rel":290},"https://docs.pytest.org/en/7.3.x/",[240],[292],{"type":23,"value":293},"docs.pytest.org",{"type":17,"tag":25,"props":295,"children":296},{},[297],{"type":17,"tag":298,"props":299,"children":301},"img",{"alt":7,"src":300},".files/pytest_logo.svg",[],{"type":17,"tag":25,"props":303,"children":304},{},[305],{"type":23,"value":34},{"type":17,"tag":36,"props":307,"children":309},{"id":308},"write-code",[310],{"type":23,"value":311},"Write Code",{"type":17,"tag":313,"props":314,"children":315},"pre",{},[316],{"type":17,"tag":317,"props":318,"children":322},"code",{"className":319,"style":321,"dataTrim":7,"dataLineNumbers":7},[320],"bash","overflow: hidden;",[323],{"type":23,"value":324},"\n$ mkdir pytest-example\n$ cd pytest-example\n",{"type":17,"tag":201,"props":326,"children":328},{"className":327},[75],[329,331,336,338],{"type":23,"value":330},"\nCreating a file ",{"type":17,"tag":317,"props":332,"children":333},{},[334],{"type":23,"value":335},"example.py",{"type":23,"value":337}," containing\n",{"type":17,"tag":313,"props":339,"children":340},{},[341],{"type":17,"tag":317,"props":342,"children":345},{"className":343,"style":321,"dataTrim":7,"dataLineNumbers":7},[344],"python",[346],{"type":23,"value":347},"\ndef add(a, b):\n    return a + b\n \n \ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n",{"type":17,"tag":201,"props":349,"children":351},{"className":350},[75],[352,354,359],{"type":23,"value":353},"\nChat with the python shell about ",{"type":17,"tag":317,"props":355,"children":356},{},[357],{"type":23,"value":358},"assert",{"type":23,"value":360}," ...\n",{"type":17,"tag":201,"props":362,"children":364},{"className":363},[75],[365],{"type":17,"tag":313,"props":366,"children":367},{},[368],{"type":17,"tag":317,"props":369,"children":371},{"className":370,"style":321,"dataTrim":7,"dataLineNumbers":7},[344],[372],{"type":23,"value":373},"\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"\u003Cstdin>\", line 1, in \u003Cmodule>\nAssertionError\n",{"type":17,"tag":25,"props":375,"children":376},{},[377],{"type":23,"value":34},{"type":17,"tag":36,"props":379,"children":381},{"id":380},"test",[382],{"type":23,"value":383},"Test!",{"type":17,"tag":313,"props":385,"children":386},{},[387],{"type":17,"tag":317,"props":388,"children":391},{"style":321,"dataTrim":7,"className":389,"dataLineNumbers":390},[320],"1|1-9",[392],{"type":23,"value":393},"\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n",{"type":17,"tag":25,"props":395,"children":396},{},[397],{"type":23,"value":34},{"type":17,"tag":36,"props":399,"children":401},{"id":400},"breaking-things",[402],{"type":23,"value":403},"Breaking Things",{"type":17,"tag":313,"props":405,"children":406},{},[407],{"type":17,"tag":317,"props":408,"children":410},{"className":409,"style":321,"dataTrim":7,"dataLineNumbers":7},[344],[411],{"type":23,"value":412},"\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n",{"type":17,"tag":25,"props":414,"children":415},{},[416],{"type":23,"value":34},{"type":17,"tag":36,"props":418,"children":420},{"id":419},"testing-again",[421],{"type":23,"value":422},"Testing Again",{"type":17,"tag":313,"props":424,"children":425},{},[426],{"type":17,"tag":317,"props":427,"children":430},{"style":321,"dataTrim":7,"className":428,"dataLineNumbers":429},[320],"1|2-8|9-17|18-20",[431],{"type":23,"value":432},"\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n",{"type":17,"tag":43,"props":434,"children":435},{},[436,437,450,451],{"type":23,"value":47},{"type":17,"tag":49,"props":438,"children":440},{"className":439},[75],[441,443],{"type":23,"value":442},"🚀❓",{"type":17,"tag":444,"props":445,"children":447},"span",{"className":446},[75],[448],{"type":23,"value":449},"Functions fail on first error",{"type":23,"value":47},{"type":17,"tag":49,"props":452,"children":454},{"className":453},[75],[455],{"type":23,"value":456},"But all test functions are executed",{"type":17,"tag":25,"props":458,"children":459},{},[460],{"type":23,"value":34},{"type":17,"tag":36,"props":462,"children":464},{"id":463},"take-away",[465],{"type":23,"value":466},"Take-away",{"type":17,"tag":43,"props":468,"children":469},{},[470,480],{"type":17,"tag":49,"props":471,"children":472},{},[473,475],{"type":23,"value":474},"pytest collects and runs all test functions starting with ",{"type":17,"tag":317,"props":476,"children":477},{},[478],{"type":23,"value":479},"test_",{"type":17,"tag":49,"props":481,"children":482},{},[483],{"type":23,"value":484},"The tests pass when they do not throw (assertion) errors",{"type":17,"tag":313,"props":486,"children":488},{"style":487},"width: max-content;",[489],{"type":17,"tag":317,"props":490,"children":492},{"style":321,"className":491,"dataTrim":7,"dataLineNumbers":7},[344],[493],{"type":23,"value":494},"\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n",{"type":17,"tag":25,"props":496,"children":497},{},[498],{"type":23,"value":34},{"type":17,"tag":18,"props":500,"children":502},{"id":501},"recap-pure-functions",[503],{"type":23,"value":504},"Recap: pure functions",{"type":17,"tag":201,"props":506,"children":508},{"style":507},"width: 59%; float: left;",[509],{"type":17,"tag":43,"props":510,"children":512},{"style":511},"margin-top: 1ex;",[513,514,519,520,525,526,537,538,548],{"type":23,"value":47},{"type":17,"tag":49,"props":515,"children":516},{},[517],{"type":23,"value":518},"Are deterministic",{"type":23,"value":47},{"type":17,"tag":49,"props":521,"children":522},{},[523],{"type":23,"value":524},"Have a return value",{"type":23,"value":47},{"type":17,"tag":49,"props":527,"children":528},{},[529,531],{"type":23,"value":530},"Have no side effects",{"type":17,"tag":532,"props":533,"children":534},"sup",{},[535],{"type":23,"value":536},"[1]",{"type":23,"value":47},{"type":17,"tag":49,"props":539,"children":540},{},[541,543],{"type":23,"value":542},"Have referential transparency",{"type":17,"tag":532,"props":544,"children":545},{},[546],{"type":23,"value":547},"[2]",{"type":17,"tag":43,"props":549,"children":550},{},[],{"type":17,"tag":201,"props":552,"children":554},{"style":553},"width: 39%; float: right;",[555],{"type":17,"tag":313,"props":556,"children":559},{"className":557,"style":487,"dataId":558},[75],"code-animation",[560],{"type":17,"tag":317,"props":561,"children":565},{"className":562,"style":563,"dataTrim":7,"dataNoescape":7,"dataLineNumbers":564},[344],"overflow: hidden; padding-left: 1em; padding-right: 1em;","1-2|1-6|4-8",[566],{"type":23,"value":567},"\ndef last(my_array):\n    return my_array[-1]\n \ndef add(a, b):\n    return a + b\n \nprint(add(1, 2))\nprint(3)\n",{"type":17,"tag":569,"props":570,"children":574},"h4",{"className":571,"style":572,"id":573},[75],"width: 100%; float: left; margin-top: 1em;","pure-functions-are-easy-to-understand-and-test",[575],{"type":23,"value":576},"Pure functions are easy to understand and test!",{"type":17,"tag":578,"props":579,"children":580},"footer",{},[581,583,587],{"type":23,"value":582},"\n[1] Side effects: interactions of a function with its surroundings\n",{"type":17,"tag":584,"props":585,"children":586},"br",{},[],{"type":23,"value":588},"\n[2] Replacing a function call with the return of that function should not change anything\n",{"type":17,"tag":25,"props":590,"children":591},{},[592],{"type":23,"value":34},{"type":17,"tag":36,"props":594,"children":596},{"id":595},"take-away-1",[597],{"type":23,"value":466},{"type":17,"tag":43,"props":599,"children":600},{},[601,606,619,624,629,634],{"type":17,"tag":49,"props":602,"children":603},{},[604],{"type":23,"value":605},"Use pure functions when possible 👌",{"type":17,"tag":49,"props":607,"children":608},{},[609,611],{"type":23,"value":610},"Testing does not have to be hard 👏\n",{"type":17,"tag":43,"props":612,"children":613},{},[614],{"type":17,"tag":49,"props":615,"children":616},{},[617],{"type":23,"value":618},"You test anyways, but then throw the test away 🧐",{"type":17,"tag":49,"props":620,"children":621},{},[622],{"type":23,"value":623},"You don't have to strive for 💯% test coverage",{"type":17,"tag":49,"props":625,"children":626},{},[627],{"type":23,"value":628},"Aim for a balance between unit- and integration tests ⚖️",{"type":17,"tag":49,"props":630,"children":631},{},[632],{"type":23,"value":633},"Testing removes the dread of refactoring 🔁",{"type":17,"tag":49,"props":635,"children":636},{},[637],{"type":23,"value":638},"Your future you (and others!) will thank you 🙏",{"type":17,"tag":25,"props":640,"children":641},{},[642],{"type":23,"value":34},{"type":17,"tag":18,"props":644,"children":646},{"id":645},"test-driven-development-fizzbuzz-function",[647],{"type":23,"value":648},"Test-Driven Development: FizzBuzz Function",{"type":17,"tag":201,"props":650,"children":653},{"className":651},[652],"r-stack",[654,655,661,662,667,668,673,674,679,680,685,686],{"type":23,"value":47},{"type":17,"tag":298,"props":656,"children":660},{"src":657,"style":658},"/modules/good-practices-lesson/media/testing/fizz_buzz_1.svg",{"aspectRatio":659},"791/265",[],{"type":23,"value":47},{"type":17,"tag":298,"props":663,"children":666},{"className":664,"dataFragmentIndex":150,"src":665},[75],"./media/testing/fizz_buzz_2.svg",[],{"type":23,"value":47},{"type":17,"tag":298,"props":669,"children":672},{"className":670,"dataFragmentIndex":174,"src":671},[75],"./media/testing/fizz_buzz_3.svg",[],{"type":23,"value":47},{"type":17,"tag":298,"props":675,"children":678},{"className":676,"dataFragmentIndex":185,"src":677},[75],"./media/testing/fizz_buzz_4.svg",[],{"type":23,"value":47},{"type":17,"tag":298,"props":681,"children":684},{"className":682,"dataFragmentIndex":204,"src":683},[75],"./media/testing/fizz_buzz_5.svg",[],{"type":23,"value":47},{"type":17,"tag":298,"props":687,"children":691},{"className":688,"dataFragmentIndex":689,"src":690},[75],"5","./media/testing/fizz_buzz_6.svg",[],{"type":17,"tag":43,"props":693,"children":694},{},[695,696,701,702],{"type":23,"value":47},{"type":17,"tag":49,"props":697,"children":698},{},[699],{"type":23,"value":700},"fizz_buzz() takes an integer argument and returns it, BUT",{"type":23,"value":47},{"type":17,"tag":43,"props":703,"children":704},{},[705,706,712,713,719,720,726,727,733],{"type":23,"value":58},{"type":17,"tag":49,"props":707,"children":709},{"className":708,"dataFragmentIndex":150},[75],[710],{"type":23,"value":711},"fails on zero or negative numbers",{"type":23,"value":58},{"type":17,"tag":49,"props":714,"children":716},{"className":715,"dataFragmentIndex":174},[75],[717],{"type":23,"value":718},"instead returns \"Fizz\" on multiples of 3",{"type":23,"value":58},{"type":17,"tag":49,"props":721,"children":723},{"className":722,"dataFragmentIndex":185},[75],[724],{"type":23,"value":725},"instead returns \"Buzz\" on multiples of 5",{"type":23,"value":58},{"type":17,"tag":49,"props":728,"children":730},{"className":729,"dataFragmentIndex":689},[75],[731],{"type":23,"value":732},"instead returns \"FizzBuzz\" on multiples of 3 and 5",{"type":23,"value":47},{"type":17,"tag":25,"props":735,"children":736},{},[737],{"type":23,"value":34},{"type":17,"tag":36,"props":739,"children":741},{"id":740},"fizzbuzz-function",[742],{"type":23,"value":743},"FizzBuzz Function",{"type":17,"tag":43,"props":745,"children":746},{},[747,748,752,753,777,778,784,785,791,792,798,799],{"type":23,"value":47},{"type":17,"tag":49,"props":749,"children":750},{},[751],{"type":23,"value":700},{"type":23,"value":47},{"type":17,"tag":43,"props":754,"children":755},{},[756,757,761,762,766,767,771,772,776],{"type":23,"value":58},{"type":17,"tag":49,"props":758,"children":759},{},[760],{"type":23,"value":711},{"type":23,"value":58},{"type":17,"tag":49,"props":763,"children":764},{},[765],{"type":23,"value":718},{"type":23,"value":58},{"type":17,"tag":49,"props":768,"children":769},{},[770],{"type":23,"value":725},{"type":23,"value":58},{"type":17,"tag":49,"props":773,"children":774},{},[775],{"type":23,"value":732},{"type":23,"value":47},{"type":23,"value":47},{"type":17,"tag":49,"props":779,"children":781},{"className":780},[75],[782],{"type":23,"value":783},"Create an empty function fizz_buzz()",{"type":23,"value":47},{"type":17,"tag":49,"props":786,"children":788},{"className":787},[75],[789],{"type":23,"value":790},"Write the tests",{"type":23,"value":47},{"type":17,"tag":49,"props":793,"children":795},{"className":794},[75],[796],{"type":23,"value":797},"Paste your tests in the collab document, and discuss",{"type":23,"value":47},{"type":17,"tag":49,"props":800,"children":802},{"className":801},[75],[803],{"type":23,"value":804},"Now write a function code to make your tests pass",{"type":17,"tag":25,"props":806,"children":807},{},[808],{"type":23,"value":34},{"type":17,"tag":36,"props":810,"children":812},{"id":811},"take-away-2",[813],{"type":23,"value":466},{"type":17,"tag":43,"props":815,"children":816},{},[817,822,827,832],{"type":17,"tag":49,"props":818,"children":819},{},[820],{"type":23,"value":821},"What did you think of this style of development?",{"type":17,"tag":49,"props":823,"children":824},{},[825],{"type":23,"value":826},"Was it easier or harder than just writing code?",{"type":17,"tag":49,"props":828,"children":829},{},[830],{"type":23,"value":831},"Would your code look different without the tests? ",{"type":17,"tag":49,"props":833,"children":834},{},[835],{"type":23,"value":836},"For what kind of projects would it be (not) useful? ",{"type":17,"tag":201,"props":838,"children":841},{"className":839,"style":840},[75],"width: 20vw; margin: 1em auto;",[842],{"type":23,"value":843},"Test-Driven Development (TDD) is an optional tool in your toolbox 🛠️",{"title":7,"searchDepth":845,"depth":845,"links":846},2,[847,851,852,853,854,855,856,857,858,859,860],{"id":38,"depth":845,"text":41,"children":848},[849],{"id":123,"depth":850,"text":126},3,{"id":133,"depth":845,"text":136},{"id":213,"depth":845,"text":216},{"id":308,"depth":845,"text":311},{"id":380,"depth":845,"text":383},{"id":400,"depth":845,"text":403},{"id":419,"depth":845,"text":422},{"id":463,"depth":845,"text":466},{"id":595,"depth":845,"text":466},{"id":740,"depth":845,"text":743},{"id":811,"depth":845,"text":466},"markdown","local_fs:modules:good-practices-lesson:testing-slides.md","local_fs","modules/good-practices-lesson/testing-slides.md","md","---\ntitle: Testing\ntype: slides\norder: 4\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n\u003C!-- .slide: data-state=\"title\" -->\n\n# Testing\n\nnote:\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Why Test?\n\n\u003Cul>\n  \u003Cli>Preserve functionality\n  \u003Cul>\n    \u003Cli>Detect new errors early\u003C/li>\n    \u003Cli>Facilitate reproducibility for research software\u003C/li>\n  \u003C/ul>\u003C/li>\n  \u003Cli class=\"fragment\">Help users\n  \u003Cul>\n    \u003Cli>Verify correct installation\u003C/li>\n    \u003Cli>Improve correctness for research output\u003C/li>\n  \u003C/ul>\u003C/li>\n  \u003Cli class=\"fragment\">Enable developers\n  \u003Cul>\n    \u003Cli>Make refactoring easier\u003C/li>\n    \u003Cli>Simplify external contributions\u003C/li>\n  \u003C/ul>\u003C/li>\n\u003C/ul>\n\n\u003Ch3 style=\"margin-top: 1em;\" class=\"fragment\">🧮 Manage Complexity 🧩\u003C/h3>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Test Types\n\n\u003Cul>\n  \u003Cli>Unit test\n  \u003Cul class=\"fragment fade-up\" data-fragment-index=\"1\">\n    \u003Cli>Smallest possible unit\u003C/li>\n    \u003Cli>No dependency on outside code...\u003C/li>\n    \u003Cli>(... replace them with mocks, stubs, etc.)\u003C/li>\n  \u003C/ul>\u003C/li>\n\u003C/ul>\n\u003Cul class=\"fragment fade-up\" data-fragment-index=\"2\">\n  \u003Cli>Integration test\n  \u003Cul class=\"fragment fade-up\" data-fragment-index=\"3\">\n    \u003Cli>Test unit interaction\u003C/li>\n    \u003Cli>Can be on small scales, or system wide\u003C/li>\n  \u003C/ul>\u003C/li>\n\u003C/ul>\n\n\u003Cdiv class=\"fragment fade-up\" data-fragment-index=\"4\" style='position:relative; padding: 0 0 calc(55.00% + 44px) 0; margin: -9em auto 0 auto;'>\u003C/div>\u003Cp style=\"font-size: large; margin: 0; padding: 0;\"> \u003C/p>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n\n## How much testing is enough?\n\nTest metrics:\n\n- lines of code : lines of tests (target: 1:3)\n- test coverage [example](https://sonarcloud.io/component_measures?id=eWaterCycle_ewatercycle&metric=coverage&view=treemap&selected=eWaterCycle_ewatercycle%3Aewatercycle) (target: >= 80%)\n\nTargets are defined as *necessary*, but *not sufficient* goals.\n\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n# PyTest\n\n- recommended python testing framework\n- [docs.pytest.org](https://docs.pytest.org/en/7.3.x/)\n\n![](.files/pytest_logo.svg)\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Write Code\n\n\u003Cpre>\u003Ccode class=\"bash\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n$ mkdir pytest-example\n$ cd pytest-example\n\u003C/code>\u003C/pre>\n\n\u003Cdiv class=\"fragment\">\nCreating a file \u003Ccode>example.py\u003C/code> containing\n\u003Cpre>\u003Ccode class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a + b\n&nbsp;\n&nbsp;\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n\u003C/code>\u003C/pre>\n\u003C/div>\n\n\u003Cdiv class=\"fragment\">\nChat with the python shell about \u003Ccode>assert\u003C/code> ...\n\u003C/div>\n\u003Cdiv class=\"fragment\">\n\u003Cpre>\u003Ccode class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n\u003C/code>\u003C/pre>\n\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Test!\n\n\u003Cpre>\u003Ccode style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|1-9\">\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n\u003C/code>\u003C/pre>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Breaking Things\n\n\u003Cpre>\u003Ccode class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n\u003C/code>\u003C/pre>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Testing Again\n\n\u003Cpre>\u003Ccode style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|2-8|9-17|18-20\">\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n\u003C/code>\u003C/pre>\n\n\u003Cul>\n  \u003Cli class=\"fragment\">🚀❓\u003Cspan class=\"fragment\">Functions fail on first error\u003C/span>\u003C/li>\n  \u003Cli class=\"fragment\">But all test functions are executed\u003C/li>\n\u003C/ul>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- pytest collects and runs all test functions starting with \u003Ccode>test_\u003C/code>\n- The tests pass when they do not throw (assertion) errors\n\n\u003Cpre style=\"width: max-content;\">\u003Ccode style=\"overflow: hidden;\" class=\"python\" data-trim class=\"bash\" data-line-numbers>\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n\u003C/code>\u003C/pre>\n\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n# Recap: pure functions\n\n\u003Cdiv style=\"width: 59%; float: left;\">\n\u003Cul style=\"margin-top: 1ex;\">\n  \u003Cli>Are deterministic\u003C/li>\n  \u003Cli>Have a return value\u003C/li>\n  \u003Cli>Have no side effects\u003Csup>[1]\u003C/sup>\u003C/li>\n  \u003Cli>Have referential transparency\u003Csup>[2]\u003C/sup>\u003C/li>\n\u003Cul>\n\u003C/div>\n\n\u003Cdiv style=\"width: 39%; float: right;\">\n\u003Cpre class=\"fragment\" style=\"width: max-content;\" data-id=\"code-animation\">\u003Ccode class=\"python\" style=\"overflow: hidden; padding-left: 1em; padding-right: 1em;\" data-trim data-noescape class=\"bash\" data-line-numbers=\"1-2|1-6|4-8\">\ndef last(my_array):\n    return my_array[-1]\n&nbsp;\ndef add(a, b):\n    return a + b\n&nbsp;\nprint(add(1, 2))\nprint(3)\n\u003C/code>\u003C/pre>\n\u003C/div>\n\n\u003Ch4 class=\"fragment\" style=\"width: 100%; float: left; margin-top: 1em;\">Pure functions are easy to understand and test!\u003C/h4>\n\n\u003Cfooter>\n[1] Side effects: interactions of a function with its surroundings\n\u003Cbr>\n[2] Replacing a function call with the return of that function should not change anything\n\u003C/footer>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Use pure functions when possible 👌\n- Testing does not have to be hard 👏\n  - You test anyways, but then throw the test away 🧐\n- You don't have to strive for 💯% test coverage\n- Aim for a balance between unit- and integration tests ⚖️\n- Testing removes the dread of refactoring 🔁\n- Your future you (and others!) will thank you 🙏\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n# Test-Driven Development: FizzBuzz Function\n\n\u003Cdiv class=\"r-stack\">\n  \u003Cimg src=\"./media/testing/fizz_buzz_1.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"1\" src=\"./media/testing/fizz_buzz_2.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"2\" src=\"./media/testing/fizz_buzz_3.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"3\" src=\"./media/testing/fizz_buzz_4.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"4\" src=\"./media/testing/fizz_buzz_5.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"5\" src=\"./media/testing/fizz_buzz_6.svg\">\n\u003C/div>\n\n\u003Cul>\n  \u003Cli>fizz_buzz() takes an integer argument and returns it, BUT\u003C/li>\n  \u003Cul>\n    \u003Cli class=\"fragment\" data-fragment-index=\"1\">fails on zero or negative numbers\u003C/li>\n    \u003Cli class=\"fragment\" data-fragment-index=\"2\">instead returns \"Fizz\" on multiples of 3\u003C/li>\n    \u003Cli class=\"fragment\" data-fragment-index=\"3\">instead returns \"Buzz\" on multiples of 5\u003C/li>\n    \u003Cli class=\"fragment\" data-fragment-index=\"5\">instead returns \"FizzBuzz\" on multiples of 3 and 5\u003C/li>\n  \u003C/ul>\n\u003C/ul>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## FizzBuzz Function\n\n\u003Cul>\n  \u003Cli>fizz_buzz() takes an integer argument and returns it, BUT\u003C/li>\n  \u003Cul>\n    \u003Cli>fails on zero or negative numbers\u003C/li>\n    \u003Cli>instead returns \"Fizz\" on multiples of 3\u003C/li>\n    \u003Cli>instead returns \"Buzz\" on multiples of 5\u003C/li>\n    \u003Cli>instead returns \"FizzBuzz\" on multiples of 3 and 5\u003C/li>\n  \u003C/ul>\n  \u003Cli class=\"fragment\">Create an empty function fizz_buzz()\u003C/li>\n  \u003Cli class=\"fragment\">Write the tests\u003C/li>\n  \u003Cli class=\"fragment\">Paste your tests in the collab document, and discuss\u003C/li>\n  \u003Cli class=\"fragment\">Now write a function code to make your tests pass\u003C/li>\n\u003C/ul>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- What did you think of this style of development?\n- Was it easier or harder than just writing code?\n- Would your code look different without the tests? \u003C!-- .element class=\"fragment\" -->\n- For what kind of projects would it be (not) useful? \u003C!-- .element class=\"fragment\" -->\n\n\u003Cdiv class=\"fragment\" style=\"width: 20vw; margin: 1em auto;\">Test-Driven Development (TDD) is an optional tool in your toolbox 🛠️\u003C/div>\n",[868,903],{"_path":869,"_dir":870,"_draft":6,"_partial":6,"_locale":7,"title":871,"description":7,"body":872,"_type":861,"_id":900,"_source":863,"_file":901,"_extension":865,"plainText":902},"/main/about","main","About",{"type":14,"children":873,"toc":896},[874,880,885,891],{"type":17,"tag":36,"props":875,"children":877},{"id":876},"about-this-lessonproject",[878],{"type":23,"value":879},"About this lesson/project",{"type":17,"tag":25,"props":881,"children":882},{},[883],{"type":23,"value":884},"Provide details about the project and lesson.",{"type":17,"tag":36,"props":886,"children":888},{"id":887},"target-audience",[889],{"type":23,"value":890},"Target audience",{"type":17,"tag":25,"props":892,"children":893},{},[894],{"type":23,"value":895},"Define target audience for this material.",{"title":7,"searchDepth":845,"depth":845,"links":897},[898,899],{"id":876,"depth":845,"text":879},{"id":887,"depth":845,"text":890},"local_fs:main:about.md","main/about.md","---\ntitle: About\n---\n\n## About this lesson/project\n\nProvide details about the project and lesson.\n\n## Target audience\n\nDefine target audience for this material.",{"_path":904,"_dir":870,"_draft":6,"_partial":6,"_locale":7,"title":905,"description":7,"body":906,"_type":861,"_id":922,"_source":863,"_file":923,"_extension":865,"plainText":924},"/main/contribute","Contribute",{"type":14,"children":907,"toc":919},[908,914],{"type":17,"tag":36,"props":909,"children":911},{"id":910},"contributing-to-this-lesson",[912],{"type":23,"value":913},"Contributing to this lesson",{"type":17,"tag":25,"props":915,"children":916},{},[917],{"type":23,"value":918},"Add contributing guidelines for you project.",{"title":7,"searchDepth":845,"depth":845,"links":920},[921],{"id":910,"depth":845,"text":913},"local_fs:main:contribute.md","main/contribute.md","---\ntitle: Contribute\n---\n\n## Contributing to this lesson\n\nAdd contributing guidelines for you project.",1722342608619]