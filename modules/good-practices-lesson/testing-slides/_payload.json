[{"data":1,"prerenderedAt":1115},["Reactive",2],{"content-query-IHDDqgcRBr":3,"content-query-AT44bg6JPw":1057},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"type":10,"order":11,"author":12,"body":13,"_type":1051,"_id":1052,"_source":1053,"_file":1054,"_extension":1055,"plainText":1056},"/modules/good-practices-lesson/testing-slides","good-practices-lesson",false,"","Testing","Getting more professional","slides",4,"Ole Mussmann",{"type":14,"children":15,"toc":1030},"root",[16,24,30,37,52,127,131,137,232,236,242,343,347,353,358,449,453,459,466,549,553,559,572,595,608,621,625,631,641,645,651,660,664,670,680,703,707,713,742,752,756,762,824,828,834,877,920,924,930,987,991,996,1019],{"type":17,"tag":18,"props":19,"children":21},"element","h1",{"id":20},"testing",[22],{"type":23,"value":8},"text",{"type":17,"tag":25,"props":26,"children":27},"p",{},[28],{"type":23,"value":29},"===",{"type":17,"tag":31,"props":32,"children":34},"h2",{"id":33},"basics-of-testing",[35],{"type":23,"value":36},"Basics of testing",{"type":17,"tag":38,"props":39,"children":41},"h3",{"id":40},"mistakes-will-happen",[42,44,50],{"type":23,"value":43},"Mistakes ",{"type":17,"tag":45,"props":46,"children":47},"em",{},[48],{"type":23,"value":49},"will",{"type":23,"value":51}," happen!",{"type":17,"tag":53,"props":54,"children":56},"div",{"style":55},"display: flex; justify-content: center; align-items: center",[57,59,118,119],{"type":23,"value":58},"\n    ",{"type":17,"tag":53,"props":60,"children":61},{},[62,64,116],{"type":23,"value":63},"\n      ",{"type":17,"tag":65,"props":66,"children":67},"ul",{},[68,70,78,79,115],{"type":23,"value":69},"\n        ",{"type":17,"tag":71,"props":72,"children":75},"li",{"className":73},[74],"fragment",[76],{"type":23,"value":77},"The more complex the code, the harder to keep an eye on everything.",{"type":23,"value":69},{"type":17,"tag":71,"props":80,"children":82},{"className":81},[74],[83,85],{"type":23,"value":84},"However, we can build safeguards against problems:\n        ",{"type":17,"tag":65,"props":86,"children":87},{},[88,90,96,97,103,104,114],{"type":23,"value":89},"\n          ",{"type":17,"tag":71,"props":91,"children":93},{"className":92},[74],[94],{"type":23,"value":95},"Throwing exceptions",{"type":23,"value":89},{"type":17,"tag":71,"props":98,"children":100},{"className":99},[74],[101],{"type":23,"value":102},"Logging (intermediate) results",{"type":23,"value":89},{"type":17,"tag":71,"props":105,"children":107},{"className":106},[74],[108],{"type":17,"tag":109,"props":110,"children":111},"b",{},[112],{"type":23,"value":113},"Writing tests",{"type":23,"value":69},{"type":23,"value":63},{"type":23,"value":117},"\n  ",{"type":23,"value":58},{"type":17,"tag":120,"props":121,"children":126},"img",{"src":122,"width":123,"style":124},"/modules/good-practices-lesson/media/testing/Doh.png",250,{"aspectRatio":125},"1437/1117",[],{"type":17,"tag":25,"props":128,"children":129},{},[130],{"type":23,"value":29},{"type":17,"tag":31,"props":132,"children":134},{"id":133},"why-test",[135],{"type":23,"value":136},"Why Test?",{"type":17,"tag":53,"props":138,"children":139},{"style":55},[140,141,225,226],{"type":23,"value":117},{"type":17,"tag":53,"props":142,"children":143},{},[144,145,224],{"type":23,"value":58},{"type":17,"tag":65,"props":146,"children":147},{},[148,149,171,172,194,195,223],{"type":23,"value":63},{"type":17,"tag":71,"props":150,"children":152},{"className":151},[74],[153,155],{"type":23,"value":154},"Preserve functionality\n      ",{"type":17,"tag":65,"props":156,"children":157},{},[158,159,164,165,170],{"type":23,"value":69},{"type":17,"tag":71,"props":160,"children":161},{},[162],{"type":23,"value":163},"Detect (new) errors early",{"type":23,"value":69},{"type":17,"tag":71,"props":166,"children":167},{},[168],{"type":23,"value":169},"Avoid unexpected outputs",{"type":23,"value":63},{"type":23,"value":63},{"type":17,"tag":71,"props":173,"children":175},{"className":174},[74],[176,178],{"type":23,"value":177},"Help users\n      ",{"type":17,"tag":65,"props":179,"children":180},{},[181,182,187,188,193],{"type":23,"value":69},{"type":17,"tag":71,"props":183,"children":184},{},[185],{"type":23,"value":186},"Verify correct installation",{"type":23,"value":69},{"type":17,"tag":71,"props":189,"children":190},{},[191],{"type":23,"value":192},"Ensure reproducibility",{"type":23,"value":63},{"type":23,"value":63},{"type":17,"tag":71,"props":196,"children":198},{"className":197},[74],[199,201],{"type":23,"value":200},"Enable developers\n      ",{"type":17,"tag":65,"props":202,"children":203},{},[204,205,210,211,216,217,222],{"type":23,"value":69},{"type":17,"tag":71,"props":206,"children":207},{},[208],{"type":23,"value":209},"Manage complexity",{"type":23,"value":69},{"type":17,"tag":71,"props":212,"children":213},{},[214],{"type":23,"value":215},"Simplify refactoring",{"type":23,"value":69},{"type":17,"tag":71,"props":218,"children":219},{},[220],{"type":23,"value":221},"Facilitate collaboration",{"type":23,"value":63},{"type":23,"value":58},{"type":23,"value":117},{"type":23,"value":58},{"type":17,"tag":120,"props":227,"children":231},{"src":228,"width":229,"style":230},"/modules/good-practices-lesson/media/testing/experiment.webp",400,"margin-left: 60px; aspect-ratio: 1600/1042;",[],{"type":17,"tag":25,"props":233,"children":234},{},[235],{"type":23,"value":29},{"type":17,"tag":31,"props":237,"children":239},{"id":238},"test-types",[240],{"type":23,"value":241},"Test Types",{"type":17,"tag":65,"props":243,"children":244},{},[245,246,284,285,314,315],{"type":23,"value":117},{"type":17,"tag":247,"props":248,"children":252},"span",{"className":249,"dataFragmentIndex":251},[74,250],"fade-out","4",[253,254],{"type":23,"value":58},{"type":17,"tag":71,"props":255,"children":259},{"className":256,"dataFragmentIndex":258},[74,257],"fade-up","1",[260,262],{"type":23,"value":261},"Exceptions in the code base\n    ",{"type":17,"tag":65,"props":263,"children":264},{},[265,266,271,272,277,278,283],{"type":23,"value":63},{"type":17,"tag":71,"props":267,"children":268},{},[269],{"type":23,"value":270},"Intended to handle \"expected\" problems",{"type":23,"value":63},{"type":17,"tag":71,"props":273,"children":274},{},[275],{"type":23,"value":276},"Sound an alarm as soon as the problem arises",{"type":23,"value":63},{"type":17,"tag":71,"props":279,"children":280},{},[281],{"type":23,"value":282},"Provide clear feedback to the user",{"type":23,"value":117},{"type":23,"value":117},{"type":17,"tag":71,"props":286,"children":289},{"className":287,"dataFragmentIndex":288},[74,257],"2",[290,292],{"type":23,"value":291},"Unit testing\n  ",{"type":17,"tag":65,"props":293,"children":294},{},[295,296,301,302,307,308,313],{"type":23,"value":58},{"type":17,"tag":71,"props":297,"children":298},{},[299],{"type":23,"value":300},"Smallest possible unit (module)",{"type":23,"value":58},{"type":17,"tag":71,"props":303,"children":304},{},[305],{"type":23,"value":306},"No dependency on outside code...",{"type":23,"value":58},{"type":17,"tag":71,"props":309,"children":310},{},[311],{"type":23,"value":312},"(... replace them with mocks, stubs, etc.)",{"type":23,"value":117},{"type":23,"value":117},{"type":17,"tag":247,"props":316,"children":318},{"className":317,"dataFragmentIndex":251},[74,250],[319,320],{"type":23,"value":117},{"type":17,"tag":71,"props":321,"children":324},{"className":322,"dataFragmentIndex":323},[74,257],"3",[325,327],{"type":23,"value":326},"Integration testing\n  ",{"type":17,"tag":65,"props":328,"children":329},{},[330,331,336,337,342],{"type":23,"value":58},{"type":17,"tag":71,"props":332,"children":333},{},[334],{"type":23,"value":335},"Test interactions between units",{"type":23,"value":58},{"type":17,"tag":71,"props":338,"children":339},{},[340],{"type":23,"value":341},"Can be on small scales, system wide, ...",{"type":23,"value":117},{"type":17,"tag":25,"props":344,"children":345},{},[346],{"type":23,"value":29},{"type":17,"tag":31,"props":348,"children":350},{"id":349},"testing-frameworks",[351],{"type":23,"value":352},"Testing frameworks",{"type":17,"tag":25,"props":354,"children":355},{},[356],{"type":23,"value":357},"Most modern programming languages have good options to streamline testing",{"type":17,"tag":65,"props":359,"children":360},{},[361,375,387,399,411,423,444],{"type":17,"tag":71,"props":362,"children":363},{},[364,366],{"type":23,"value":365},"Python: ",{"type":17,"tag":367,"props":368,"children":372},"a",{"href":369,"rel":370},"https://docs.pytest.org/en/7.3.x/",[371],"nofollow",[373],{"type":23,"value":374},"Pytest",{"type":17,"tag":71,"props":376,"children":377},{},[378,380],{"type":23,"value":379},"Java: ",{"type":17,"tag":367,"props":381,"children":384},{"href":382,"rel":383},"https://junit.org/junit5/",[371],[385],{"type":23,"value":386},"Junit",{"type":17,"tag":71,"props":388,"children":389},{},[390,392],{"type":23,"value":391},"R: ",{"type":17,"tag":367,"props":393,"children":396},{"href":394,"rel":395},"https://testthat.r-lib.org/",[371],[397],{"type":23,"value":398},"testthat",{"type":17,"tag":71,"props":400,"children":401},{},[402,404],{"type":23,"value":403},"Matlab: ",{"type":17,"tag":367,"props":405,"children":408},{"href":406,"rel":407},"https://nl.mathworks.com/help/matlab/matlab-unit-test-framework.html?s_tid=CRUX_lftnav",[371],[409],{"type":23,"value":410},"Testing Frameworks",{"type":17,"tag":71,"props":412,"children":413},{},[414,416],{"type":23,"value":415},"Julia: ",{"type":17,"tag":367,"props":417,"children":420},{"href":418,"rel":419},"https://docs.julialang.org/en/v1/stdlib/Test/",[371],[421],{"type":23,"value":422},"Test",{"type":17,"tag":71,"props":424,"children":425},{},[426,428,435,437],{"type":23,"value":427},"C++: ",{"type":17,"tag":367,"props":429,"children":432},{"href":430,"rel":431},"https://google.github.io/googletest/",[371],[433],{"type":23,"value":434},"GTest",{"type":23,"value":436}," (developed by Google) or ",{"type":17,"tag":367,"props":438,"children":441},{"href":439,"rel":440},"https://catch2-temp.readthedocs.io/en/latest/index.html",[371],[442],{"type":23,"value":443},"Catch2",{"type":17,"tag":71,"props":445,"children":446},{},[447],{"type":23,"value":448},"etc.",{"type":17,"tag":25,"props":450,"children":451},{},[452],{"type":23,"value":29},{"type":17,"tag":31,"props":454,"children":456},{"id":455},"testing-metrics",[457],{"type":23,"value":458},"Testing metrics",{"type":17,"tag":460,"props":461,"children":463},"h4",{"id":462},"targets-are-arbitrary-and-indicative",[464],{"type":23,"value":465},"Targets are arbitrary and indicative",{"type":17,"tag":53,"props":467,"children":468},{"style":55},[469,470,542,543],{"type":23,"value":117},{"type":17,"tag":53,"props":471,"children":472},{},[473,474],{"type":23,"value":58},{"type":17,"tag":65,"props":475,"children":476},{},[477,478,501,502,519,520],{"type":23,"value":63},{"type":17,"tag":71,"props":479,"children":481},{"className":480},[74,257],[482,484,500],{"type":23,"value":483},"Coverage\n        ",{"type":17,"tag":65,"props":485,"children":486},{},[487,488,493,494,499],{"type":23,"value":89},{"type":17,"tag":71,"props":489,"children":490},{},[491],{"type":23,"value":492},"Proportion of code that is executed",{"type":23,"value":89},{"type":17,"tag":71,"props":495,"children":496},{},[497],{"type":23,"value":498},"Target >= 80%",{"type":23,"value":69},{"type":23,"value":63},{"type":23,"value":63},{"type":17,"tag":71,"props":503,"children":505},{"className":504},[74,257],[506,508,518],{"type":23,"value":507},"Ratio (lines of code:lines of test)\n        ",{"type":17,"tag":65,"props":509,"children":510},{},[511,512,517],{"type":23,"value":89},{"type":17,"tag":71,"props":513,"children":514},{},[515],{"type":23,"value":516},"Target: (1:3)",{"type":23,"value":69},{"type":23,"value":63},{"type":23,"value":63},{"type":17,"tag":71,"props":521,"children":523},{"className":522},[74,257],[524,526],{"type":23,"value":525},"Metrics can be misleading\n        ",{"type":17,"tag":65,"props":527,"children":528},{},[529,530,535,536,541],{"type":23,"value":89},{"type":17,"tag":71,"props":531,"children":532},{},[533],{"type":23,"value":534},"They do not measure quality",{"type":23,"value":89},{"type":17,"tag":71,"props":537,"children":538},{},[539],{"type":23,"value":540},"Don't get blindsided by hitting targets over writing good tests",{"type":23,"value":117},{"type":23,"value":117},{"type":17,"tag":120,"props":544,"children":548},{"src":545,"width":546,"style":547},"/modules/good-practices-lesson/media/testing/metrics.jpg",300,"margin-left: 60px; aspect-ratio: 600/525;",[],{"type":17,"tag":25,"props":550,"children":551},{},[552],{"type":23,"value":29},{"type":17,"tag":31,"props":554,"children":556},{"id":555},"write-code",[557],{"type":23,"value":558},"Write Code",{"type":17,"tag":560,"props":561,"children":562},"pre",{},[563],{"type":17,"tag":564,"props":565,"children":569},"code",{"className":566,"style":568,"dataTrim":7,"dataLineNumbers":7},[567],"bash","overflow: hidden;",[570],{"type":23,"value":571},"\n$ mkdir pytest-example\n$ cd pytest-example\n",{"type":17,"tag":53,"props":573,"children":575},{"className":574},[74],[576,578,583,585],{"type":23,"value":577},"\nCreating a file ",{"type":17,"tag":564,"props":579,"children":580},{},[581],{"type":23,"value":582},"example.py",{"type":23,"value":584}," containing\n",{"type":17,"tag":560,"props":586,"children":587},{},[588],{"type":17,"tag":564,"props":589,"children":592},{"className":590,"style":568,"dataTrim":7,"dataLineNumbers":7},[591],"python",[593],{"type":23,"value":594},"\ndef add(a, b):\n    return a + b\n \n \ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n",{"type":17,"tag":53,"props":596,"children":598},{"className":597},[74],[599,601,606],{"type":23,"value":600},"\nChat with the python shell about ",{"type":17,"tag":564,"props":602,"children":603},{},[604],{"type":23,"value":605},"assert",{"type":23,"value":607}," ...\n",{"type":17,"tag":53,"props":609,"children":611},{"className":610},[74],[612],{"type":17,"tag":560,"props":613,"children":614},{},[615],{"type":17,"tag":564,"props":616,"children":618},{"className":617,"style":568,"dataTrim":7,"dataLineNumbers":7},[591],[619],{"type":23,"value":620},"\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"\u003Cstdin>\", line 1, in \u003Cmodule>\nAssertionError\n",{"type":17,"tag":25,"props":622,"children":623},{},[624],{"type":23,"value":29},{"type":17,"tag":31,"props":626,"children":628},{"id":627},"test",[629],{"type":23,"value":630},"Test!",{"type":17,"tag":560,"props":632,"children":633},{},[634],{"type":17,"tag":564,"props":635,"children":638},{"style":568,"dataTrim":7,"className":636,"dataLineNumbers":637},[567],"1|1-9",[639],{"type":23,"value":640},"\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n",{"type":17,"tag":25,"props":642,"children":643},{},[644],{"type":23,"value":29},{"type":17,"tag":31,"props":646,"children":648},{"id":647},"breaking-things",[649],{"type":23,"value":650},"Breaking Things",{"type":17,"tag":560,"props":652,"children":653},{},[654],{"type":17,"tag":564,"props":655,"children":657},{"className":656,"style":568,"dataTrim":7,"dataLineNumbers":7},[591],[658],{"type":23,"value":659},"\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n",{"type":17,"tag":25,"props":661,"children":662},{},[663],{"type":23,"value":29},{"type":17,"tag":31,"props":665,"children":667},{"id":666},"testing-again",[668],{"type":23,"value":669},"Testing Again",{"type":17,"tag":560,"props":671,"children":672},{},[673],{"type":17,"tag":564,"props":674,"children":677},{"style":568,"dataTrim":7,"className":675,"dataLineNumbers":676},[567],"1|2-8|9-17|18-20",[678],{"type":23,"value":679},"\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n",{"type":17,"tag":65,"props":681,"children":682},{},[683,684,696,697],{"type":23,"value":117},{"type":17,"tag":71,"props":685,"children":687},{"className":686},[74],[688,690],{"type":23,"value":689},"🚀❓",{"type":17,"tag":247,"props":691,"children":693},{"className":692},[74],[694],{"type":23,"value":695},"Functions fail on first error",{"type":23,"value":117},{"type":17,"tag":71,"props":698,"children":700},{"className":699},[74],[701],{"type":23,"value":702},"But all test functions are executed",{"type":17,"tag":25,"props":704,"children":705},{},[706],{"type":23,"value":29},{"type":17,"tag":31,"props":708,"children":710},{"id":709},"pytest-wrap-up",[711],{"type":23,"value":712},"Pytest wrap up",{"type":17,"tag":65,"props":714,"children":715},{},[716,728,737],{"type":17,"tag":71,"props":717,"children":718},{},[719,721,726],{"type":23,"value":720},"pytest collects all files starting ",{"type":17,"tag":564,"props":722,"children":723},{},[724],{"type":23,"value":725},"test_",{"type":23,"value":727},"...",{"type":17,"tag":71,"props":729,"children":730},{},[731,733],{"type":23,"value":732},"... and runs all test functions starting with ",{"type":17,"tag":564,"props":734,"children":735},{},[736],{"type":23,"value":725},{"type":17,"tag":71,"props":738,"children":739},{},[740],{"type":23,"value":741},"The tests pass when they do not throw (assertion) errors",{"type":17,"tag":560,"props":743,"children":745},{"style":744},"width: max-content;",[746],{"type":17,"tag":564,"props":747,"children":749},{"style":568,"className":748,"dataTrim":7,"dataLineNumbers":7},[591],[750],{"type":23,"value":751},"\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n",{"type":17,"tag":25,"props":753,"children":754},{},[755],{"type":23,"value":29},{"type":17,"tag":31,"props":757,"children":759},{"id":758},"take-away",[760],{"type":23,"value":761},"Take-away",{"type":17,"tag":65,"props":763,"children":764},{},[765,778,796,809,814,819],{"type":17,"tag":71,"props":766,"children":767},{},[768,770],{"type":23,"value":769},"Use pure functions when possible 👌\n",{"type":17,"tag":65,"props":771,"children":772},{},[773],{"type":17,"tag":71,"props":774,"children":775},{},[776],{"type":23,"value":777},"Do you remember what these are? 💭",{"type":17,"tag":71,"props":779,"children":780},{},[781,783],{"type":23,"value":782},"Testing does not have to be hard 👏\n",{"type":17,"tag":65,"props":784,"children":785},{},[786,791],{"type":17,"tag":71,"props":787,"children":788},{},[789],{"type":23,"value":790},"You often test anyway, but then throw the test away 🧐",{"type":17,"tag":71,"props":792,"children":793},{},[794],{"type":23,"value":795},"Use pytest if programming with Python 🎭",{"type":17,"tag":71,"props":797,"children":798},{},[799,801],{"type":23,"value":800},"You don't have to strive for 💯% test coverage\n",{"type":17,"tag":65,"props":802,"children":803},{},[804],{"type":17,"tag":71,"props":805,"children":806},{},[807],{"type":23,"value":808},"But be smart about what you are testing 🧠",{"type":17,"tag":71,"props":810,"children":811},{},[812],{"type":23,"value":813},"Aim for a balance between unit- and integration tests ⚖️",{"type":17,"tag":71,"props":815,"children":816},{},[817],{"type":23,"value":818},"Testing removes the dread of refactoring 🔁",{"type":17,"tag":71,"props":820,"children":821},{},[822],{"type":23,"value":823},"Your future you (and others!) will thank you 🙏",{"type":17,"tag":25,"props":825,"children":826},{},[827],{"type":23,"value":29},{"type":17,"tag":31,"props":829,"children":831},{"id":830},"test-driven-development-fizzbuzz",[832],{"type":23,"value":833},"Test-Driven Development: FizzBuzz",{"type":17,"tag":53,"props":835,"children":838},{"className":836},[837],"r-stack",[839,840,846,847,852,853,858,859,864,865,870,871],{"type":23,"value":117},{"type":17,"tag":120,"props":841,"children":845},{"src":842,"style":843},"/modules/good-practices-lesson/media/testing/fizz_buzz_1.svg",{"aspectRatio":844},"791/265",[],{"type":23,"value":117},{"type":17,"tag":120,"props":848,"children":851},{"className":849,"dataFragmentIndex":258,"src":850},[74],"./media/testing/fizz_buzz_2.svg",[],{"type":23,"value":117},{"type":17,"tag":120,"props":854,"children":857},{"className":855,"dataFragmentIndex":288,"src":856},[74],"./media/testing/fizz_buzz_3.svg",[],{"type":23,"value":117},{"type":17,"tag":120,"props":860,"children":863},{"className":861,"dataFragmentIndex":323,"src":862},[74],"./media/testing/fizz_buzz_4.svg",[],{"type":23,"value":117},{"type":17,"tag":120,"props":866,"children":869},{"className":867,"dataFragmentIndex":251,"src":868},[74],"./media/testing/fizz_buzz_5.svg",[],{"type":23,"value":117},{"type":17,"tag":120,"props":872,"children":876},{"className":873,"dataFragmentIndex":874,"src":875},[74],"5","./media/testing/fizz_buzz_6.svg",[],{"type":17,"tag":65,"props":878,"children":880},{"className":879},[74],[881,882,887,888],{"type":23,"value":117},{"type":17,"tag":71,"props":883,"children":884},{},[885],{"type":23,"value":886},"fizz_buzz() takes an integer argument and returns it, BUT",{"type":23,"value":117},{"type":17,"tag":65,"props":889,"children":890},{},[891,892,898,899,905,906,912,913,919],{"type":23,"value":58},{"type":17,"tag":71,"props":893,"children":895},{"className":894,"dataFragmentIndex":258},[74],[896],{"type":23,"value":897},"fails on zero or negative numbers",{"type":23,"value":58},{"type":17,"tag":71,"props":900,"children":902},{"className":901,"dataFragmentIndex":288},[74],[903],{"type":23,"value":904},"instead returns \"Fizz\" on multiples of 3",{"type":23,"value":58},{"type":17,"tag":71,"props":907,"children":909},{"className":908,"dataFragmentIndex":323},[74],[910],{"type":23,"value":911},"instead returns \"Buzz\" on multiples of 5",{"type":23,"value":58},{"type":17,"tag":71,"props":914,"children":916},{"className":915,"dataFragmentIndex":874},[74],[917],{"type":23,"value":918},"instead returns \"FizzBuzz\" on multiples of 3 and 5",{"type":23,"value":117},{"type":17,"tag":25,"props":921,"children":922},{},[923],{"type":23,"value":29},{"type":17,"tag":31,"props":925,"children":927},{"id":926},"test-driven-development-assignment",[928],{"type":23,"value":929},"Test driven development assignment:",{"type":17,"tag":65,"props":931,"children":932},{},[933,934,939,940,973,974,980,981],{"type":23,"value":117},{"type":17,"tag":71,"props":935,"children":936},{},[937],{"type":23,"value":938},"Create a test function that checks the rules of FizzBuzz:",{"type":23,"value":117},{"type":17,"tag":65,"props":941,"children":942},{},[943,944,948,949,954,955,960,961,966,967,972],{"type":23,"value":58},{"type":17,"tag":71,"props":945,"children":946},{},[947],{"type":23,"value":897},{"type":23,"value":58},{"type":17,"tag":71,"props":950,"children":951},{},[952],{"type":23,"value":953},"return \"Fizz\" on multiples of 3",{"type":23,"value":58},{"type":17,"tag":71,"props":956,"children":957},{},[958],{"type":23,"value":959},"return \"Buzz\" on multiples of 5",{"type":23,"value":58},{"type":17,"tag":71,"props":962,"children":963},{},[964],{"type":23,"value":965},"return \"FizzBuzz\" on multiples of 3 and 5",{"type":23,"value":58},{"type":17,"tag":71,"props":968,"children":969},{},[970],{"type":23,"value":971},"otherwise return itself",{"type":23,"value":117},{"type":23,"value":117},{"type":17,"tag":71,"props":975,"children":977},{"className":976},[74],[978],{"type":23,"value":979},"Paste your tests in the collab document, and discuss",{"type":23,"value":117},{"type":17,"tag":71,"props":982,"children":984},{"className":983},[74],[985],{"type":23,"value":986},"Now write a function code to make your tests pass",{"type":17,"tag":25,"props":988,"children":989},{},[990],{"type":23,"value":29},{"type":17,"tag":31,"props":992,"children":994},{"id":993},"take-away-1",[995],{"type":23,"value":761},{"type":17,"tag":65,"props":997,"children":998},{},[999,1004,1009,1014],{"type":17,"tag":71,"props":1000,"children":1001},{},[1002],{"type":23,"value":1003},"What did you think of this style of development?",{"type":17,"tag":71,"props":1005,"children":1006},{},[1007],{"type":23,"value":1008},"Was it easier or harder than just writing code?",{"type":17,"tag":71,"props":1010,"children":1011},{},[1012],{"type":23,"value":1013},"Would your code look different without the tests? ",{"type":17,"tag":71,"props":1015,"children":1016},{},[1017],{"type":23,"value":1018},"For what kind of projects would it be (not) useful? ",{"type":17,"tag":25,"props":1020,"children":1021},{},[1022,1028],{"type":17,"tag":1023,"props":1024,"children":1025},"strong",{},[1026],{"type":23,"value":1027},"Test-Driven Development (TDD) is an optional tool in your toolbox",{"type":23,"value":1029}," 🛠️ ",{"title":7,"searchDepth":1031,"depth":1031,"links":1032},2,[1033,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050],{"id":33,"depth":1031,"text":36,"children":1034},[1035],{"id":40,"depth":1036,"text":1037},3,"Mistakes will happen!",{"id":133,"depth":1031,"text":136},{"id":238,"depth":1031,"text":241},{"id":349,"depth":1031,"text":352},{"id":455,"depth":1031,"text":458},{"id":555,"depth":1031,"text":558},{"id":627,"depth":1031,"text":630},{"id":647,"depth":1031,"text":650},{"id":666,"depth":1031,"text":669},{"id":709,"depth":1031,"text":712},{"id":758,"depth":1031,"text":761},{"id":830,"depth":1031,"text":833},{"id":926,"depth":1031,"text":929},{"id":993,"depth":1031,"text":761},"markdown","local_fs:modules:good-practices-lesson:testing-slides.md","local_fs","modules/good-practices-lesson/testing-slides.md","md","---\ntitle: Testing\ntype: slides\norder: 4\nauthor: Ole Mussmann\ndescription: Getting more professional\n---\n\n\u003C!-- .slide: data-state=\"blue_overlay yellow_flag yellow_strip purple_half_circle_bottom purple_blob right_e_top\" data-background-video=\"./media/testing/606762245.mp4\" data-background-video-loop data-background-video-muted=\"true\" -->\n\u003C!-- https://pixabay.com/videos/engine-motor-mechanic-technology-5497/ -->\n\n# Testing\n\n===\n\n\u003C!-- .slide: data-state=\"standard\"  -->\n\n## Basics of testing\n\n### Mistakes *will* happen!\n\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: center\">\n    \u003Cdiv>\n      \u003Cul>\n        \u003Cli class=\"fragment\">The more complex the code, the harder to keep an eye on everything.\u003C/li>\n        \u003Cli class=\"fragment\">However, we can build safeguards against problems:\n        \u003Cul>\n          \u003Cli class=\"fragment\">Throwing exceptions\u003C/li>\n          \u003Cli class=\"fragment\">Logging (intermediate) results\u003C/li>\n          \u003Cli class=\"fragment\">\u003Cb>Writing tests\u003C/b>\u003C/li>\n        \u003C/ul>\u003C/li>\n      \u003C/ul>\n  \u003C/div>\n    \u003Cimg src=\"./media/testing/Doh.png\" width=\"250\">\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Why Test?\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: center\">\n  \u003Cdiv>\n    \u003Cul>\n      \u003Cli class=\"fragment\">Preserve functionality\n      \u003Cul>\n        \u003Cli>Detect (new) errors early\u003C/li>\n        \u003Cli>Avoid unexpected outputs\u003C/li>\n      \u003C/ul>\u003C/li>\n      \u003Cli class=\"fragment\">Help users\n      \u003Cul>\n        \u003Cli>Verify correct installation\u003C/li>\n        \u003Cli>Ensure reproducibility\u003C/li>\n      \u003C/ul>\u003C/li>\n      \u003Cli class=\"fragment\">Enable developers\n      \u003Cul>\n        \u003Cli>Manage complexity\u003C/li>\n        \u003Cli>Simplify refactoring\u003C/li>\n        \u003Cli>Facilitate collaboration\u003C/li>\n      \u003C/ul>\u003C/li>\n    \u003C/ul>\n  \u003C/div>\n    \u003Cimg src=\"./media/testing/experiment.webp\" width=\"400\" style=\"margin-left: 60px\">\n\u003C/div>\n\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Test Types\n\n\u003Cul>\n  \u003Cspan class=\"fragment fade-out\" data-fragment-index=\"4\">\n    \u003Cli class=\"fragment fade-up\" data-fragment-index=\"1\">Exceptions in the code base\n    \u003Cul>\n      \u003Cli>Intended to handle \"expected\" problems\u003C/li>\n      \u003Cli>Sound an alarm as soon as the problem arises\u003C/li>\n      \u003Cli>Provide clear feedback to the user\u003C/li>\n  \u003C/ul>\u003C/li>\u003C/span>\n  \u003Cli class=\"fragment fade-up\" data-fragment-index=\"2\">Unit testing\n  \u003Cul>\n    \u003Cli>Smallest possible unit (module)\u003C/li>\n    \u003Cli>No dependency on outside code...\u003C/li>\n    \u003Cli>(... replace them with mocks, stubs, etc.)\u003C/li>\n  \u003C/ul>\u003C/li>\n  \u003Cspan class=\"fragment fade-out\" data-fragment-index=\"4\">\n  \u003Cli class=\"fragment fade-up\" data-fragment-index=\"3\">Integration testing\n  \u003Cul>\n    \u003Cli>Test interactions between units\u003C/li>\n    \u003Cli>Can be on small scales, system wide, ...\u003C/li>\n  \u003C/ul>\u003C/li>\u003C/span>\n\u003C/ul>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Testing frameworks\n\nMost modern programming languages have good options to streamline testing\n\n- Python: [Pytest](https://docs.pytest.org/en/7.3.x/)\n- Java: [Junit](https://junit.org/junit5/)\n- R: [testthat](https://testthat.r-lib.org/)\n- Matlab: [Testing Frameworks](https://nl.mathworks.com/help/matlab/matlab-unit-test-framework.html?s_tid=CRUX_lftnav)\n- Julia: [Test](https://docs.julialang.org/en/v1/stdlib/Test/)\n- C++: [GTest](https://google.github.io/googletest/) (developed by Google) or [Catch2](https://catch2-temp.readthedocs.io/en/latest/index.html)\n- etc.\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n\n## Testing metrics\n\n#### Targets are arbitrary and indicative\n\n\u003Cdiv style=\"display: flex; justify-content: center; align-items: center\">\n  \u003Cdiv>\n    \u003Cul>\n      \u003Cli class=\"fragment fade-up\">Coverage\n        \u003Cul>\n          \u003Cli>Proportion of code that is executed\u003C/li>\n          \u003Cli>Target >= 80%\u003C/li>\n        \u003C/ul>\n      \u003C/li>\n      \u003Cli class=\"fragment fade-up\">Ratio (lines of code:lines of test)\n        \u003Cul>\n          \u003Cli>Target: (1:3)\u003C/li>\n        \u003C/ul>\n      \u003C/li>\n      \u003Cli class=\"fragment fade-up\">Metrics can be misleading\n        \u003Cul>\n          \u003Cli>They do not measure quality\u003C/li>\n          \u003Cli>Don't get blindsided by hitting targets over writing good tests\u003C/li>\n  \u003C/div>\n  \u003Cimg src=\"./media/testing/metrics.jpg\" width=\"300\" style=\"margin-left: 60px\">\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Write Code\n\n\u003Cpre>\u003Ccode class=\"bash\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n$ mkdir pytest-example\n$ cd pytest-example\n\u003C/code>\u003C/pre>\n\n\u003Cdiv class=\"fragment\">\nCreating a file \u003Ccode>example.py\u003C/code> containing\n\u003Cpre>\u003Ccode class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a + b\n&nbsp;\n&nbsp;\ndef test_add():  # Special name!\n    assert add(2, 3) == 5  # What's `assert`? 🤔\n    assert add('space', 'ship') == 'spaceship'\n\u003C/code>\u003C/pre>\n\u003C/div>\n\n\u003Cdiv class=\"fragment\">\nChat with the python shell about \u003Ccode>assert\u003C/code> ...\n\u003C/div>\n\u003Cdiv class=\"fragment\">\n\u003Cpre>\u003Ccode class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\n>>> assert 1==1  # passes\n>>> assert 1==2  # throws error\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n\u003C/code>\u003C/pre>\n\n\u003C/div>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Test!\n\n\u003Cpre>\u003Ccode style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|1-9\">\n$ pytest example.py\n======================== test session starts ========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py .                                                  [100%]\n\n========================= 1 passed in 0.00s =========================\n\u003C/code>\u003C/pre>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Breaking Things\n\n\u003Cpre>\u003Ccode class=\"python\" style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers>\ndef add(a, b):\n    return a - b  # Uh oh, mistake! 😱\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add('space', 'ship') == 'spaceship'\n\u003C/code>\u003C/pre>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Testing Again\n\n\u003Cpre>\u003Ccode style=\"overflow: hidden;\" data-trim class=\"bash\" data-line-numbers=\"1|2-8|9-17|18-20\">\n$ pytest example.py\n======================== test session starts =========================\nplatform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/ole/Desktop/pytest-texample\ncollected 1 item\n\nexample.py F                                                   [100%]\n\n============================== FAILURES ==============================\n______________________________ test_add ______________________________\n\n    def test_add():\n>       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\nexample.py:6: AssertionError\n====================== short test summary info =======================\nFAILED example.py::test_add - assert -1 == 5\n========================= 1 failed in 0.05s ==========================\n\u003C/code>\u003C/pre>\n\n\u003Cul>\n  \u003Cli class=\"fragment\">🚀❓\u003Cspan class=\"fragment\">Functions fail on first error\u003C/span>\u003C/li>\n  \u003Cli class=\"fragment\">But all test functions are executed\u003C/li>\n\u003C/ul>\n\n===\n\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Pytest wrap up\n\n- pytest collects all files starting \u003Ccode>test_\u003C/code>...\n- ... and runs all test functions starting with \u003Ccode>test_\u003C/code>\n- The tests pass when they do not throw (assertion) errors\n\n\u003Cpre style=\"width: max-content;\">\u003Ccode style=\"overflow: hidden;\" class=\"python\" data-trim class=\"bash\" data-line-numbers>\ndef steal_sheep():\n    ...\ndef paint_cows():\n    ...\n\n# optionally in another file:\n\ndef test_steal_sheep():\n    ...\ndef test_paint_cows():\n    ...\n\u003C/code>\u003C/pre>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- Use pure functions when possible 👌\n  - Do you remember what these are? 💭\n- Testing does not have to be hard 👏\n  - You often test anyway, but then throw the test away 🧐\n  - Use pytest if programming with Python 🎭\n- You don't have to strive for 💯% test coverage\n  - But be smart about what you are testing 🧠\n- Aim for a balance between unit- and integration tests ⚖️\n- Testing removes the dread of refactoring 🔁\n- Your future you (and others!) will thank you 🙏\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Test-Driven Development: FizzBuzz\n\n\u003Cdiv class=\"r-stack\">\n  \u003Cimg src=\"./media/testing/fizz_buzz_1.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"1\" src=\"./media/testing/fizz_buzz_2.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"2\" src=\"./media/testing/fizz_buzz_3.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"3\" src=\"./media/testing/fizz_buzz_4.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"4\" src=\"./media/testing/fizz_buzz_5.svg\">\n  \u003Cimg class=\"fragment\" data-fragment-index=\"5\" src=\"./media/testing/fizz_buzz_6.svg\">\n\u003C/div>\n\n\u003Cul class=\"fragment\">\n  \u003Cli>fizz_buzz() takes an integer argument and returns it, BUT\u003C/li>\n  \u003Cul>\n    \u003Cli class=\"fragment\" data-fragment-index=\"1\">fails on zero or negative numbers\u003C/li>\n    \u003Cli class=\"fragment\" data-fragment-index=\"2\">instead returns \"Fizz\" on multiples of 3\u003C/li>\n    \u003Cli class=\"fragment\" data-fragment-index=\"3\">instead returns \"Buzz\" on multiples of 5\u003C/li>\n    \u003Cli class=\"fragment\" data-fragment-index=\"5\">instead returns \"FizzBuzz\" on multiples of 3 and 5\u003C/li>\n  \u003C/ul>\n\u003C/ul>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Test driven development assignment:\n\n\u003Cul>\n  \u003Cli>Create a test function that checks the rules of FizzBuzz:\u003C/li>\n  \u003Cul>\n    \u003Cli>fails on zero or negative numbers\u003C/li>\n    \u003Cli>return \"Fizz\" on multiples of 3\u003C/li>\n    \u003Cli>return \"Buzz\" on multiples of 5\u003C/li>\n    \u003Cli>return \"FizzBuzz\" on multiples of 3 and 5\u003C/li>\n    \u003Cli>otherwise return itself\u003C/li>\n  \u003C/ul>\n  \u003Cli class=\"fragment\">Paste your tests in the collab document, and discuss\u003C/li>\n  \u003Cli class=\"fragment\">Now write a function code to make your tests pass\u003C/li>\n\u003C/ul>\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Take-away\n\n- What did you think of this style of development?\n- Was it easier or harder than just writing code?\n- Would your code look different without the tests? \u003C!-- .element class=\"fragment\" -->\n- For what kind of projects would it be (not) useful? \u003C!-- .element class=\"fragment\" -->\n\n**Test-Driven Development (TDD) is an optional tool in your toolbox** 🛠️ \u003C!-- .element class=\"fragment\" -->",[1058,1093],{"_path":1059,"_dir":1060,"_draft":6,"_partial":6,"_locale":7,"title":1061,"description":7,"body":1062,"_type":1051,"_id":1090,"_source":1053,"_file":1091,"_extension":1055,"plainText":1092},"/main/about","main","About",{"type":14,"children":1063,"toc":1086},[1064,1070,1075,1081],{"type":17,"tag":31,"props":1065,"children":1067},{"id":1066},"about-this-lessonproject",[1068],{"type":23,"value":1069},"About this lesson/project",{"type":17,"tag":25,"props":1071,"children":1072},{},[1073],{"type":23,"value":1074},"Provide details about the project and lesson.",{"type":17,"tag":31,"props":1076,"children":1078},{"id":1077},"target-audience",[1079],{"type":23,"value":1080},"Target audience",{"type":17,"tag":25,"props":1082,"children":1083},{},[1084],{"type":23,"value":1085},"Define target audience for this material.",{"title":7,"searchDepth":1031,"depth":1031,"links":1087},[1088,1089],{"id":1066,"depth":1031,"text":1069},{"id":1077,"depth":1031,"text":1080},"local_fs:main:about.md","main/about.md","---\ntitle: About\n---\n\n## About this lesson/project\n\nProvide details about the project and lesson.\n\n## Target audience\n\nDefine target audience for this material.",{"_path":1094,"_dir":1060,"_draft":6,"_partial":6,"_locale":7,"title":1095,"description":7,"body":1096,"_type":1051,"_id":1112,"_source":1053,"_file":1113,"_extension":1055,"plainText":1114},"/main/contribute","Contribute",{"type":14,"children":1097,"toc":1109},[1098,1104],{"type":17,"tag":31,"props":1099,"children":1101},{"id":1100},"contributing-to-this-lesson",[1102],{"type":23,"value":1103},"Contributing to this lesson",{"type":17,"tag":25,"props":1105,"children":1106},{},[1107],{"type":23,"value":1108},"Add contributing guidelines for you project.",{"title":7,"searchDepth":1031,"depth":1031,"links":1110},[1111],{"id":1100,"depth":1031,"text":1103},"local_fs:main:contribute.md","main/contribute.md","---\ntitle: Contribute\n---\n\n## Contributing to this lesson\n\nAdd contributing guidelines for you project.",1740409955489]